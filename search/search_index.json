{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to Atelier Mana Oasis! This is the workshop where project Mana-Oasis was born.</p> <p>This website offers a set of keyboard shortcuts for easy search and navigation.</p> Shortcut Action <code>F</code> , <code>S</code> , <code>/</code>  Open search bar <code>Tab</code> , <code>Esc</code>  Close search bar <code>,</code>  Go to the prev page <code>.</code>  Go to the next page <code>Shift + W</code>  Scroll to top <code>Shift + S</code>  Scroll to bottom <p>https://dev.epicgames.com/documentation/en-us/unreal-engine/unreal-engine-5-5-documentation</p>"},{"location":"chaos/career/","title":"TBD","text":""},{"location":"chaos/career/#ascascasc","title":"ascascasc","text":"<p>When you select 32-bit color your computer uses 24 bits for the actual colors (many computers call this \"true color\") plus another 8 bits for the alpha channel (transparency). This produces 16,777,216 possible colors (256^3, ignore the alpha channel) or 4,294,967,296 colors (256^4, include the alpha channel), and has been the standard for a long time, for almost all applications this is more colors than the human eye can discern (the human eye can only detect about 10 million colors).</p> <p>There are systems which offer even more colors, such as 48-bit color (or 64-bit color if including the alpha channel, which is often called \"deep color\"). This is largely limited to professional graphics design software in the VFX industry though.</p> <p>https://en.wikipedia.org/wiki/Color_depth https://en.wikipedia.org/wiki/Gamut</p> <p>OpenCL/CUDA vs Compute Shaders:</p> <p>Although APIs such as OpenCL and CUDA are already available for general purpose computation on the GPU, they are completely separate from OpenGL. Compute shaders are integrated directly within OpenGL, and therefore are more suitable for general computing tasks that are more closely related to graphics rendering. OpenCL/CUDA are similar but intended to be much more generic, they are used for GPGPU computation in fields other than computer graphics as well, and they also target other hardware like some powerful Intel CPUs on workstations.</p> <p>Why using premultiplied alpha is the standard?</p> <p>Premultiplied alpha is closed under composition, non-premultiplied alpha is not! Note that it only matters when we have interpolation and filtering, but has nothing to do with blending or compositing images. For detailed explanations see Alpha compositing and CMU 15-462/662 Lecture 08 P31.</p>"},{"location":"home/about-me/","title":"About Me","text":"<p>Short intro with a few sentences ...</p>"},{"location":"home/about-me/#resume","title":"Resume","text":"<p>Link to your resume here.</p>"},{"location":"home/about-me/#hobbies-interests","title":"Hobbies &amp; Interests","text":"<p>...</p>"},{"location":"home/about-me/#interview-questions","title":"Interview Questions","text":"Background Introduce yourselfWhy interested ?Work in JapanWork at ManulifeWork at NetflixRelated Q&amp;A <p>Tell me about yourself and your background? (5-6 minutes)</p> <p>Hey there! My name is WL, I'm a software engineer with <code>x</code> years of experience. I used to work in other industries, then transitioned to VFX in 2022.</p> <p>Coming off high school, I was studying mathematics and economics at SHUFE for my undergraduate degree. Right after graduation, I went to TAMU to study statistics and earned my M.Sc in econometrics. Back when I was in school, I was never the smartest guy in the room but I was definitely a good student, my parents and teachers were always like \u201cJust focus on your studies, do well in exams, get into a high-ranked university, and land a job at a big company that pays well. That's how you start your life on the right foot\u201d. When I was an undergraduate student in 2008, my major was actually a hot topic. So, math, statistics, combined with economics and finance, people believe that knowing these can make you a lot of money, while I was not sure if that\u2019s gonna make money, I do love the math equations and models in the textbook, so I naively adopted other people's beliefs as my own source of truth. I remember around 2008, most people in China had no idea what an iPhone is, what Google is, nobody was talking about AI, C++11 hasn\u2019t come out yet, even Python 2.7 has not been released yet, so computer science wasn\u2019t really on my radar, because of that, I never thought about learning programming.</p> <p>Fast forward to 2012-2014, I was 24 years old living in Texas. I had spent over 6 years studying math, statistics, and finance, and had tried all sorts of part-time jobs like being a waiter, cashier, and delivery driver. Despite all this, I still couldn't figure out what I wanted to do as a career. I felt completely lost and was just blindly following other people's advice. Well one thing I did know is that I love Japanese anime and manga, I've been watching anime since I was a kid and have always been enjoying it. But, that has nothing to do with my career because, even today, most anime sequences are drawn by hand, and I know nothing about painting. After graduation, I went back home to China, and I got two job offers, one was from Manulife, that Canadian insurance company that also has an overseas branch in Shanghai, the other one was from a big real-estate company in Japan, both offered me a similar role related to finance. Since I love Japanese culture and I speak Japanese, I decided to challenge myself by relocating to Tokyo. So that was my first full-time job, I was a financial advisor who provides financial advice to foreign investors looking to do investment in Japan, mostly in commercial properties and land properties, but I also do a few residential properties as well.</p> <p>Just a few months later, I realized that I didn't really like the job, and that Japan is not as beautiful as romantic as in the animations, so I was quite disappointed. It was a very tough period in my life, the culture in that industry in Japan was kind of toxic at the time, I had to work over 14 hours a day, 28 days a month, I\u2019m serious, not joking, everyday I felt exhausted and totally stressed out, and even closing transactions couldn\u2019t give me a sense of accomplishment. Well, to be honest, it\u2019s actually a quite good job, at least in that industry, the job application process was very competitive, and I have to admit that the pay was really good, almost the best you could expect as a new graduate. However on the flip side, it relies heavily on building social networks. I\u2019m not talking about relationships with colleagues or customers, but more about making connections with other people/agencies across the industry, that\u2019s how to become the first one to receive great offers that\u2019s not even made public yet, that\u2019s how to get insider information. You need to know all kinds of people from banks, from the government, because you often need to bring a draft floor/building plan to the public office to check if they comply with the building code, things like that. For people who love it, it\u2019s definitely a great job, but I\u2019m just not that good at building social relationships, and I don\u2019t want to keep doing it for the rest of my life. Anyway, I could have a lot more excuses, but the main thing is that, I realized I prefer to do something more technical, I\u2019m always more interested in the technical side of things. So, after a whole year of hesitation, I decided to quit the job, and I went back to China, became unemployed.</p> <p>At the time, I felt like a complete loser, like an underdog, because nobody around me had left their first job so quickly, and I didn't know exactly what I wanted to do, even if I knew I wanted to do something technical and creative. Then I remembered during my interview with Manulife last year, they mentioned that they wanted to hire more actuaries. Since I have passed four ASA (Associate of the Society of Actuaries) exams during my graduate studies, and I have built a really good relationship with the recruiter during the 7 rounds of interviews last year, so even if I previously turned down their offer, I thought it might be worth reaching out again. So, I contacted that recruiter to see if they were still hiring, and we had a good conversation. He told me that they were no longer hiring actuaries, but the IT department was looking for people to work on their new bank insurance projects, so he asked if I have interest in coding. At first I was like, no way, I\u2019ve never done any coding before and I know nothing about programming, But he mentioned that my background in math and statistics is a big plus, I have the domain knowledge of insurance and finance, and it\u2019s also easier for him to do less paperwork since I already went through all the previous rounds of interviews. He said, all I have to do is to learn a bit of C# and PL/SQL (Procedural Language for SQL), and then he would arrange for me to meet with the IT team. He also mentioned that actuaries these days have a high turnover rate because companies are starting to use R and Python instead of MS Excel or SAS, so even if I were to work in the actuarial department, I would still need to learn programming from scratch. It was a casual talk, so he also told me some stories, he said that many actuaries, after learning to code, were leaving the industry to do machine learning instead because that makes a lot more money, and I was like, what is machine learning, that\u2019s a whole new buzzword to me, how is it possible that machines can learn? So after the phone call, I did some research online, I learned that CS and DS is a big trend in the tech world now. This was all happening in 2016, in China to be specific, where more and more people were starting to talk about facial recognition, deep learning, computer vision, etc. It was not 2008 anymore, it was 2016, so most people knew the Google search engine even if it\u2019s banned in China, more people were using Apple products like iPhones and iPads, those are no longer reserved for the rich people, and most importantly, computer science had become the most popular major that everyone wanted to study in university.</p> <p>So, I started learning C# and PL/SQL from scratch, and a few weeks later I joined Manulife as a database engineer in the IT department, developing database applications, that\u2019s how I made a career transition into the programming world in 2016. Since 2017, I began to delve deeper into computer science in my spare time, I explored everything from Python, C++, operating systems, algorithms and data structures, all the way to data science and computer vision, but because I was mostly watching free open courses online from some English-speaking universities, that only scratched the surface of each topic but failed to go in more depth. Around that same time, I made a big decision in my life to study abroad again to pursue another M.Sc in CS, I believed that would lead to better job opportunities and eventually help me immigrate. I knew the tuition fees are very expensive in the states and it\u2019s hard to obtain H1B visas these days, so I gave up the universities in the U.S and turned to look at Australia and Canada because of their friendly immigration policies, and then I also gave up Australia when people told me that the giant spiders is a big deal there. After working at Manulife for 3.5 years, I\u2019ve saved up enough money to cover my graduate study\u2019s cost, I\u2019ve also completed a few side projects and over 40 courses on Coursera. Those credits are not official so they don\u2019t really count towards an academic degree, but some professors still highly appreciate that, so one of the professors I talked to, named Stefan Bruda, he decided to give me a chance to study in their computer science master\u2019s program, at BU in Quebec. So on Christmas in 2019, I stepped onto my journey to Canada.</p> <p>During the two years 2020 and 2021 in Quebec, I was concentrated on my study in computer science. But because the scope of computer science is way too broad, there are so many things under this umbrella, I was still pretty lost in choosing the right career. Initially I was deeply into socket programming for a course on computer networks, then I got interested in medical imaging analysis where you have a 3D medical image of the brain scanned from MRI or f-MRI (Magnetic Resonance Imaging) and you need to convert these voxels into a sequence of 2D images, then you can write a program using NumPy, Pandas and matplotlib, doing image registration, image segmentation, then denoise it, and finally analyze the data on the screen. That is essentially an application of computer vision and some math, but the last part is visualization, and that really changed everything. So, for my final project, my professor asked me to visualize the 3D neuro image in the viewport in the Unity game engine, that\u2019s when I learned a new word called computer graphics, and all of a sudden I was like, this is exactly what I want to do in my life, using technology to build creative arts? that\u2019s just amazing! So after that, I dedicated all my time to learning CG, I delved into game development in Unity, learned C++ and OpenGL, and I even spent a whole 7 months building a physically-based renderer in OpenGL. This project serves both as an exercise and a portfolio for job applications.</p> <p>I started job hunting in June 2022, and soon after that I had the chance to talk to Steve about the lighting TD role, that\u2019s how I got my foot into the door of the VFX industry. To be honest, I had never heard of the term VFX before applying for this job. I\u2019m not a big fan of watching movies, the only thing I watch is Japanese animation, so my understanding of computer graphics was really confined to the game industry, Unity and Unreal engine, plus a few architectural visualization companies like IKEA. So when I joined AL two years ago, I was a new graduate who knows nothing about this industry, with absolutely 0 experience. Even today, I\u2019m still a beginner in terms of knowledge and experience, there are always so many things to learn, so many new technologies coming out each year. I just really appreciate that AL gave me this opportunity to work here, I\u2019m really grateful to Luke and Jo Ann for kindly recommending me to Steve, which gave me the chance to discuss this role. So yeah it\u2019s just a job, but it also means a lot to me. It took me 10 years to figure out a career that\u2019s right for me, a career that I\u2019m passionate about. I know I\u2019m really late to the party, but I just want to keep working in this industry, to hone my technical skills. I do believe that VFX is the real application of computer graphics, this is the real 3D industry, we spend tons of money to make a good film, we don\u2019t compromise on the model details, on surfacing, animation, visual effects, hair and furs, we care about every single pixel in every frame, we aim to produce images of the best quality to tell the story, so I\u2019m really amazed at what we are doing, and I believe OpenUSD is the future of 3D. So yeah, that\u2019s basically how I ended up here.</p> <p>Why are you interested in our company and in this role? (3-4 minutes)</p> <p>......</p> <p>How much was the Japanese company paying?</p> <p>Converted to Canadian dollars, I think it\u2019s close to 60 grand, that\u2019s the base salary, plus you also have bonuses from being able to close transactions, which can be huge. For some veterans who knows a lot of people in the industry, they just need a single transaction to be done for the year. That could be a huge land property, or buying and selling an entire commercial office building. So even if you are acting as a broker instead of a buyer and seller who takes advantage of that arbitrage, you can still get 3% for the transaction fees and that could be huge. Well technically, 3% is the profit that goes into the company\u2019s bank account, not your own pocket, your bonus can be 5%, 10% or 20% out of that 3% depending on some other factors.</p> <p>What were you exactly doing in Japan?</p> <p>As I mentioned, my job was to provide financial advice to foreign investors who have interest in investment in Japan. It could be just a residential property investment for individual investors, but often times the investors are going to be a group of people from HK and TW, you know there are a lot of rich people there, that\u2019s why they hired me because I can speak Mandarin to those people. Sometimes it could also be a foreign company that wants to buy or rent an office building, or a warehouse for production, or even a soap land (the equivalent of strip clubs in the North America), that\u2019s not on the list of my job duties as a junior, but yeah some senior people were doing it.</p> <p>Speaking of the things I did:</p> <ul> <li>New properties will be released onto an industry-private website on a daily basis, the website (REINS) is managed by a public organization in the government, it\u2019s not public to people outside the industry. Every week, I need to select some of these and visit on site, and then write up a report template with analysis of each property.</li> <li>During that process, I might need to collect some observations and data around the site, exchange some private market data with other companies and local agencies. That\u2019s not just how you share info with others, but also how you retrieve info from others, how you find local deals that\u2019s not on the internet. If I know I have a great deal on a property, for example a property that\u2019s owned by our company and we want other agencies to help us sell it in their neighborhood, then unless this person has a really good relationship with me in the past, I don\u2019t want to disclose this to him.</li> <li>Our industry has a strong focus on human networks and relationships, and also, the national Japanese culture is very serious about delivering the best quality of customer service they can offer, regardless of industry. So for those reasons, the business is primarily driven by people, although we have plenty of data-driven approaches and theories written in the textbook, in practice they simply don\u2019t apply, or it\u2019s way too expensive to apply just for a hypothetical profit that\u2019s not even guaranteed.</li> <li>Things have changed a lot since the first Airbnb was introduced in Japan in 2017, I\u2019ve heard that some companies were shifting towards that market in Japan, and people were talking more about hotels and concept of real estate digitalization, but I left Japan in 2016 so I don\u2019t know too much about that.</li> </ul> <p>In case you are curious about where those investors come from, they are usually recommended by other agency brokers from China, from brokers that have a long-standing relationship with us. For asset investments like this, every time you make a transaction, it\u2019s never going to be just one or two brokers sitting in the middle. When investors ask for a specific kind of property, first they need to find a local agency broker in China in order to reach us. Even then, in our inventory, we probably don\u2019t have exactly what they want, so we still need to search for such a property in the market by visiting local agencies, or checking the resources we have from others. If you are not fast enough, or if you are not well-prepared ahead of time, you\u2019re likely going to lose that investor that customer.</p> <p>What were you exactly doing at Manulife?</p> <p>We develop applications based on the Oracle database, there\u2019s really nothing interesting about that. For me, we only have 3 people in our team, and we basically just develop a transaction system for the bank insurance. So a customer walks into a local branch of the bank, he wants to buy our insurance through our bank partner so he\u2019s going to initiate a transaction request from the bank side. The bank staff will ask him to fill in some personal information, answer a few questions, and then submit the request from their central system. The request will be encrypted into an XML, which goes through the network to reach our Apache Tomcat server. Then we deserialize the XML, put them into a message queue, write the data into a table. There\u2019s going to be a scheduled batch job that runs every couple of seconds to detect if we have any pending request to be handled (the batch job is a .bat file on Windows that\u2019s registered on our server). And finally, the data gets fed into our transaction system entry point, we need to validate the data, run a whole bunch of rules, determine the eligibility of both the applicant and the insurer. If everything works fine, we are gonna invoke the core API to issue a new policy, generate a list of PDF reports, assemble a response XML and send it back to the bank, otherwise we abort the transaction and ask the customer to try again.</p> <p>You know, this is just a overly simplified view of our transaction pipeline, everything is going paperless and electronic these days, so we usually have a separate child application at each stage of the pipeline. Also in practice, there are many more types of transactions like filing a claim or a change request. There\u2019s also lots of regulations in the industry, and we have our own rules as an insurance company, each bank also has their own set of rules. We have partnership with many different banks, from all over the world, not just one. Every bank may have a transaction that looks very different, they might have special laws and regulations in the local region, so for each bank channel, we need to create a new database schema to develop the transaction system, but all of those schemas need to inherit from a generalized core schema.</p> <p>Anyway, the system architecture can be quite complicated in terms of software engineering design patterns and design principles, but the code itself is just all about business logic, not much innovative technology, so nothing interesting about that. However, you do need to have a solid understanding of the domain knowledge, not just about insurance, but also some finance, because many companies these days have products that pay dividends, accumulate cash value and annuities, some of them also offer the option to invest the cash value into stocks and bonds. So as a policyholder, you are no longer buying a traditional life insurance, it\u2019s more like a type of investment.</p> <p>If you are working as a developer in the financial industry, most likely they are gonna prioritize security and correctness as the top thing to keep in mind, not performance, not usability, not creativeness, but more about security and correctness. Every number you see is going to be the dollar value appeared in someone\u2019s account, so we really cannot afford to make even a small mistake. For this reason, the testing phase usually takes a lot longer than the development phase, we have unit tests, SIT, UAT, stress test, and finally we need people to be physically present at the bank and do testing there on site. Only after that we can release into production.</p> <p>Yes we also do on-call on a rotating basis. Every couple of weeks, it\u2019s going to be your turn to stay in the office overnight, on the grand release day. In financial institutions, changes are usually only released weekly or monthly on a specific release day. You need to wait until the bank server is shut down at 11 PM, only then you can release all the changes into the production database. Imagine that you have 200 tickets to release on that day, and there are lots of dependencies between them so you need to make sure everything is released in the right order. As a dev you don\u2019t usually need to do these, because that\u2019s the job duties of a DBA (Database Administrator), but if something goes wrong during the release, he is not able to handle that since he\u2019s not the person who writes the code, so that\u2019s why you need to be there, you need to quickly figure out what\u2019s going on, find out which ticket which package is the problem, who made that change, and then comes the best part, which is that you need to call this person to wake him up at 3 AM, ask him to fix the problem asap, otherwise it\u2019s going to be a production accident. No matter what happens, everything must be sorted out before 6 AM in the morning, because the bank server will start up at 7 AM.</p> <p>What were you exactly doing at FAN?</p> <p>At AL, initially I was actually applying for the software engineer position in the rendering team. You know, I have this beautiful C++ portfolio which is a real-time physically-based renderer, that really caught their eyes. So I was talking to Luke during the first round of interview, he\u2019s the engineering manager of the rendering team. We talked a bit about some basic rendering stuff like light sampling, SSS, indirect lighting, hairs and furs, and then we both realized I was probably not a good fit for the role. You know, because my renderer is real-time in OpenGL, it\u2019s based on rasterization, so it doesn\u2019t really have much indirect lighting other than some light maps and IBL. It\u2019s not like a real path tracer where you trace rays from camera into the scene, and then have it bounce around to calculate the light contribution at each shading point, so my renderer is missing a lot of key features he\u2019s looking for such as volumes, indirect, motion blur. I also didn\u2019t have much C++ programming skills that\u2019s performance-oriented like the use of advanced multithreading, so the conversation really just ended there. But luckily for me, the recruiter and him didn\u2019t give up on me, they recommended me to Steve who\u2019s in charge of the lighting TD\u2019s team. Then we had a great conversation in the next 3 rounds of interviews, and later I joined AL as a lighting TD in August 2022.</p> <p>Basically as a lighting TD, my job is to create all kinds of tools for lighting artists, to help them do lighting on the shots. If the renderer failed for some reason, or if the program crashed, we need to debug our tools see if there\u2019s anything not working, or maybe find an evidence that the render was at fault and submit bug reports to the rendering team. If the render doesn\u2019t look good, or if the render time or memory usage is too high, we also need to find the culprit, maybe help the artists optimize their light rigs, the render settings, or some heavy procedurals like furs and weaves. At AL, what makes our lighting TDs different from other TDs is our in-house lighting software called Filament. We don\u2019t use Katana or Gaffer for lighting, we develop and maintain our own lighting software which is Filament. Filament is a PyQt application that\u2019s entirely built on USD, we have many different components in the app, such as a node-based graph editor for authoring light rigs, a stage outliner for viewing and editing prims, a properties view, an interactive render plugin for doing local IPR renders, and a real-time interactive viewport. \u2026\u2026</p> <p>Why not pursue a career in quants?</p> <p>Quant is definitely a great job, one of the best-paid jobs in the market. You know, all of my friends, my classmates in school, they are all working in the financial industry, in banks, in security firms, working on private equity, or mutual funds, and I can keep talking about this for hours. However, this is a highly technical and competitive position, very much like being an actuary, it\u2019s not enough to just know about the interest rate model, the put-call parity, you know, the math behind derivative pricing like options, futures and annuities, but there\u2019s also a strong focus on algorithmic programming, so you need to write highly-performant C++ code in order to find potential arbitrage opportunities, which is quite hard.</p> <p>In fact, the financial industry can vary wildly from country to country. In China, our market is still quite young compared to those in the U.S or Europe, there aren\u2019t many established firms with robust quant teams, but that\u2019s not even the main thing. The main thing is that, because of some culture differences, our market in China still places a higher value on traditional methods and human relationships, it\u2019s not a free market where the prices of goods are always determined by demand and supply, so a lot of data-driven approaches and quant strategies simply do not apply there. You might have heard that China's regulatory environment is very restrictive, which is largely true. I\u2019m not going to talk about the bureaucracy and drinking culture, but we do have very strict regulations on securities, insurance and banks for all kinds of reasons, you don\u2019t always need people who are technical because tech is not always that important, but you definitely need people who have a broad human network and resources across the industry, especially those who can potentially bring insider information to the table. This issue is not just about the financial industry, we also have strict censorship on the game industry for example, any kind of violence content in game is considered a law violation, and there\u2019s a list of rules to help prevent game addiction, also any AI stuff like Gemini and ChatGPT are strictly banned.</p> <p>Anyway, I know I have an immigration plan to eventually work and live in Canada, so working hard to become a quant at that time was never an option for me.</p> General Why U ?Vision yourselfSalariesCommon 1Common 2 <p>Why should we hire you? What can you bring to the table?</p> <p>Coding skills, graphics and rendering, portfolio, C++ debugging and optimization...</p> <p>I think the job qualifications pretty much align with my skill set, so I believe I can quickly adapt myself to this environment and become a successful candidate.</p> <p>Where do you see yourself in 5 years?</p> <p>I think 5 years is too long because when I reflect on myself 5 years ago, I just started ..., I had no idea I'd be here today having this interview with ...</p> <p>I don't know how to predict the future, but I can tell you my future plans. (In the short run, ..., in the long run, ...)</p> <p>One thing is always clear, that is growth. I mean, if you look at my life stories in the past, I have been changing roles, companies, industries, and even moving from country to country. Every time I make a decision, I\u2019m always looking for passion, opportunities for growth, opportunities to challenge the status quo, to improve my skills and learn new things. I think this is very important for software developers because technologies are quickly advancing, every year we have new things come out, nothing is set in stone, and we might even need to compete with AI. So I think wherever there are opportunities for growth, for improvement, I will probably be there in 5 years.</p> <p>What are your salary expectations?</p> <p>Coding skills, graphics and rendering, C++ debugging and optimization...</p> <p>What questions do you have for us?</p> <p>...</p> <p>What other companies are you interviewing with?</p> <p>...</p> Technical <ul> <li>How much do you know about C++? On a scale of 10?<ul> <li>Don't say a number, don't say 10, don't say 6!</li> </ul> </li> <li>How much do you know about offline or real-time rendering?<ul> <li>Sampling, BVH, integrator, Hydra...</li> </ul> </li> <li>How much do you know about Qt?<ul> <li>OpenGL in Qt, slots and signals across threads, ...</li> </ul> </li> <li>Tell me about a time when you optimize or debug a piece of code or a feature?<ul> <li>SDF Global layer registry deadlock with GIL</li> <li>Deadlock on the same thread due to non-reentrant functions</li> <li>Python/C++ object lifetime mismatch</li> <li>The Python logger keeps USD objects alive (ref count +1)</li> <li>Optimize CPU cache hits and avoid cache misses</li> <li>...</li> </ul> </li> </ul> Behavior ABCDEFGHIJ <p>What motivates you in a job?</p> <p>I love beautiful graphics and the process of translating tech into art, that gives me a great sense of accomplishment.</p> <p>What is your tolerance for ambiguity?</p> <p>I\u2019m very tolerant when it comes to ambiguity, because software is full of compromises. Sometimes it can be hard to strike a balance between performance, robustness, readability and user expectations. I think ambiguity is not necessarily a bad thing, you can choose between multiple solutions, and that gives you a chance to brainstorm, to come up with new ideas.</p> <p>What is your strength or weakness?</p> <p>Look at the forest before the leaves...</p> <p>How do you handle stress?</p> <p>Stress has never been a problem for me in the past. If you look at my life stories in the past, I have been through a lot of stressful situations, making a career change, learning to code from scratch, taking many courses online while still having to work full time, etc. Stress can teach you something and push you forward, I think we need to be positive and look at the bright side.</p> <p>Tell me about a time when you ....</p> <p>...</p> <p>What do you expect from a supervisor or manager?</p> <p>Communication and discussion ...</p> <p>How to handle conflicts with your supervisor, colleagues?</p> <p>People have different personality and thoughts. Try to be patient, keep calm, understand others perspectives, discuss the solutions, and try to reach an agreement. If the conflict cannot be resolved, learn to compromise. I've learned this many times in life that collaboration is often more important than the solution itself. With great teamwork and mutual respect, any conflict can be resolved with time.</p> <p>How to handle failure with work, deadline or communication?</p> <p>Make schedules ahead of time. If I fail to meet the schedule at some point, I will reflect on myself and try to fill the gap the very next day. If it\u2019s urgent, talk to my supervisor, discuss to find a solution, or seek help from others. Don\u2019t shy away from asking people for help!</p> <p>How do you think other people would describe you?</p> <p>I\u2019ve been told many times by others that they love my level of carefulness and attention to detail.</p> <p>What to do in case you don't know the answer, say ?</p> <p>Can I come back to this later right after the interview? I need more time to think about it.</p>"},{"location":"home/docs-template/","title":"Docs Template","text":"<p>add <code>requirements.txt</code> and <code>pyproject.toml</code> to the root.</p>"},{"location":"home/docs-template/#basic-text","title":"Basic Text","text":"Format documentFormat textHTML entitiesBlockquotesKeycodes <ul> <li>Use <code>---</code> to write a horizontal rule.</li> <li>Use EOF <code>\\</code> to force a line break (never use trailing spaces).</li> <li>Only use <code>&amp;nbsp;</code> and <code>&amp;emsp;</code> when you really need it.</li> </ul> <ul> <li>This is bold and italic. This is also bold and italic. This is bold and italic combined.</li> <li>This is underlined, strikethrough, highlighted and inline highlighted in Markdown.</li> <li>This is underlined, strikethrough and highlighted in HTML syntax.</li> <li>This is superscript<sup>s</sup> and subscript<sub>s</sub> in Markdown. For example, H<sub>2</sub>O, CO<sub>2</sub>, A<sup>T</sup>P, mc<sup>2</sup>.</li> <li>This is superscript<sup>s</sup> and subscript<sub>s</sub> in HTML syntax.</li> <li>This is deleted text and this is added text. You can combine them into one changed  text.</li> </ul> <ul> <li>Often used to display characters that have special meanings in HTML.</li> <li>For example, \u00a9 &amp; &lt; &gt; \u00b6 \u00ae \u2122 \u00a7 \u20ac \u00a3 \u00e1 \u00e9 \u00f1 \u00f6 \u2190 \u2192 \u2191 \u2193</li> </ul> <p>Fringilla nisl. Donec accumsan interdum nisi, quis tincidunt felis sagittis eget tempus euismod.</p> <p>Blandit adipiscing eu felis iaculis volutpat ac adipiscing accumsan faucibus. Vestibulum ante ipsum primis in faucibus lorem ipsum dolor sit amet nullam adipiscing eu felis.</p> <ul> <li>Keyboard keys can be rendered with a simple syntax, e.g.</li> <li>Ctrl+Alt+Del</li> <li>Ctrl+Alt+Del</li> <li>to be continued here</li> </ul> <p> Tip - You can always use <code>&lt;small&gt;...&lt;/small&gt;</code> or <code>&lt;big&gt;...&lt;/big&gt;</code> to adjust font size when needed. </p>"},{"location":"home/docs-template/#content-tabs","title":"Content Tabs","text":"Unordered listCode blockPlain text <ul> <li>Nullam dignissim ultrices urna non auctor.</li> <li>Duis mollis est eget nibh volutpat.</li> <li>Duis efficitur accumsan nibh eu mattis.</li> </ul> code-helloworld.js<pre><code>function main() {\n    console.log(\"Hello world!\");\n}\n</code></pre> <p>Basically everything can be wrapped into a content tab for readability.</p> <p>In most cases, content tabs, callouts, lists and many others can all be nested within each other.</p>"},{"location":"home/docs-template/#lists-and-tables","title":"Lists and Tables","text":"Unordered listOrdered listTask listSimple TableAligned Table <ul> <li>Nullam dignissim ultrices urna non auctor.<ul> <li>Duis mollis est eget nibh volutpat.</li> <li>Duis efficitur accumsan nibh eu mattis.</li> </ul> </li> <li>Ante turpis integer aliquet porttitor.</li> </ul> <ol> <li>Nullam dignissim ultrices urna non auctor.<ol> <li>Duis mollis est eget nibh volutpat.</li> <li>Duis efficitur accumsan nibh eu mattis.</li> </ol> </li> <li>Ante turpis integer aliquet porttitor.</li> </ol> <ul> <li> Nullam dignissim ultrices urna non auctor.<ul> <li> Duis mollis est eget nibh volutpat.</li> <li> Duis efficitur accumsan nibh eu mattis.</li> </ul> </li> <li> Ante turpis integer aliquet porttitor.</li> </ul> First Header Second Header Third Header Content Cell 6 Content Cell 2 Content Cell 4 Content Cell 3 Content Cell 5 Content Cell 1 First Header Second Header Third Header Left Center Right Left Center Right Tip <p>A table must be surrounded by blank lines. There must be a blank line before and after the table. By default, tables are also sortable by columns, but don't do it on large tables.</p> <p>For more complex tables that need custom styling, consider embedding HTML directly into markdown. If there's a pattern to follow, <code>jinja2</code> can generate it for you. For example, this HTML table is generated by this Python script and is appended to the markdown file with automated Github actions.</p>"},{"location":"home/docs-template/#math","title":"Math","text":"<p>Inline math must be enclosed in <code>$...$</code> or <code>\\(...\\)</code></p> <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\). \\(5x - 3y + 6z - 7\\) where \\(d=\\sqrt{y^{2} + z^{2}} = \\sqrt{1/3}\\). Note that the dollar sign can be escaped using <code>\\$</code>, e.g., \\(p=\\sqrt{p_{x}^{2} + p_{y}^{2}} = \\$10.00\\)</p> <p>Block math must be enclosed in <code>$$...$$</code>, <code>\\[...\\]</code> or <code>\\begin{}...\\end{}</code>. A block also must contain no empty lines and should be both preceded and followed by an empty line.</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\] \\[ u = -\\frac{xd}{z},\\; v = -\\frac{yd}{z},\\; \\frac{|d \\vec{v} \\cdot n|}{|n|} = 4\\sqrt{3} \\] \\[\\begin{bmatrix}     1  &amp;   0   &amp;   0   &amp;  0\\\\     0  &amp;  z/d  &amp; -y/d  &amp;  0\\\\     0  &amp;  y/d  &amp;  z/d  &amp;  0\\\\     0  &amp;   0   &amp;   0   &amp;  1 \\end{bmatrix}\\] <p>MathJax seems to accept the standard amsmath syntax. Rows are terminated with <code>\\\\</code> and columns are separated by <code>&amp;</code></p> \\[\\begin{align*}     R_{vx}(\\theta _{vx}) &amp;= \\begin{bmatrix}         1  &amp;   0   &amp;   0   &amp;  0\\\\         0  &amp;  z/d  &amp; -y/d  &amp;  0\\\\         0  &amp;  y/d  &amp;  z/d  &amp;  0\\\\         0  &amp;   0   &amp;   0   &amp;  1     \\end{bmatrix},     R_{vy}(\\theta _{vy}) = \\begin{bmatrix}         d  &amp;  0  &amp; -x  &amp;  0\\\\         0  &amp;  1  &amp;  0  &amp;  0\\\\         x  &amp;  0  &amp;  d  &amp;  0\\\\         0  &amp;  0  &amp;  0  &amp;  1     \\end{bmatrix} \\end{align*}\\] \\[\\begin{align*}     \\begin{pmatrix}         c &amp; s\\\\-s &amp; c     \\end{pmatrix} \\end{align*}\\] <p>For vectors just use a tuple, e.g. \\(\\vec{v_1} = (1, 2, 0)\\).</p> <p>This is an inline matrix \\(r_{\\omega} =\\) \\(\\begin{psmallmatrix}     0 &amp; x\\\\z &amp; 0 \\end{psmallmatrix}\\).</p>"},{"location":"home/docs-template/#colors","title":"Colors","text":"<ul> <li>HEX color <code>#0969DA</code></li> <li>RGB color <code>rgb(9, 105, 218)</code></li> <li>HSL color <code>hsl(212, 92%, 45%)</code></li> </ul> <p>inline text color:</p> <p>This is line red text</p> <p>This is a colored paragraph.</p> <p>Click on a tile to change the accent color:</p> <code>red</code> <code>pink</code> <code>purple</code> <code>deep purple</code> <code>indigo</code> <code>blue</code> <code>light blue</code> <code>cyan</code> <code>teal</code> <code>green</code> <code>light green</code> <code>lime</code> <code>yellow</code> <code>amber</code> <code>orange</code> <code>deep orange</code>"},{"location":"home/docs-template/#emojis-and-icons","title":"Emojis and Icons","text":"<p>While icons can be both colored and animated, emojis can only be animated but not colored as they already have colors. Use this icon search tool to find out the shortcode for an icon or emoji.</p> DefaultUsing <code>&lt;big&gt;</code>Using <code>&lt;small&gt;</code>Icon animatedIcon colored and animatedEmoji animated <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <p> </p>"},{"location":"home/docs-template/#links","title":"Links","text":"<p>This is an internal link that links to another Markdown document, here is another internal link for example.</p> <p>This is a global anchor link that links to a section (header) within another Markdown document. This is a local anchor link that links to a section (header) within the current Markdown document. Generated anchor/section IDs follow the same rules that apply in Github markdown.</p> Rules for relative paths <p>Make sure the path starts with a <code>/</code> so that it's relative to the <code>docs_dir</code> root. This applies regardless of whether the link is used as a URL or for embedding an image. If the path doesn't begin with a <code>/</code>, it will be interpreted as relative to the current markdown file. This makes it difficult to reference local resources, especially for files buried deep in the hierarchy. Note that it also leads to inconsistencies, as the same file could be referenced by many different paths.</p> <p>Tip</p> <p>Links don't have to be authored inline, you can also define them in one place after a block. This can be especially helpful if a link needs to be reused multiple times.</p>"},{"location":"home/docs-template/#images","title":"Images","text":"<p>With the built-in extension, you can specify image attributes directly in Markdown with <code>{...}</code>. Normally you shouldn't need to specify <code>{ loading=lazy }</code> on images, as modern browsers by default will decide when to load the resource based on heuristics like network speed and device capabilities.</p> MarkdownHTML Markdown<pre><code>![Image title](/assets/images/chizuru.png){ width=60% }\n</code></pre> <p></p> HTML<pre><code>&lt;img src=\"/assets/images/chizuru.png\" width=60% height=auto&gt;\n</code></pre> <p></p> <p>Tip</p> <p>Append this block to the image to add a caption:</p> <pre><code>/// caption\nThis is my wife\n///\n</code></pre> <p></p> <p>This is my wife</p> <p>Use the <code>align</code> attribute to align images to the left or right, note that there is not a center option.</p> Markdown<pre><code>![Image title](/assets/images/BG203.jpg){ align=left width=280 }\n</code></pre> <p> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Markdown<pre><code>![Image title](/assets/images/BG203.jpg){ align=right width=280 }\n</code></pre> <p> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"home/docs-template/#annotations","title":"Annotations","text":"<p>Annotations can be added to virtually all elements. It has a little marker(1)marked with the <code>annotate</code> class, and the content is listed below the block containing the marker(2).</p> <ol> <li>I'm an annotation who can contain <code>code</code>, formatted text, images, ..., basically anything that can be expressed in Markdown.</li> <li>For example, let me show you some code: <pre><code>#include &lt;iostream&gt;\n\nint main()\n{\n    std::cout &lt;&lt; \"Hello World!\";\n    return 0;\n}\n</code></pre></li> </ol> <p>To simplify the usage syntax, wrap the markdown block in <code>&lt;div class=\"annotate\" markdown&gt;...&lt;/div&gt;</code>, then define all the annotations in a list. This works for everything except code blocks.</p> Annotations made easier<pre><code>&lt;div class=\"annotate\" markdown&gt;\nThis is an annotation(1). This is another annotation(2).\n&lt;/div&gt;\n\n1. Hello!\n2. Howdy!\n</code></pre> <p>This is an annotation(1). This is another annotation(2).</p> <ol> <li>Hello!</li> <li>Howdy!</li> </ol> <p>Here for example we have annotations in callouts and content tabs, all using this trick.</p> Tab OneTab Two <p>Lorem ipsum dolor(1)sit amet, consectetur adipiscing elit.</p> <p>Phasellus posuere in sem ut cursus(2).</p> <ol> <li>Hello from content tab!</li> <li>Howdy from content tab!</li> </ol> <p>Phasellus posuere in sem ut cursus(1)</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod(2)nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li>Hello from callout!</li> <li>Howdy from callout!</li> </ol> <p>For code blocks, code annotation has been globally enabled so don't worry about the <code>annotate</code> class or the <code>&lt;div&gt;...&lt;/div&gt;</code> block. Within a code block, annotations can only be placed within a line/block comment, like <code>// (1)!</code>. The trailing exclamation mark <code>!</code> is used to strip the comment characters surrounding a code annotation.</p> Code annotations<pre><code>bool intersect(const Ray&amp; ray, double&amp; t) const\n{\n    Vec3 oc = ray.origin - center;\n    double b = oc.dot(ray.direction);\n    double c = oc.dot(oc) - radius * radius;\n    double discriminant = b * b - c;\n    if (discriminant &gt; 0) {\n        t = -b - std::sqrt(discriminant); // (1)!\n        return t &gt; 0;\n    }\n    return false;\n}\n</code></pre> <ol> <li>I'm a friendly  annotation who wants to help explain a specific line of code.</li> </ol>"},{"location":"home/docs-template/#buttons","title":"Buttons","text":"<p>buttons, buttons with icon</p>"},{"location":"home/docs-template/#code-blocks","title":"Code Blocks","text":"<p>With our built-in extension, syntax highlight is also supported on inline code. Just prepend <code>#!py</code>, <code>#!sh</code> or whatever to the inline code, and you will see colors in no time. Recall that we also have inline comment (in grey).</p> <ul> <li>This is Python inline code <code>import os, sys</code> in plain form.</li> <li>This is Python inline code <code>import os, sys</code> with syntax highlight.</li> <li>This is C++ inline code <code>constexpr int factorial(int n)</code> in plain form.</li> <li>This is C++ inline code <code>constexpr int factorial(int n)</code> with syntax highlight.</li> <li>This is an inline comment which is programming-language-agnostic.</li> </ul> <p>Code blocks can have custom titles, annotations(1), line numbers(2)and highlighted lines(3). For example, this code block has options <code>py title=\"bubble_sort.py\" linenums=\"1\" hl_lines=\"3-5\"</code>. Don't know the lexer code for a particular programming language? The pygments website got your back!</p> <ol> <li>annotations</li> <li>user can optionally define a starting line number other than 1</li> <li>line counts start at 1, regardless of the starting line number</li> </ol> bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>Content of the code block can be imported from external sources as well, such as a local file or a URL. This feature requires some configuration on the Snippets extension. In practice though, I would be inclined not to do it due to the maintenance cost and the potential for things to break. In this case, I'd rather just use a permalink on Github instead. It does take one more click but has zero cost moving forward.</p>"},{"location":"home/docs-template/#admonitions","title":"Admonitions","text":"<p>Admonitions, aka callouts, are side content in the main document.</p> <p>Callout without a title.</p> <p>Example</p> <p>Callout with default title (will use name of the type qualifier).</p> <p>Custom Title</p> <p>Callout with custom title.</p> Collapsible callout (collapsed) <p>Lorem ipsum dolor sit amet. Nulla et euismod nulla. Curabitur feugiat, nec semper lorem quam in massa.</p> Collapsible callout (expanded) <p>Lorem ipsum dolor sit amet. Nulla et euismod nulla. Curabitur feugiat, nec semper lorem quam in massa.</p> <p>There are 12 built-in callout types available.</p> Note <p>Lorem ipsum dolor sit amet. Nulla et euismod nulla.</p> Abstract <p>Lorem ipsum dolor sit amet. Nulla et euismod nulla.</p> Info <p>Lorem ipsum dolor sit amet. Nulla et euismod nulla.</p> Tip <p>Lorem ipsum dolor sit amet. Nulla et euismod nulla.</p> Success <p>Lorem ipsum dolor sit amet. Nulla et euismod nulla.</p> Question <p>Lorem ipsum dolor sit amet. Nulla et euismod nulla.</p> Warning <p>Lorem ipsum dolor sit amet. Nulla et euismod nulla.</p> Failure <p>Lorem ipsum dolor sit amet. Nulla et euismod nulla.</p> Danger <p>Lorem ipsum dolor sit amet. Nulla et euismod nulla.</p> Bug <p>Lorem ipsum dolor sit amet. Nulla et euismod nulla.</p> Example <p>Lorem ipsum dolor sit amet. Nulla et euismod nulla.</p> Quote <p>Lorem ipsum dolor sit amet. Nulla et euismod nulla.</p> <p>Custom admonition</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"home/docs-template/#admonitions-inline","title":"Admonitions (inline)","text":"inline callout ()inline callout () <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, nulla et euismod nulla. Lorem ipsum dolor sit amet, nulla et euismod.</p> <p><pre><code>!!! tip inline end \"Lorem ipsum\"\n\n    Lorem ipsum dolor sit amet, nulla et euismod nulla...\n</code></pre> Use <code>inline end</code> to align to the right (for LTR languages).</p> <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, nulla et euismod nulla. Lorem ipsum dolor sit amet, nulla et euismod.</p> <p><pre><code>!!! tip inline \"Lorem ipsum\"\n\n    Lorem ipsum dolor sit amet, nulla et euismod nulla...\n</code></pre> Use <code>inline</code> to align to the left (for RTL languages only).</p> <p>Important: admonitions that use the <code>inline</code> modifiers must be declared prior to the content block you want to place them beside. If there's insufficient space to render the admonition next to the block, the admonition will stretch to the full width of the viewport, e.g., on mobile viewports.</p>"},{"location":"home/docs-template/#flowcharts","title":"Flowcharts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre>"},{"location":"home/docs-template/#sequence-diagrams","title":"Sequence Diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"},{"location":"home/docs-template/#more","title":"More","text":"<pre><code>theme:\n  palette: # (1)!\n\n    # Palette toggle for light mode\n    - scheme: default\n      toggle:\n        icon: material/brightness-7 # (2)!\n        name: Switch to dark mode\n\n    # Palette toggle for dark mode\n    - scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n</code></pre> <ol> <li> <p>Note that the <code>theme.palette</code> setting is now defined as a list.</p> </li> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <p>This configuration will render a color palette toggle next to the search bar. Note that you can also define separate settings for <code>primary</code> and <code>accent</code> per color palette.</p> <p>The following properties must be set for each toggle:</p> <p>  This property must point to a valid icon path referencing any icon bundled with the theme, or the build will not succeed. Some popular combinations:</p> <ul> <li> +  \u2013 <code>material/brightness-7</code> + <code>material/brightness-4</code></li> <li> +  \u2013 <code>material/toggle-switch</code> + <code>material/toggle-switch-off-outline</code></li> <li> +  \u2013 <code>material/weather-night</code> + <code>material/weather-sunny</code></li> <li> +  \u2013 <code>material/eye</code> + <code>material/eye-outline</code></li> <li> +  \u2013 <code>material/lightbulb</code> + <code>material/lightbulb-outline</code></li> </ul> <p>  This property is used as the toggle's <code>title</code> attribute and should be set to a discernable name to improve accessibility. It's rendered as a tooltip.</p> <p>you're  YouTube</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root {\n  --md-primary-fg-color:        #EE0F0F;\n  --md-primary-fg-color--light: #ECB7B7;\n  --md-primary-fg-color--dark:  #90030C;\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre> <p>you can add an additional style sheet and tweak the values</p>"},{"location":"home/docs-template/#version","title":"\u2013 Version","text":""},{"location":"home/docs-template/#version-insiders","title":"\u2013 Version (Insiders)","text":""},{"location":"home/docs-template/#default","title":"\u2013 Default value","text":"How to add plugins to the Docker image? <p>Material for MkDocs only bundles selected plugins in order to keep the size of the official image small. If the plugin you want to use is not included, you can add them easily:</p> Material for MkDocsInsiders <p>Create a <code>Dockerfile</code> and extend the official image:</p> Dockerfile<pre><code>FROM squidfunk/mkdocs-material\nRUN pip install mkdocs-macros-plugin\nRUN pip install mkdocs-glightbox\n</code></pre> <p>Clone or fork the Insiders repository, and create a file called <code>user-requirements.txt</code> in the root of the repository. Then, add the plugins that should be installed to the file, e.g.:</p> user-requirements.txt<pre><code>mkdocs-macros-plugin\nmkdocs-glightbox\n</code></pre> <p>This is one<sup>1</sup> and this is two<sup>2</sup>.</p> <p>no copy code <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre></p> Recommended: [configuration validation and auto-complete] <p>In order to minimize friction and maximize productivity</p> <ul> <li> <p> Blog</p> <p>Create a blog</p> </li> <li> <p> Social cards</p> <p>Create documentation with social cards</p> </li> </ul> <pre><code>mkdocs serve # (1)!\n</code></pre> <ol> <li>If you have a large documentation project, it might take minutes until     MkDocs has rebuilt all pages for you to preview.</li> </ol> <ul> <li> Azure</li> <li> Cloudflare Pages</li> <li> DigitalOcean</li> <li> Fly.io</li> <li> Netlify</li> <li> Vercel</li> <li> Codeberg Pages</li> <li> Scaleway</li> </ul>"},{"location":"home/docs-template/#overriding-blocks","title":"Overriding blocks recommended","text":"Browser Version Release date Usage desktop mobile overall  Chrome 49+ 03/2016 25.65% 38.33% 63.98%  Safari 10+ 09/2016 4.63% 14.96% 19.59%  Edge 79+ 01/2020 3.95% n/a 3.95%  Firefox 53+ 04/2017 3.40% .30% 3.70%  Opera 36+ 03/2016 1.44% .01% 1.45% 92.67% <p>Browser support matrix sourced from [caniuse.com].<sup>1</sup></p> <ul> <li>Basics (20 min)    covers the basics of setting up a blog, including post metadata.</li> <li>Navigation, pagination, multiple authors (30 min)   describes how to make it easier for your readers to find content.</li> <li>Engagement and dissemination (30 min)   walks you through ways of increasing engagement with your content.</li> </ul> <p> Template Repository</p> <pre><code>@@ -41,21 +40,10 @@\n   {% endif %}\n   &lt;div class=\"md-footer-meta md-typeset\"&gt;\n     &lt;div class=\"md-footer-meta__inner md-grid\"&gt;\n-      &lt;div class=\"md-footer-copyright\"&gt;\n-        {% if config.copyright %}\n-          &lt;div class=\"md-footer-copyright__highlight\"&gt;\n-            {{ config.copyright }}\n-          &lt;/div&gt;\n-        {% endif %}\n-        {% if not config.extra.generator == false %}\n-          Made with\n-          &lt;a href=\"https://squidfunk.github.io/mkdocs-material/\" target=\"_blank\" rel=\"noopener\"&gt;\n-            Material for MkDocs\n-          &lt;/a&gt;\n-        {% endif %}\n-        {{ extracopyright }}\n-      &lt;/div&gt;\n-      {% include \"partials/social.html\" %}\n+      {% include \"partials/copyright.html\" %}\n+      {% if config.extra.social %}\n+        {% include \"partials/social.html\" %}\n+      {% endif %}\n     &lt;/div&gt;\n   &lt;/div&gt;\n &lt;/footer&gt;\n</code></pre> <ul> <li> Language \u2013 Choose out of the 60+ supported languages or add a new one</li> <li> Navigation \u2013 Create a clear, concise, and comprehensive navigation structure</li> <li> Header \u2013 Customize the behavior of the header, add an announcement bar</li> <li> Footer \u2013 Add links to your social media profiles or websites in the footer</li> <li> Search \u2013 Set up and configure search, running entirely in the user's browser</li> <li> Tags \u2013 Categorize your pages with tags and group related pages</li> </ul> <code>default</code> <code>slate</code> <p>Use this button to turn on the waifu2x extension.</p>"},{"location":"home/docs-template/#references","title":"References","text":"<ul> <li>mkdocs</li> <li>mkdocs-material</li> <li>https://github.com/mkdocs/catalog</li> <li>https://github.com/pawamoy/markdown-exec</li> </ul> <ol> <li> <p>In 2016, Material for MkDocs started out as a simple theme for MkDocs, but over the course of several years, it's now much more than that \u2013 with the many built-in plugins, settings, and countless customization abilities, Material for MkDocs is now one of the simplest and most powerful frameworks for creating documentation for your project.\u00a0\u21a9\u21a9</p> </li> <li> <p>Note that improvements of existing features are sometimes released as patch releases, like for example improved rendering of content tabs, as they're not considered to be new features.\u00a0\u21a9</p> </li> </ol>"},{"location":"home/life-a4/","title":"Life on a piece of A4 paper","text":"90/03 90/04 90/05 90/06 90/07 90/08 90/09 90/10 90/11 90/12 91/01 91/02 91/03 91/04 91/05 91/06 91/07 91/08 91/09 91/10 91/11 91/12 92/01 92/02 92/03 92/04 92/05 92/06 92/07 92/08 92/09 92/10 92/11 92/12 93/01 93/02 93/03 93/04 93/05 93/06 93/07 93/08 93/09 93/10 93/11 93/12 94/01 94/02 94/03 94/04 94/05 94/06 94/07 94/08 94/09 94/10 94/11 94/12 95/01 95/02 95/03 95/04 95/05 95/06 95/07 95/08 95/09 95/10 95/11 95/12 96/01 96/02 96/03 96/04 96/05 96/06 96/07 96/08 96/09 96/10 96/11 96/12 97/01 97/02 97/03 97/04 97/05 97/06 97/07 97/08 97/09 97/10 97/11 97/12 98/01 98/02 98/03 98/04 98/05 98/06 98/07 98/08 98/09 98/10 98/11 98/12 99/01 99/02 99/03 99/04 99/05 99/06 99/07 99/08 99/09 99/10 99/11 99/12 00/01 00/02 00/03 00/04 00/05 00/06 00/07 00/08 00/09 00/10 00/11 00/12 01/01 01/02 01/03 01/04 01/05 01/06 01/07 01/08 01/09 01/10 01/11 01/12 02/01 02/02 02/03 02/04 02/05 02/06 02/07 02/08 02/09 02/10 02/11 02/12 03/01 03/02 03/03 03/04 03/05 03/06 03/07 03/08 03/09 03/10 03/11 03/12 04/01 04/02 04/03 04/04 04/05 04/06 04/07 04/08 04/09 04/10 04/11 04/12 05/01 05/02 05/03 05/04 05/05 05/06 05/07 05/08 05/09 05/10 05/11 05/12 06/01 06/02 06/03 06/04 06/05 06/06 06/07 06/08 06/09 06/10 06/11 06/12 07/01 07/02 07/03 07/04 07/05 07/06 07/07 07/08 07/09 07/10 07/11 07/12 08/01 08/02 08/03 08/04 08/05 08/06 08/07 08/08 08/09 08/10 08/11 08/12 09/01 09/02 09/03 09/04 09/05 09/06 09/07 09/08 09/09 09/10 09/11 09/12 10/01 10/02 10/03 10/04 10/05 10/06 10/07 10/08 10/09 10/10 10/11 10/12 11/01 11/02 11/03 11/04 11/05 11/06 11/07 11/08 11/09 11/10 11/11 11/12 12/01 12/02 12/03 12/04 12/05 12/06 12/07 12/08 12/09 12/10 12/11 12/12 13/01 13/02 13/03 13/04 13/05 13/06 13/07 13/08 13/09 13/10 13/11 13/12 14/01 14/02 14/03 14/04 14/05 14/06 14/07 14/08 14/09 14/10 14/11 14/12 15/01 15/02 15/03 15/04 15/05 15/06 15/07 15/08 15/09 15/10 15/11 15/12 16/01 16/02 16/03 16/04 16/05 16/06 16/07 16/08 16/09 16/10 16/11 16/12 17/01 17/02 17/03 17/04 17/05 17/06 17/07 17/08 17/09 17/10 17/11 17/12 18/01 18/02 18/03 18/04 18/05 18/06 18/07 18/08 18/09 18/10 18/11 18/12 19/01 19/02 19/03 19/04 19/05 19/06 19/07 19/08 19/09 19/10 19/11 19/12 20/01 20/02 20/03 20/04 20/05 20/06 20/07 20/08 20/09 20/10 20/11 20/12 21/01 21/02 21/03 21/04 21/05 21/06 21/07 21/08 21/09 21/10 21/11 21/12 22/01 22/02 22/03 22/04 22/05 22/06 22/07 22/08 22/09 22/10 22/11 22/12 23/01 23/02 23/03 23/04 23/05 23/06 23/07 23/08 23/09 23/10 23/11 23/12 24/01 24/02 24/03 24/04 24/05 24/06 24/07 24/08 24/09 24/10 24/11 24/12 25/01 25/02 25/03 25/04 25/05 25/06 25/07 25/08 25/09 25/10 25/11 25/12 26/01 26/02 26/03 26/04 26/05 26/06 26/07 26/08 26/09 26/10 26/11 26/12 27/01 27/02 27/03 27/04 27/05 27/06 27/07 27/08 27/09 27/10 27/11 27/12 28/01 28/02 28/03 28/04 28/05 28/06 28/07 28/08 28/09 28/10 28/11 28/12 29/01 29/02 29/03 29/04 29/05 29/06 29/07 29/08 29/09 29/10 29/11 29/12 30/01 30/02 30/03 30/04 30/05 30/06 30/07 30/08 30/09 30/10 30/11 30/12 31/01 31/02 31/03 31/04 31/05 31/06 31/07 31/08 31/09 31/10 31/11 31/12 32/01 32/02 32/03 32/04 32/05 32/06 32/07 32/08 32/09 32/10 32/11 32/12 33/01 33/02 33/03 33/04 33/05 33/06 33/07 33/08 33/09 33/10 33/11 33/12 34/01 34/02 34/03 34/04 34/05 34/06 34/07 34/08 34/09 34/10 34/11 34/12 35/01 35/02 35/03 35/04 35/05 35/06 35/07 35/08 35/09 35/10 35/11 35/12 36/01 36/02 36/03 36/04 36/05 36/06 36/07 36/08 36/09 36/10 36/11 36/12 37/01 37/02 37/03 37/04 37/05 37/06 37/07 37/08 37/09 37/10 37/11 37/12 38/01 38/02 38/03 38/04 38/05 38/06 38/07 38/08 38/09 38/10 38/11 38/12 39/01 39/02 39/03 39/04 39/05 39/06 39/07 39/08 39/09 39/10 39/11 39/12 40/01 40/02 40/03 40/04 40/05 40/06 40/07 40/08 40/09 40/10 40/11 40/12 41/01 41/02 41/03 41/04 41/05 41/06 41/07 41/08 41/09 41/10 41/11 41/12 42/01 42/02 42/03 42/04 42/05 42/06 42/07 42/08 42/09 42/10 42/11 42/12 43/01 43/02 43/03 43/04 43/05 43/06 43/07 43/08 43/09 43/10 43/11 43/12 44/01 44/02 44/03 44/04 44/05 44/06 44/07 44/08 44/09 44/10 44/11 44/12 45/01 45/02 45/03 45/04 45/05 45/06 45/07 45/08 45/09 45/10 45/11 45/12 46/01 46/02 46/03 46/04 46/05 46/06 46/07 46/08 46/09 46/10 46/11 46/12 47/01 47/02 47/03 47/04 47/05 47/06 47/07 47/08 47/09 47/10 47/11 47/12 48/01 48/02 48/03 48/04 48/05 48/06 48/07 48/08 48/09 48/10 48/11 48/12 49/01 49/02 49/03 49/04 49/05 49/06 49/07 49/08 49/09 49/10 49/11 49/12 50/01 50/02 50/03 50/04 50/05 50/06 50/07 50/08 50/09 50/10 50/11 50/12 51/01 51/02 51/03 51/04 51/05 51/06 51/07 51/08 51/09 51/10 51/11 51/12 52/01 52/02 52/03 52/04 52/05 52/06 52/07 52/08 52/09 52/10 52/11 52/12 53/01 53/02 53/03 53/04 53/05 53/06 53/07 53/08 53/09 53/10 53/11 53/12 54/01 54/02 54/03 54/04 54/05 54/06 54/07 54/08 54/09 54/10 54/11 54/12 55/01 55/02 55/03 55/04 55/05 55/06 55/07 55/08 55/09 55/10 55/11 55/12 56/01 56/02 56/03 56/04 56/05 56/06 56/07 56/08 56/09 56/10 56/11 56/12 57/01 57/02 57/03 57/04 57/05 57/06 57/07 57/08 57/09 57/10 57/11 57/12 58/01 58/02 58/03 58/04 58/05 58/06 58/07 58/08 58/09 58/10 58/11 58/12 59/01 59/02 59/03 59/04 59/05 59/06 59/07 59/08 59/09 59/10 59/11 59/12 60/01 60/02 60/03 60/04 60/05 60/06 60/07 60/08 60/09 60/10 60/11 60/12 61/01 61/02 61/03 61/04 61/05 61/06 61/07 61/08 61/09 61/10 61/11 61/12 62/01 62/02 62/03 62/04 62/05 62/06 62/07 62/08 62/09 62/10 62/11 62/12 63/01 63/02 63/03 63/04 63/05 63/06 63/07 63/08 63/09 63/10 63/11 63/12 64/01 64/02"},{"location":"home/mana-oasis/","title":"Project Mana Oasis","text":""},{"location":"home/mana-oasis/#philosophy","title":"Philosophy","text":"<p>\u4eca\u540e\u6211\u7684\u4e3b\u8981\u65b9\u5411\u548c\u68a6\u60f3\u9879\u76ee\uff0c\u662f\u8bbe\u8ba1\u521b\u9020\u4e0e\u642d\u5efa\u573a\u666f\u4e16\u754c\uff0c\u7528\u60f3\u8c61\u529b\u3001\u6e32\u67d3\u6280\u672f\u548c\u97f3\u4e50\u5177\u73b0\u5316\u8111\u6d77\u4e2d\u7684\u4e16\u754c\u3002\u6e38\u620f\u5f00\u53d1\u6211\u4e5f\u4f1a\u505a\uff0c\u4f46\u53ea\u662f\u4e3a\u4e86\u8f85\u52a9\u573a\u666f\u642d\u5efa\uff0c\u5b9e\u73b0\u4e00\u4e9b\u573a\u666f\u7684\u529f\u80fd\uff0c\u6bd4\u5982\u5199\u4e00\u4e2a\u4f20\u9001\u95e8\u811a\u672c\uff0c\u4f46\u8fd9\u4e0d\u662f\u6211\u7684\u4e3b\u8981focus\u3002\u4e00\u4e2a\u4eba\u4e00\u8f88\u5b50\u7684\u7cbe\u529b\u662f\u6709\u9650\u7684\uff0c\u6211\u4e3b\u8981\u53ea\u505a\u6e32\u67d3\u548c\u7740\u8272\u3001\u5efa\u6a21\u4e0e\u8bbe\u8ba1\u3002</p> <p>\u672a\u6765mana oasis\u7684\u5b9a\u4f4d\u4e8e\u662f\u53d8\u5f97\u5341\u5206\u7b80\u5355\u4e86\uff0c\u5b83\u5c31\u662f\u4e00\u4e2a\u63a2\u7d22\u7c7b\u6e38\u620f\uff0c\u4ee5\u63a2\u7d22\u548c\u611f\u53d7\u4e16\u754c\u4e3a\u4e3b\uff0c\u56e0\u4e3a\u4e3b\u4f53\u662f\u4e00\u4e2a\u6781\u5176\u5e9e\u5927\u7684\u4e16\u754c\u573a\u666f\u3002\u6bcf\u4e2a\u5927\u9646\u6309\u7167\u4e0d\u540c\u573a\u666f\u5212\u5206\u4e3a\u5f88\u591a\u90e8\u5206\uff0c\u7531\u5927\u9646\u4e16\u754c\u5730\u56fe\u8fde\u63a5\u8d77\u6765\uff0c\u573a\u666f\u95f4\u901a\u8fc7\u4ea4\u901a\u5de5\u5177\u8fde\u63a5\u3002\u4e16\u754c\uff0c\u5219\u7531\u8bb8\u591a\u8fd9\u6837\u7684\u5927\u9646\u7ec4\u6210\uff0c\u5927\u9646\u4e4b\u95f4\u6ca1\u6709\u8def\u53ef\u4ee5\u8d70\uff0c\u4e0d\u662f\u901a\u8fc7\u7a7a\u95f4\u8fde\u63a5\u7684\uff0c\u800c\u662f\u901a\u8fc7\u65f6\u7a7a\u4f20\u9001\u95e8\u3002\u53ea\u6709\u5f53\u5728\u4e00\u4e2a\u5927\u9646\u6536\u96c6\u9f50\u4e86\u6240\u6709\u573a\u666f\u7684\u788e\u7247\uff0c\u7ec4\u5408\u51fa\u4e00\u4e2a\u6c34\u6676\u7403\uff08\u6bcf\u4e2a\u5927\u9646\u7684\u4e13\u5c5e\u6c34\u6676\u7403\uff0c\u5982\u7d2b\u6c34\u6676\uff09\uff0c\u624d\u80fd\u5f00\u542f\u4f20\u9001\u95e8\uff0c\u524d\u5f80\u5b83\u6240\u6253\u5f00\u7684\u65b0\u5927\u9646\u3002</p> <p>\u6e38\u620f\u7684\u4e3b\u8981\u5185\u5bb9\uff0c\u662f\u901b\u4e16\u754c\uff0c\u611f\u53f9\u4e16\u754c\u573a\u666f\u7684\u5947\u5999\uff0c\u542c\u97f3\u4e50\u4eab\u53d7\u6c1b\u56f4\u3002\u540c\u65f6\uff0c\u573a\u666f\u4e2d\u85cf\u7740\u8bb8\u591a\u53e4\u4e66\uff0c\u662f\u628a\u4e00\u4e9bPDF\u590d\u523b\u5230\u6e38\u620f\u4e2d\uff0c\u7528\u4e00\u79cd\u72ec\u7279\u7684\u7535\u5b50\u65b9\u5f0f\u5c55\u793a\u51fa\u6765\u7684\u3002\u7b49\u4e8e\u8bf4\uff0c\u6e38\u620f\u672c\u8eab\u662f\u4e00\u4e2a\u5927\u7684\u56fe\u4e66\u9986\uff0c\u53ef\u4ee5\u5728\u6e38\u620f\u4e2d\u542c\u97f3\u4e50\u770b\u4e66\uff0c\u6316\u6398\u6587\u660e\u5b9d\u85cf\u548c\u77e5\u8bc6\u3002</p> <p>\u5728\u6e38\u620f\u4e2d\uff0c\u5355\u7eaf\u7684\u63a2\u7d22\u4e16\u754c\uff0c\u5176\u5b9e\u662f\u4f1a\u5f88\u5feb\u538c\u5026\u7684\uff0c\u56e0\u6b64\u90fd\u662f\u4ee5\u6218\u6597\u5f62\u5f0f\u3001\u73a9\u6cd5\u3001\u5267\u60c5\u7b49\u5176\u4ed6\u4e3b\u8981\u56e0\u7d20\u53bb\u63a8\u52a8\u3002\u5f53\u7136\uff0c\u6211\u4e00\u4e2a\u4eba\u4e0d\u53ef\u80fd\u6709\u65f6\u95f4\u7cbe\u529b\u53bb\u505a\u51fa\u4e00\u90e8\u5b8c\u6574\u76843A\u5927\u4f5c\uff0c\u66f4\u4e0d\u53ef\u80fd\u5199\u4e00\u672c\u5c0f\u8bf4\u3002\u56e0\u6b64\uff0c\u8981\u660e\u786e\uff0c\u6211\u4eec\u7684\u4e3b\u7ebf\u662f\u63a2\u7d22\u901b\u4e16\u754c\uff0c\u800c\u8fd9\u4e2a\u63a2\u7d22\u7684\u6838\u5fc3\u5728\u4e8emeditation\uff0c\u8981\u628a\u4e16\u754c\u505a\u7684\u975e\u5e38\u6709\u610f\u5883\u975e\u5e38\u7cbe\u81f4\u5b8c\u7f8e\uff0c\u8ba9\u4eba\u613f\u610f\u505c\u5728\u4e00\u4e2a\u5730\u65b9\uff0c\u914d\u5408\u4e00\u4e9b\u7b80\u5355\u7684\u6e38\u620f\u5143\u7d20\u548c\u97f3\u4e50\u53bb\u8fdb\u884c\u51a5\u60f3\uff0c\u4ee5\u8fbe\u5230\u7cbe\u795e\u60c5\u611f\u4e0a\u7684\u67d0\u79cd\u6536\u83b7\uff0c\u4ee5\u53ca\u8ba4\u77e5\u4e0a\u7684\u67d0\u79cd\u65b0\u7406\u89e3\u3002\u6211\u4eec\u7684\u6838\u5fc3\u4e0d\u662f\u73a9\u6cd5\uff0c\u4e5f\u4e0d\u662f\u6218\u6597\uff0c\u4e5f\u4e0d\u662f\u6545\u4e8brush\u4e3b\u7ebf\uff0c\u66f4\u4e0d\u662f\u901a\u8fc7\u4efb\u52a1\u8981\u8ba9\u73a9\u5bb6\u53bb\u8d70\u9a6c\u89c2\u82b1\u7684\u5230\u5904\u8dd1\u4e16\u754c\u5730\u56fe\uff0c\u5374\u6ca1\u6709\u5728\u5730\u56fe\u4e0a\u4efb\u4f55\u5730\u65b9\u771f\u6b63\u7684\u9759\u4e0b\u6765\u505c\u7559\uff0c\u800c\u662f\u8981\u4ee5\u73af\u5883\u4e16\u754c\u672c\u8eab\u53bb\u7559\u4f4f\u73a9\u5bb6\uff0c\u5c31\u50cf\u662f\u4e00\u4e2aVRChat\u7684\u6e29\u99a8\u5c0f\u4e16\u754c\u4e00\u6837\uff0c\u6ca1\u4e8b\u5c31\u8fc7\u53bb\u770b\u770b\uff0c\u5728\u67d0\u4e2a\u5c4b\u5b50\u91cc\u5f85\u4e0a\u51e0\u4e2a\u5c0f\u65f6\uff0c\u53ef\u80fd\u662f\u548c\u522b\u4eba\u804a\u5929\uff0c \u4e5f\u53ef\u80fd\u662f\u81ea\u5df1\u505a\u4ec0\u4e48\u4e8b\u60c5\uff0c\u770b\u4e66\u51a5\u60f3\u4e4b\u7c7b\u7684\u3002\u6240\u4ee5\u6211\u4eec\u7684\u6e38\u620f\uff0c\u53ef\u80fd\u66f4\u63a5\u8fd1\u4e8eVRChat\u7684\u611f\u89c9\uff0c\u800c\u4e0d\u662fHogwarts/Lies of P\u8fd9\u6837\u7684RPG\u4f5c\u54c1\uff0c\u6211\u4eec\u7684\u5b97\u65e8\u662f\u6ca1\u6709\u4e3b\u7ebf\u624d\u662f\u6700\u597d\u7684\u4e3b\u7ebf\uff0c\u6bcf\u4e2a\u73a9\u5bb6\u611f\u53d7\u5230\u7684\u4e3b\u7ebf\u5185\u5bb9\u90fd\u5e94\u8be5\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u540c\u4e00\u4e2a\u573a\u666f\uff0c\u5bf9\u4e0d\u540c\u4eba\u4e5f\u5e94\u8be5\u6709\u4e0d\u540c\u7684\u60c5\u611f\u627f\u8f7d\u548c\u610f\u4e49\u3002\u6240\u4ee5\u6700\u7ec8\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u591a\u4e48\u590d\u6742\u7684\u6218\u6597\u7cfb\u7edf\uff0c\u591a\u4e48\u6df1\u5ea6\u7684\u5267\u60c5\u6545\u4e8b\uff0c\u53cd\u800c\u662f\u66f4\u9700\u8981\u4e00\u4e9b\u63d0\u793a\u7c7b\u7684\u7ebf\u7d22\u5185\u5bb9\uff0c\u5404\u79cd\u5730\u4e0a\u7684\u7b14\u8bb0\uff0c\u5899\u4e0a\u7684\u5b57\u4ec0\u4e48\u7684\uff0c\u53c8\u6216\u8005\u662f\u67d0\u4e00\u5e45\u753b\u67d0\u6837\u7269\u54c1\uff0c\u6765\u8ba9\u6bcf\u4e2a\u4eba\u9050\u60f3\u548c\u611f\u53d7\u4ed6\u4eec\u6240\u80fd\u60f3\u5230\u7684\u4e1c\u897f\u3002</p> <p>\u672c\u5730Mana-Oasis/Reference\u6587\u4ef6\u5939\u4e0b\u9762\u7684\u6240\u6709</p> <p>\u4e3b\u57ce\u53ca\u5bb6\u65cf\u540d\u4e3aAmethestia \u827e\u7c73\u5e0c\u65af\u63d0\u4e9a \u7d2b\u6c34\u6676\u4e4b\u6cea</p> <p>\u65cb\u8f6c\u6728\u9a6c \u6469\u5929\u8f6e \u767d\u6c99\u6ee9 \u8ff7\u5bab\u5bab\u6bbf \u7ea2\u5730\u6bef \u53e4\u5178\u65cb\u8f6c\u697c\u68af \u5bb4\u4f1a\u5927\u5385 \u5927\u578b\u7a7a\u8361\u97f3\u4e50\u6f14\u594f\u5385 \u9b54\u6cd5\u5927\u95e8 \u4e16\u754c\u6811 \u6c34\u679c\u4e50\u56ed \u751c\u70b9\u5929\u5802 \u65f6\u5149\u5012\u6d41\u56de\u5eca \u70db\u5149\u9910\u5385 \u4e1c\u65b9\u795e\u6bbf \u5973\u795e\u50cf\u5723\u5730 \u5929\u7a7a\u4e4b\u57ce \u901a\u5929\u5854 \u73a9\u5177\u4e16\u754c \u5f69\u8679\u6751 \u80fd\u91cf\u5708 \u4f20\u9001\u95e8 \u65f6\u949f\u697c \u6df1\u6d77\u795e\u6bbf \u9ec4\u91d1\u5e9f\u589f \u9b54\u6cd5\u6811\u6797 \u53e4\u4ee3\u9057\u8ff9 \u661f\u5149\u5b87\u5b99 \u94f6\u6cb3\u697c\u68af \u53e4\u4e66\u5e93 \u5b9d\u77f3\u8d70\u5eca \u7c89\u5899\u767d\u5e55\u5e03\u5c11\u5973\u5367\u5ba4 \u98ce\u94c3\u897f\u74dc\u51b0\u9547\u996e\u6599\u6d77\u8fb9\u5496\u5561\u5385</p> <p>\u6240\u6709\u7cbe\u7f8e\u53ef\u7231\u7684\u4e8c\u6b21\u5143\u4eba\u7269\u624b\u529e\uff0c\u4e70\u539f\u4f5c\u76843D\u6a21\u578b\u6587\u4ef6\uff0c\u9759\u6001\u7684\u5373\u53ef\uff0c\u5bfc\u5165\u5230\u6e38\u620f\u91cc\u6536\u85cf\u5c55\u793a\u3002\u5f88\u53ef\u80fd\u4e70\u4e0d\u5230\u6e90\u6587\u4ef6\u7684\u7248\u6743\uff0c\u90a3\u5c31\u81ea\u5df13D\u626b\u63cf\uff0c\u518d\u5bfc\u5165\u5230blender\u91cc\u624b\u5de5\u964d\u566a\uff0c\u4fee\u6574\u597d\u4e86\u518d\u5bfc\u5165\u6e38\u620f\u3002\u5c3d\u91cf\u53c2\u8003\u4e09\u6b21\u5143\u7684\u624b\u529e\uff0c\u505a\u81ea\u5df1\u539f\u521b\u76843D\u6a21\u578b\uff0c\u9759\u6001\u6a21\u578b\u53ea\u6709\u4e00\u4e2apose\uff0c\u4f1a\u6bd4\u505aanimation\u7684keyframe\u7b80\u5355\u5f88\u591a\u3002</p> <p>anime-style\u590f\u65e5\u6c99\u6ee9+\u78a7\u84dd\u7684\u6d77+\u767d\u4e91</p> <p>\u5404\u79cdgalgame\u7684\u7cbe\u7f8eCG \u573a\u666fCG</p> <p>pink home</p> <p>\u5723\u9b54\u4e4b\u8840\u7684\u90a3\u4e2a\u753b\u9762</p> <p>niccori\u9b54\u6cd5\u4f7f\u7684\u5496\u5561\u5385\uff0c\u5de7\u514b\u529b\uff0c\u751c\u70b9</p> <p>\u53ef\u5851\u6027\u8bb0\u5fc6\u7684\u591c\u665a\u6e38\u4e50\u56ed</p> <p>kamakura</p> <p>\u9053\u8def\u7d20\u6750\uff0c\u505a\u6210ground layer</p> <p>\u6c34\u4f53\u548cVFX\u53c2\u8003 FluidNinja LIVE</p> <p>\u4e16\u754c\u4e03\u5927\u5947\u8ff9 \u5b87\u5b99\u5947\u89c2 \u5404\u79cd\u81ea\u7136\u5947\u89c2\uff08\u53cc\u5f69\u8679\uff0c\u6781\u5149\uff0c\u6d77\u5e02\u8703\u697c\uff0cmorning glory\u4e91\u5f69\uff0c\u706b\u7130\u9f99\u5377\u98ce\uff0c\u8d85\u5927\u7684\u661f\u7403\u6708\u4eae\u7b49\u7b49\uff09</p> <p>glacier crevasse\uff0c\u84dd\u6d1e</p> <p>\u63a8\u7279\u4e0a\u90a3\u4e2aanimetic\u7167\u7247\u7684\u6444\u5f71\u5e08\u7684\u4f5c\u54c1\uff0ckagaya\u7684\u4f5c\u54c1</p> <p>\u5927\u91cf\u6536\u96c6pixiv\u4e0a\u7684\u56fe\u56fe\uff0c\u4ed8\u8d39\u4e0b\u8f7d\u4e00\u4e9b\u753b\u5e08\u7684\u4f5c\u54c1\uff0c\u51c6\u5907\u653e\u5728\u6e38\u620f\u7684\u827a\u672f\u5c55\u89c8\u9986\u91cc\uff0c\u7528stream\u6d41\u8bfb\u53d6</p> <p>UFO\u98de\u789f\uff0c\u4e09\u4e2a\u7528parent-child\u5173\u7cfb\u60ac\u7a7a\u8fde\u5728\u4e00\u8d77\uff0c\u6709\u7ea2\u8272\u7684\u706f\u95ea\u5149\u4eae\u7740\u548c\u98de\u673a\u4e00\u6837\uff0c\u98de\u789f\u6709\u81ea\u5df1\u7684\u91cd\u529b\u573a\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u91cd\u529b\u7403\uff0c\u9760\u8fd1\u4e00\u5b9a\u8ddd\u79bb\u540e\u73a9\u5bb6\u5c31\u4e0d\u53d7\u5730\u9762\u91cd\u529b\u63a7\u5236\u4e86\u3002\u4e09\u4e2a\u98de\u789f\u53ea\u6709\u4e2d\u95f4\u90a3\u4e2a\u662f\u4e3b\u98de\u789f\uff0c\u7528\u6765\u8f7d\u5ba2\u7684\uff0c\u4e24\u8fb9\u7684\u4e24\u4e2a\u98de\u789f\u4e0e\u4e4b\u6210\u4e00\u5b9a\u89d2\u5ea6\u65cb\u8f6c\uff08\u50cf\u76d8\u5b50\u5728\u684c\u5b50\u4e0a\u6253\u5708\u4e00\u6837\uff09\uff0c\u4ece\u800c\u4ea7\u751f\u78c1\u573a\u63d0\u4f9b\u52a8\u529b\u3002</p> <p>\u6e56\u8fb9\u7684\u5f88\u957f\u7684\u8fde\u6392\u7684\u6728\u5236\u6808\u9053\uff0c\u50cf\u662f\u6728\u5934\u7248\u672c\u7684\u5916\u6ee9\u4e00\u6837\uff0c\u6bcf\u9694\u4e00\u6bb5\u8ddd\u79bb\u62a4\u680f\u4e0b\u90fd\u6709\u5730\u9762\u53f0\u706f\uff0c\u8fde\u8d77\u6765\u5f62\u6210\u591c\u666f\u7f8e\u4e3d\u6d6a\u6f2b\u7684\u6e56\u7554\u666f\u8272\u3002</p> <p>\u7f8e\u4e3d\u7684\u57ce\u5e02\u591c\u666f\uff0ctower mansion\uff0c\u96ea\u4e43\u5bb6\u7684\u5185\u5ba4\uff0c\u5168\u753b\u5e45\u900f\u660e\u73bb\u7483\u7a97\uff0cbird view\u4fef\u77b0\u6574\u4e2a\u57ce\u5e02\u706f\u706b\u3002</p> <p>\u628a\u6211\u4f4f\u8fc7\u7684\u6bcf\u4e2a\u623f\u95f4\u6216\u623f\u5b50\u5efa\u6a21\u51fa\u6765\uff0c\u653e\u5728Restopia\u7684\u63a2\u7d22\u5ba4\u91cc\uff0c\u5305\u62ec\u9ad8\u4e2d\u5b66\u6821\u6559\u5ba4\uff0c\u5927\u5b66\u5bdd\u5ba4\u7b49\u7b49\u3002\u73b0\u5728\u7684\u9b41\u5317\u514b\u623f\u95f4\uff0c\u642c\u8d70\u4e4b\u524d\u5efa\u6a21\u51fa\u6765\u3002</p> <p>NameTBD  // \u628a\u6240\u6709\u6536\u85cf\u7684\u53e4\u5178\u97f3\u4e50\uff0c\u8096\u90a6\u83ab\u624e\u7279\u52c3\u62c9\u59c6\u65af\u674e\u65af\u7279\u67f4\u53ef\u592b\u65af\u57fa\u8212\u4f2f\u7279\u95e8\u5fb7\u5c14\u677e\u5fb7\u6c83\u590f\u514b\u5df4\u8d6b\u7b49\u7b49\u5168\u90e8\u653e\u8fdb\u6765\u3002\u505a\u51e0\u4e2a\u5df4\u6d1b\u514b\u5bab\u6bbf\uff0c\u653e\u6ee1\u4ed6\u4eec\u7684\u7167\u7247\u548c\u4f20\u8bb0\u3002</p> <p>Port Lavina  // \u4e13\u95e8\u5b58\u653e\u4e8c\u6b21\u5143\u7f8e\u5973\u68a6\u4e2d\u60c5\u4eba\u5b8c\u7f8e\u5973\u795e\u7684 \u9ad8\u5206\u8fa8\u7387\u56fe\u7247\u5c55\u793a\u7f8e\u672f\u9986 \u662f\u4e00\u5ea7\u5f88\u9ad8\u7684\u706f\u5854 \u5c42\u6570\u5f88\u9ad8 \u9ed1\u96ea\u59ec \u4e9a\u65af\u5a1c Gift\u767d\u4e1d\uff01\u63a8\u7279\u5404\u79cd\u56fe\u3002\u3002\u3002</p> <p>***DJ Master  // \u505a\u4e00\u4e2a\u4e2d\u5c0f\u578b\u7684DJ\u97f3\u4e50\u5385\u7528\u6765\u64ad\u653e\u52a8\u6f2b\u97f3\u4e50\uff0c\u73a9\u5bb6\u53ef\u4ee5\u81ea\u5df1\u5bfc\u5165\u7535\u8111\u672c\u5730\u7684\u97f3\u4e50CD\u542c\uff0c\u53ef\u4f5c\u4e3aKTV\u4f7f\u7528</p> <p>***Octave Land // \u505a\u4e00\u4e2a\u5927\u578b\u7684\u4e13\u4e1a\u97f3\u4e50\u5385\u5927\u5267\u9662\uff0c\u6709\u8d85\u8d5e\u7684\u97f3\u54cd\u914d\u7f6e\u548c\u706f\u5149\u6548\u679c\u548c\u56de\u58f0\uff0c\u4e00\u4e2a\u4eba\u7684\u7a7a\u8361\u5927\u5267\u9662\uff0c\u5e26\u821e\u53f0\u548c\u5e55\u5e03\u548c\u5927\u5c4f\u5e55\u3002</p> <p>\u4ee5\u4e0a\u4e24\u4e2a\u573a\u666f\uff0c\u52a0\u4e0a\u4e00\u4e2a\u5c4f\u5e55\uff0c\u7528\u6765\u5c55\u793a\u97f3\u4e50\u53ef\u89c6\u5316\u6548\u679c\uff0c\u8fd9\u662f\u4e2a\u4eae\u70b9\u529f\u80fd\uff0c\u7c7b\u4f3c\u4e8e\u7f51\u6613\u4e91app\u7684\u53ef\u89c6\u5316\u52a8\u6001\u97f3\u6548\uff0c\u6709\u51e0\u79cd\u4e3b\u9898\u53ef\u4ee5\u9009\uff0c\u989c\u8272\u548c\u7c92\u5b50\u7279\u6548\u5f88\u70ab\u9177\u3002\u5b9e\u73b0\u65b9\u5f0f\u53c2\u8003\u8fd9\u91cc\uff1ahttps://zhuanlan.zhihu.com/p/92971717  \uff08\u4ee3\u7801\u8bfb\u53d6\u97f3\u4e50\u9891\u57df\u7684\u6570\u503c\uff0c\u5199\u5165\u4e00\u5f20256\u50cf\u7d20\u5bbd\u5ea6\u7684\u8d34\u56fe\uff0c\u6700\u540e\u914d\u4e00\u4e2ashader\uff09</p> <p>Restopia\u7684\u5973\u4ec6\u548c\u4eba\u7269\uff0c\u8981\u7528\u6700\u5b8c\u7f8e\u7684\u4e8c\u6b21\u5143\u7f8e\u5973\u6765\u6253\u9020\uff0c\u662f\u5b8c\u7f8e\u7684\u7406\u60f3\u578b\u59b9\u5b50\uff0c\u7f8e\u5982\u5929\u4ed9\u3002lovelive-sunshine\u5496\u5561\u8272\u5934\u53d1+\u84dd\u8272\u77ed\u8896\u886b+\u77ed\u88d9+\u68d5\u8272\u9774\u5b50+\u767d\u4e1d\uff0c\u8fd8\u6709\u6211\u6700\u7231\u7684\u9ed1\u96ea\u59ec\uff0c\u4ee5\u53ca\u6de1\u7c89\u8272\u8fde\u8863\u88d9+\u7c89\u8272\u9ad8\u8ddf\u978b+\u767d\u4e1d\u7684\u827e\u7c73\u5229\u4e9a\u642d\u914d\uff0c\u8fd8\u6709\u90a3\u79cd\u8d85\u8d5e\u7684\u6de1\u7d2b\u8272\u5934\u53d1+\u6de1\u7d2b\u8272\u5b66\u56ed\u5236\u670d\u77ed\u88d9+\u6de1\u7d2b\u8272\u767d\u4e1d\u3002\u90a3\u79cd\u7279\u522b\u7eaf\u767d\u7684\uff0c\u5e76\u4e14\u5728\u51b7\u65e5\u5149\u4e0b\u7565\u6709\u70b9\u504f\u84dd\u548c\u504f\u7d2b\u7684\u767d\u4e1d\u662f\u6700\u7f8e\u7684\u767d\u4e1d\u3002\u53c2\u8003\u56fe\u7247\u6536\u85cf\u3002 \u8865\u5145\uff1a\u54e5\u7279\u5f0f\u7684\u9ed1\u7fbd\u4e9a\u591c\u5b50\uff0c\u54e5\u7279\u5f0f\u8fde\u8863\u88d9+\u53cc\u9a6c\u5c3e+\u7ea2\u8272\u516c\u4e3b\u978b+\u767d\u4e1d\u9ed1\u4e1d\uff0c\u4ee5\u53ca\u6362\u62d6\u978b\u3002</p> <p>=================================================== 2021\u66f4\u65b0\u6e38\u620f\u4e3b\u7ebf\uff1a\u897f\u65b9\u54f2\u5b66\u53f2\uff0c\u5c06\u6e38\u620f\u4e16\u754c\u4f5c\u4e3a\u4e00\u4e2a\u8bb2\u89e3\u54f2\u5b66\u5b66\u8bf4\u7684\u5a92\u4ecb\uff0c\u4ee5\u63a2\u7d22\u548c\u89e3\u8c1c\u7684\u5f62\u5f0f\u5f15\u4eba\u601d\u8003\u3002\u6e38\u620f\u4e3b\u65e8\u662f\u4e3a\u4e86\u8868\u8fbe\u7406\u6027\u4e0e\u611f\u6027\u7684\u4e16\u754c\u89c2\uff0c\u518d\u73b0\u5bf9\u4e16\u754c\u7684\u5404\u79cd\u611f\u53d7\u3002</p> <p>\u6e38\u620f\u4e3b\u7ebf\uff1a\u73a9\u5bb6\u8fdb\u5165\u6e38\u620f\uff0c\u6765\u5230\u4e00\u4e2a\u795e\u79d8\u7684\u4e16\u754c\uff0c\u5145\u6ee1\u4e86mana\uff0c\u67d0\u4e2a\u795e\u79d8\u7684\u4eba\u5728\u4e34\u8d70\u524d\u5c06\u6574\u4e2a\u4e16\u754c\u59d4\u6258\u7ed9\u4e86\u73a9\u5bb6\uff0c\u8fd9\u4e16\u754c\u867d\u7136\u5145\u6ee1\u4e86mana\uff0c\u4f46\u5374\u56e0\u4e3a\u51e0\u5341\u5e74\u524d\u7ecf\u5386\u4e86\u4e00\u573a\u672a\u77e5\u7684\u5de8\u5927\u707e\u96be\uff0c\u5bfc\u81f4\u4e16\u754c\u4e0a\u7684\u539f\u6709\u7684\u4eba\u7c7b\u548c\u53ef\u7231\u7269\u79cd\u90fd\u706d\u7edd\u4e86\uff0c\u53ea\u5269\u4e0b\u975e\u751f\u547d\u975e\u610f\u8bc6\u4f53\uff08\u4e16\u754c\u672c\u8eab\u7684\u5efa\u7b51\u7269\u690d\u7269\u623f\u5b50\u4ec0\u4e48\u7684\uff0c\u4ee5\u53ca\u91ce\u5916\u7684\u602a\u7269\u548c\u9b54\u7269\uff09\u6ca1\u6709\u53d7\u5230\u4e1d\u6beb\u5f71\u54cd\uff08\u53ef\u80fd\u662f\u53d7\u5230\u4e86\u5176\u4ed6\u5b87\u5b99\u7684\u4eba\u7684\u5927\u89c4\u6a21\u751f\u7269\u51c0\u5316\u9b54\u6cd5\uff09\uff0c\u8fd8\u6709Restopia\u7531\u4e8e\u5728\u7ed3\u754c\u7684\u4fdd\u62a4\u4e0b\u6ca1\u6709\u53d7\u5230\u5f71\u54cd\uff0c\u6240\u4ee5\u4f60\u7684\u5973\u4ec6\u4eec\u90fd\u5728\u3002\u4f60\u4f5c\u4e3a\u73a9\u5bb6\uff0c\u8981\u5728\u63a2\u7d22\u8fd9\u4e2a\u4e16\u754c\u7684\u540c\u65f6\uff0c\u5f00\u57a6\u8352\u5730\u5efa\u9020\u57ce\u5e02\uff0c\u5e76\u7528\u7956\u4f20\u7684\u9b54\u6cd5\u5b55\u80b2\u65b0\u7684\u6587\u660e\u548c\u751f\u547d\uff08\u5176\u5b9e\u662fAI\uff09\uff0c\u8fd9\u4e9bAI\u7684\u667a\u529b\u548c\u6210\u957f\u4f1a\u53d7\u5230\u4f60\u7684\u5bf9\u8bdd\u4ee5\u53ca\u9b54\u6cd5\u7684\u5f71\u54cd\uff08\u5b9e\u9645\u4e0a\u540e\u53f0\u53bb\u8c03\u7528siri\u8fd9\u79cd\u673a\u5668\u5b66\u4e60\u7684\u6a21\u578b\u8ba9AI\u5b66\u4f1a\u5bf9\u8bdd\uff09\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u4f60\u7684\u4e3b\u8981\u4efb\u52a1\u662f\u5728\u8fd9\u4e2a\u4e16\u754c\u4e2d\uff0c\u63a2\u7d22\u66fe\u7ecf\u7684\u4eba\u4eec\u6240\u7559\u4e0b\u7684\u4fe1\u606f\uff0c\u5305\u62ec\u524d\u4eba\u4eec\u5bf9\u4e8e\u5e78\u798f\u7684\u65e5\u8bb0\uff0c\u5bf9\u4e8e\u54f2\u5b66\u7684\u611f\u609f\u8bb0\u5f55\uff0c\u53e4\u6587\u4e66\uff0c\u5305\u62ec\u524d\u4eba\u4eec\u5728\u6d88\u5931\u524d\u7559\u4e0b\u7684\u7ebf\u7d22\uff0c\u901a\u8fc7\u8fd9\u4e9b\u7ebf\u7d22\u548c\u53d1\u73b0\uff0c\u53bb\u8fd8\u539f\u548c\u627e\u5230\u8fd9\u4e9b\u751f\u547d\u88ab\u6d88\u706d\u7684\u771f\u76f8\uff0c\u662f\u8c01\u662f\u4ec0\u4e48\u5bfc\u81f4\u4e86\u4ed6\u4eec\u6d88\u5931\uff0c\u4e3a\u4ec0\u4e48\u8981\u505a\u8fd9\u4e48\u6b8b\u5fcd\u7684\u4e8b\uff0c\u4e3a\u4ec0\u4e48Restopia\u6ca1\u6709\u53d7\u5230\u5f71\u54cd\uff0c\u6709\u6ca1\u6709\u5176\u4ed6\u5e78\u5b58\u8005\uff0c\u7a76\u7adf\u662f\u8c01\u59d4\u6258\u7ed9\u4e86\u4f60\u8fd9\u4e2a\u4e16\u754c\uff0c\u4e0a\u4e2a\u4e3b\u4eba\u662f\u8c01\uff08\u5973\u4ec6\u4eec\u5e76\u4e0d\u77e5\u9053\uff09\uff0c\u8fd9\u4e2a\u4e16\u754c\u4ece\u4f55\u800c\u6765\uff0c\u4e16\u754c\u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff0c\u8fd9\u4e2a\u4e16\u754c\u5230\u5e95\u6709\u4ec0\u4e48\u79d8\u5bc6\uff0c\u7531\u6b64\u5c55\u5f00\u4f60\u7684\u63a2\u9669\u548c\u5192\u9669\uff0c\u7531\u6b64\u5c55\u5f00\u8fd9\u4e2a\u5e9e\u5927\u7684\u4e16\u754c\u89c2\u548c\u5404\u79cd\u6545\u4e8b\u7ebf\u3002\u6700\u7ec8\uff0c\u73a9\u5bb6\u53d1\u73b0\u4e86\u771f\u76f8\uff0c\u627e\u5230\u4e86\u6d88\u706d\u8fd9\u4e2a\u5b87\u5b99\u6240\u6709\u751f\u547d\u610f\u8bc6\u4f53\u7684\u771f\u51f6\uff0c\u672c\u60f3\u8981\u524d\u5f80\u90a3\u4e2a\u5b87\u5b99\u53bb\u62a5\u4ec7\uff0c\u4f46\u5374\u9762\u4e34\u7740\u4e00\u4e2a\u4e24\u96be\u6289\u62e9\uff0c\u7531\u4e8e\u76f8\u9694\u51e0\u4e07\u5149\u5e74\uff0c\u4e00\u65e6\u8e0f\u4e0a\u4e86\u5916\u5b87\u5b99\u65c5\u884c\uff0c\u65f6\u95f4\u7684\u6d41\u52a8\u5c31\u4f1a\u52a0\u5feb\uff0c\u5373\u4f7f\u73a9\u5bb6\u62a5\u4e86\u4ec7\u56de\u6765\u4e86\uff0c\u539f\u5148\u7684\u4e16\u754c\u4e5f\u5df2\u7ecf\u8fc7\u4e86\u51e0\u4ebf\u5e74\u65e9\u5c31\u4e0d\u5728\u4e86\uff0c\u5931\u53bb\u7684\u4e1c\u897f\u592a\u591a\u4e86\u4ee3\u4ef7\u592a\u5927\u4e86\uff0c\u800c\u5982\u679c\u73a9\u5bb6\u9009\u62e9\u4e86\u53bb\u62a5\u4ec7\uff0c\u7b49\u89c1\u5230\u771f\u51f6\u7684\u65f6\u5019\uff0c\u5374\u610f\u5916\u4ece\u771f\u51f6\u7684\u53e3\u4e2d\u5f97\u77e5\u4e86\u4e00\u4e2a\u66f4\u60ca\u5929\u7684\u79d8\u5bc6\uff0c\u4e86\u89e3\u4e86\u5b83\u6d88\u706d\u751f\u547d\u4f53\u7684\u521d\u8877\u662f\u597d\u610f\u7684\uff0c\u7136\u540e\u5404\u79cd\u3002\u3002\u3002\u3002</p> <p>\u5f53\u4f60\u62d3\u5c55\u4e86\u6e38\u620f\u5185\u7684\u4e16\u754c\u6587\u660e\uff0c\u5f00\u53d1\u4e86\u65b0\u7684\u57ce\u5e02\u548c\u5730\u56fe\uff0c\u8fd9\u4e9b\u6570\u636e\u4f1a\u4fdd\u5b58\u5728\u73a9\u5bb6\u7684\u7535\u8111\u672c\u5730\u3002\u5728\u767b\u5f55\u7684\u65f6\u5019\uff0c\u73a9\u5bb6\u53ef\u4ee5\u9009\u62e9\u9ed8\u8ba4\u767b\u5f55\u81ea\u5df1\u672c\u673a\u7684\u8fd9\u4e2a\u6e38\u620f\u5b58\u6863\uff0c\u4f46\u4e5f\u53ef\u4ee5\u8f93\u5165\u4e00\u4e2aIP\u5730\u5740\u8fdc\u7a0b\u767b\u5f55\u5230\u670b\u53cb\u7684\u6e38\u620f\u5b58\u6863\u91cc\u9762\u53bb\uff08\u670b\u53cb\u90a3\u8fb9\u5fc5\u987b\u8981\u5148\u767b\u5f55\u624d\u884c\uff09\uff0c\u7136\u540e\u548c\u670b\u53cb\u4e00\u8d77\u63a2\u7d22\u4ed6\u5efa\u9020\u7684\u4e16\u754c\uff0c\u4ed6\u53ef\u80fd\u6709\u66f4\u8c6a\u534e\u7684\u8dd1\u8f66\u4ec0\u4e48\u7684\u3002\u73a9\u5bb6\u4e5f\u53ef\u4ee5\u5728\u767b\u5f55\u754c\u9762\u9009\u62e9\u9080\u8bf7\u670b\u53cb\u8fde\u7ebf\u5230\u81ea\u5df1\u7535\u8111\u672c\u5730\u7684\u5b58\u6863\uff0c\u70b9\u51fb\u9080\u8bf7\u6309\u94ae\u540e\uff0c\u754c\u9762\u4f1a\u751f\u6210\u4e00\u4e2aIP\u5730\u5740\uff0c\u53ea\u8981\u628a\u8fd9\u4e2aIP\u53d1\u7ed9\u670b\u53cb\uff0c\u7b49\u5f85\u670b\u53cb\u8fde\u63a5\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2achat oasis\u7684\u529f\u80fd\u3002</p> <p>\u5173\u4e8esave load\u548clogin logout\u7684\u573a\u666f\uff0c\u505a\u4e00\u4e2a\u72ec\u7acb\u7684\u865a\u65e0\u7a7a\u95f4\uff0c\u7528\u7c7b\u4f3c\u65f6\u7a7a\u5b87\u5b99\u548c\u9ed1\u6d1e\u505askybox\uff0c\u5c31\u662f\u5f88\u5c0f\u7684\u573a\u666f\uff0c\u5165\u53e3\u662f\u4e00\u4e2a\u4f20\u9001\u95e8\uff0c\u901a\u8fc7\u4e00\u5ea7\u67b6\u7a7a\u7684\u6865\u6881\u901a\u5f80\u524d\u65b9\u51e0\u767e\u7c73\u7684\u4e00\u4e2a\u5927\u796d\u575b\uff0c\u796d\u575b\u8981\u505a\u7684\u5927\u4e00\u70b9\u58ee\u89c2\u4e00\u70b9\uff0c\u5dee\u4e0d\u591a\u548c\u7bee\u7403\u573a\u90a3\u4e48\u5927\u3002\u73a9\u5bb6\u5728\u6e38\u620f\u4e2d\u9009\u62e9save\u7684\u65f6\u5019\uff0c\u5c31\u5c06\u73a9\u5bb6\u548c\u753b\u9762\u5207\u6362\u4f20\u9001\u5230\u8be5\u573a\u666f\u7684\u4f20\u9001\u95e8\u5904\uff0c\u7136\u540e\u73a9\u5bb6\u9700\u8981\u8dd1\u5230\u796d\u575b\u7684\u5730\u65b9\u89e6\u53d1\u796d\u575b\u91cc\u7684\u9b54\u6cd5\u7403\uff0c\u9009\u62e9save\u5219\u6e38\u620f\u6570\u636e\u4f1a\u88ab\u4fdd\u5b58\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u4e24\u4e09\u79d2\u65f6\u95f4\uff0c\u8fd9\u671f\u95f4\u5c55\u793a\u9b54\u6cd5\u7403\u7684\u52a8\u753b\u8868\u793a\u6b63\u5728save\uff0csave\u4e4b\u540e\u73a9\u5bb6\u53ef\u4ee5\u8dd1\u56de\u5165\u53e3\u5904\uff0c\u901a\u8fc7\u4f20\u9001\u95e8\u56de\u5230\u4e4b\u524d\u5728\u6e38\u620f\u5185\u7684\u573a\u666f\u548c\u5750\u6807\uff0c\u4e5f\u53ef\u4ee5\u5728\u9b54\u6cd5\u7403\u5904\u9009\u62e9exit\u6e38\u620f\uff0c\u70b9\u4e86exit\u540e\u9b54\u6cd5\u7403\u91ca\u653e\u53e6\u4e00\u4e2a\u6548\u679c\uff0c\u7136\u540e\u9000\u51fa\u6e38\u620f\u3002 \u73a9\u5bb6\u6bcf\u6b21login\u8fdb\u5165\u6e38\u620f\u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u51fa\u73b0\u5728\u796d\u575b\u7684\u5730\u65b9\uff0c\u8fd9\u662f\u8fdb\u5165mana-oasis\u7684\u4e3b\u5165\u53e3\uff0c\u7136\u540e\u4e0d\u80fd\u52a8\uff0c\u5fc5\u987b\u8981\u5728\u9b54\u6cd5\u7403\u91cc\u505a\u4e00\u4e2a\u9009\u62e9\uff0c\u8981\u4e48\u5f00\u59cb\u65b0\u6e38\u620f\uff0c\u8981\u4e48load\u4e4b\u524d\u7684\u67d0\u4e2a\u5b58\u6863\uff0cload\u5f53\u7136\u4e5f\u6709\u4f34\u968f\u7684\u9b54\u6cd5\u7403\u7279\u6548\uff0cload\u4e4b\u540e\u5c31\u53ef\u4ee5\u52a8\u4e86\uff0c\u518d\u8dd1\u5230\u4f20\u9001\u95e8\u8fdb\u5165\u8be5\u5b58\u6863\u3002save load\u5f53\u7136\u662f\u901a\u8fc7\u5e8f\u5217\u5316\u6765\u5b8c\u6210\u7684\uff0c\u5b58\u50a8\u5230\u672c\u5730\u7684\u6570\u636e\u5e93\u6216\u8005\u4e91\u7aef\uff0c\u5b58\u6863\u7684\u4e0a\u9650\u8bbe\u7f6e\u4e3a7\uff0c\u6700\u591a\u53ea\u80fd\u67097\u4efd\u5b58\u6863\u3002 \u5982\u679c\u662fnew game\u7684\u8bdd\uff0c\u901a\u8fc7\u4f20\u9001\u95e8\u8fdb\u5165\u7684\u7b2c\u4e00\u4e2a\u573a\u666f\u5c31\u662fRestopia\uff0c\u521d\u59cb\u5750\u6807\u4e3aRestopia\u7684\u4f20\u9001\u95e8\u3002\u6ce8\u610f\u4f20\u9001\u95e8\u6c38\u8fdc\u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff0cin pair\uff0c\u4e0d\u80fd\u5355\u72ec\u5b58\u5728\u3002Restopia\u662f\u4e00\u5ea7\u6d6e\u6e38\u5c9b\uff0c\u6709\u81ea\u5df1\u7684\u767d\u5929\u9ed1\u591cskybox\uff0c\u5e76\u4e0d\u603b\u662f\u9ed1\u591c\u3002\u53ea\u6709save load\u7684\u865a\u65e0\u7a7a\u95f4\u662f\u6781\u591c\u3002</p> <p>collider\u4f1a\u81ea\u52a8\u5224\u65ad\u78b0\u649e\u800c\u89e6\u53d1\u7269\u7406\uff0c\u56e0\u6b64collider\u65e0\u6cd5\u91cd\u5408\uff0cOnCollisionEnter(), OnCollisionStay(), OnCollisionExit()\u53ef\u4ee5\u5b9e\u73b0\u9664\u4e86\u78b0\u649e\u4ee5\u5916\u7684\u903b\u8f91\uff0c\u4f46\u662f\u78b0\u649e\u7684\u7269\u7406\u6cd5\u5219\u672c\u8eab\u65e0\u6cd5\u907f\u514d\u548c\u53d6\u6d88\uff0c\u65e0\u6cd5\u91cd\u5408\u3002 \u800ctrigger(\u53ebsensor\u66f4\u51c6\u786e)\u53ea\u4f1a\u5728\u68c0\u6d4b\u5230\u78b0\u649e\u65f6\u53d1\u51fa\u4e00\u4e2a\u4fe1\u53f7\uff0c\u9700\u8981\u5f00\u53d1\u8005\u81ea\u5df1\u7528OnTriggerEnter\u53bb\u6355\u6349\u5230\u4fe1\u53f7\u5e76\u505a\u5904\u7406\uff0c\u4e0d\u8fc7\u8fd9\u4e5f\u7ed9\u4e86\u6211\u4eec\u66f4\u5927\u7684\u81ea\u7531\u5ea6\u3002\u6bd4\u5982\u573a\u666f\u91cc\u7684\u623f\u5b50\uff0c\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u8303\u56f4\u7a0d\u5927\u7684trigger\uff0c\u5f53\u73a9\u5bb6\u78b0\u649e\u5230trigger\u540e\uff0c\u5219\u8ba4\u4e3a\u5979\u53ef\u80fd\u4f1a\u8981\u8fdb\u5165\u623f\u5b50\uff0c\u56e0\u6b64\u5c31\u53ef\u4ee5\u9884\u5148load\u623f\u95f4\u5185\u90e8\u7684\u573a\u666f\u4e86\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u505a\u4e00\u4e9b\u7269\u7406\u6cd5\u5219\u505a\u4e0d\u5230\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u7a7f\u900f\u5899\u58c1\u3002OnTriggerEnter(), OnTriggerStay(), OnTriggerExit()</p> <p>\u901a\u5e38\u90fd\u662f\u9009\u62e9\u52a0\u4e00\u4e2a\u521a\u4f53\uff0c\u6765\u81ea\u52a8\u5b9e\u73b0\u7269\u7406\u6cd5\u5219\u3002\u9664\u975e\u4f60\u60f3\u5b8c\u5168\u81ea\u7531\u7684\u81ea\u5df1\u63a7\u5236\u4e00\u4e2a\u7269\u4f53\u7684\u8fd0\u52a8\uff0c\u6216\u662f\u8ba9\u5b83\u8fdd\u53cd\u7269\u7406\u6cd5\u5219\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5c31\u8981\u7528kinematic\u81ea\u5df1\u5904\u7406\u4e86\u3002kinematic\u53ea\u662f\u7528\u6765\u6307\u660ego\u7684\u8fd0\u52a8\u662f\u5426\u53d7physics\u5f15\u64ce\u63a7\u5236\uff0c\u4e0e\u8be5\u7269\u4f53\u5c5e\u4e8e\u54ea\u79cdcollision\u662f\u5b8c\u5168\u4e24\u56de\u4e8b\uff0c\u4e0d\u8981\u6df7\u5728\u4e00\u8d77\u3002\u4e0d\u7ba1\u662f\u4e0d\u662fkinematic\uff0c\u90fd\u6709normal\u548ctrigger\u8fd9\u4e24\u79cdcollision\u6a21\u5f0f\u3002\u6bd4\u8f83\u590d\u6742\u7684\u662f\uff0c\u6211\u4eec\u8981\u641e\u6e05\u695a\u54ea\u4e9b\u573a\u666f\u4e0bcollision\u4f1a\u89e6\u53d1\u4ec0\u4e48\u4e8b\u4ef6\uff0c\u8fd9\u4e2a\u5177\u4f53\u53c2\u8003\u5b98\u65b9\u6587\u6863\u7684collision\u77e9\u9635\uff0c\u4ee5\u53ca\u5728project settings\u7684Collision Matrix config\u4e2d\u8fdb\u884c\u8bbe\u7f6e\u3002</p> <p>\u5bf9\u4e8escene\u7684environment\uff0c\u573a\u666f\u7684\u5730\u5f62\u77f3\u5934\u5efa\u7b51\u7269\u5899\u58c1\u4ec0\u4e48\u7684\uff0c\u786e\u5b9a\u4e0d\u4f1a\u79fb\u52a8\uff1a static\uff0cno rigidbody\uff0c\u4e0d\u89c4\u5219\u8349\u6728\u4ec0\u4e48\u7684\u7528convex mesh collider\u5426\u5219\u7528primitive collider, non-trigger\uff0cnon-kinematic \u7531\u4e8e\u8fd9\u4e9b\u662fstatic collider\uff0c\u6ca1\u6709\u521a\u4f53\uff0c\u6240\u4ee5OnCollisionXXX\u4e0d\u4f1a\u5728\u8fd9\u4e9b\u7269\u4f53\u4e0a\u89e6\u53d1\uff0c\u8981\u4ece\u53e6\u4e00\u65b9collider\uff08\u79fb\u52a8\u7684character\uff09\u5224\u65ad\u3002\u4eceUnity5\u5f00\u59cb\uff0cstatic collider\u5728scene\u4e2d\u79fb\u52a8\u4e5f\u4e0d\u4f1a\u518d\u6709performance\u60e9\u7f5a\u4e86\uff0c\u6240\u4ee5\u52a8\u6001\u7684\u8349\u6728\u4e5f\u53ef\u4ee5\u662fstatic\u7684\u3002</p> <p>\u5bf9\u4e8escene\u7684\u975e\u73af\u5883\u7269\u4f53\uff0c\u53ef\u4ee5\u88ab\u53d7\u529b\u548c\u79fb\u52a8\u7684\uff0c\u6bd4\u5982\u5730\u4e0a\u4e00\u4e2a\u7bb1\u5b50\uff1a \u975estatic\uff0c\u6807\u51c6\u521a\u4f53\uff0c\u6807\u51c6collider\uff08\u975ekinematic\u975etrigger\uff09\uff0c\u5c3d\u91cf\u7528primitive\uff08\u5b9e\u5728\u590d\u6742\u7528convex mesh\uff09\uff0c\u5fc5\u8981\u65f6\u53ef\u4ee5\u6302\u811a\u672c\u5904\u7406OnCollisionXXX\u3002</p> <p>\u5bf9\u4e8e\u95e8\u8fd9\u79cd\uff0c\u5e73\u65f6\u662f\u9759\u6b62\u7684\uff0c\u5fc5\u8981\u65f6\u53c8\u8981\u52a8\u7684\uff1b\u6216\u8005\u662f\u53f0\u706f\u8fd9\u79cd\u6709switch\u5f00\u5173\u7684\u7269\u4f53\uff0c\u5e73\u65f6\u662f\u9759\u6b62\u7684\uff0c\u5fc5\u8981\u65f6\u8981on/off\u7684 \u975estatic\uff0c\u6807\u51c6\u521a\u4f53\uff0cKinematic collider\uff0c\u975etrigger\uff0c\u6302\u811a\u672c\u5904\u7406OnCollisionXXX\u6765\u63a7\u5236\u79fb\u52a8\uff0c\u6216\u8005\u662f\u64ad\u653e\u79fb\u52a8\u7684\u52a8\u753b\uff0c\u6216\u662f\u5f00\u706f\u3002\u53ea\u8981\u811a\u672c\u91cc\u6ca1\u6709\u79fb\u52a8\u8be5\u7269\u4f53\uff0c\u8be5\u7269\u4f53\u5c31\u4f1a\u4fdd\u6301\u9759\u6b62\u3002</p> <p>\u5bf9\u4e8e\u6709\u52a8\u753b\u7684\u9aa8\u9abc\u4eba\u7269\u6216\u602a\u7269\uff0c\u7528compound primitive colliders\uff0c\u5177\u4f53\u7528Ragdoll Wizard\u6765\u751f\u6210\u3002 \u975estatic\uff0c\u4e0d\u540c\u8eab\u4f53\u90e8\u4f4d\u6709\u5355\u72ec\u7684\u521a\u4f53\uff0c\u9ed8\u8ba4\u90fd\u662fKinematic collider\uff08\u4e3a\u4e86\u52a8\u753b\uff09\uff0c\u975etrigger\u3002\u6302\u811a\u672c\u5904\u7406OnCollision\uff0c\u5982\u679c\u662f\u88ab\u8f66\u649e\u98de\u4ec0\u4e48\u7684\uff0c\u8981\u5728\u4ee3\u7801\u91cc\u628aIsKinematic\u8bbe\u6210false\uff0c\u4f7f\u5176\u6210\u4e3a\u4e00\u4e2a\u6b63\u5e38\u7684\u53d7physics\u5f71\u54cd\u7684\u7269\u4f53\uff0c\u843d\u5730\u540e\u518d\u8bbe\u56detrue\uff0c\u5177\u4f53\u5206\u60c5\u51b5\u5904\u7406\u3002 \u8fc7\u7a0b\u53c2\u89c1https://learn.unity.com/tutorial/creating-ragdolls-2019#5e1c555dedbc2a0410472a3b \u4f46\u662f\u95ee\u9898\u662f\uff0ckinematic rigidbody collider\u6ca1\u6709\u529e\u6cd5\u548cstatic collider\u78b0\u649e\uff0c\u6240\u4ee5\u73a9\u5bb6\u53ef\u4ee5\u968f\u610f\u7a7f\u5899\u94bb\u5730\uff0c\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u5728character\u5916\u9762\u518d\u5957\u4e00\u5c42\u6b63\u5e38\u7684\u521a\u4f53collider\uff08capsule\uff09\uff0c\u4e0d\u8fc7\u8981\u4fdd\u8bc1\u73a9\u5bb6\u7684\u8eab\u4f53\u7ec4\u7ec7kinematic collider\u4e0d\u4f1a\u548c\u8fd9\u4e2a\u81ea\u5df1\u7684\u521a\u4f53collider\u78b0\u649e\uff0c\u7b2c\u4e8c\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u5728project settings\u7684physics\u4e2d\u8bbe\u7f6eenable kinematic static pairs\uff0c\u7136\u540e\u5728\u73a9\u5bb6\u7684\u811a\u672c\u91cc\u5904\u7406OnCollisionXXX\uff0c\u518d\u6709\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u975e\u5e38\u590d\u6742\u4e86\uff0c\u6d89\u53ca\u5230\u5177\u4f53\u600e\u4e48\u5b9e\u73b0\u4e00\u4e2a\u66f4\u9ad8\u7ea7\u7684controller\uff0c\u8fd9\u4e2a\u53bb\u53c2\u8003\u5546\u5e97\u7684\u4ed8\u8d39\u7d20\u6750\u7814\u7a76\u3002character controller\u505a\u597d\u4e86\u4ee5\u540e\uff0c\u518d\u52a0\u4e0aroot motion\u548cinverse kinematics\uff0c\u5b8c\u6210\u5230\u4e00\u4e2a\u6d41\u7545\u7684\u7a0b\u5ea6\uff0c\u7136\u540e\u518d\u770b\u4e0b\u5b98\u65b9\u6587\u6863\u5173\u4e8eperformance\u4f18\u5316\u8fd9\u4e00\u5757\uff0c\u4e0d\u8981\u8ba9player\u5360\u636e\u592a\u591a\u5185\u5b58\uff0c\u6700\u540e\u5728\u5546\u5e97\u8d2d\u4e70Dynamic Bone\u63d2\u4ef6\uff0c\u5bf9character\u7684\u670d\u9970\u6302\u4ef6\u548c\u5934\u53d1\u6dfb\u52a0physics\uff0c\u4f7f\u5f97\u5934\u53d1\u4ec0\u4e48\u7684\u80fd\u968f\u7740\u73a9\u5bb6animate\u800c\u5b9e\u65f6\u7684\u903c\u771f\u7684\u52a8\u6001\u6548\u679c\u3002 \u73a9\u5bb6\u7684\u9aa8\u9abc\u52a8\u753b\u6709\u57fa\u672c\u7684\u52a8\u4f5c\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u8981\u8bd5\u56fe\u4ec0\u4e48\u90fd\u6a21\u4eff\u73b0\u5b9e\uff0c\u592a\u590d\u6742\u4e86\uff0c\u6709\u57fa\u672c\u7684\u8d70\u8dd1\u5750\u7ad9\u8eba\u5403\u559d+\u8868\u60c5\u3001\u626d\u5934\u3001\u653b\u51fb\u3001\u9632\u5fa1\u3001\u65bd\u6cd5\u7b49\u52a8\u753b\u5373\u53ef\uff0c\u5176\u4ed6\u624b\u81c2\u548c\u624b\u7684\u52a8\u4f5c\u6bd4\u5982\u73b0\u5b9e\u91cc\u62ff\u4e1c\u897f\u4ec0\u4e48\u7684\u8fd9\u79cd\u4e0d\u8981\u4e00\u4e2a\u4e2a\u505a\uff0c\u592a\u591a\u4e86\uff0c\u53ef\u4ee5\u53ea\u505a\u4e00\u4e2a\u6ed1\u52a8\u548c\u70b9\u51fb\u83dc\u5355\u7684\u52a8\u753b\uff0c\u4f5c\u4e3a\u901a\u7528\u7684\u52a8\u4f5c\uff0c\u7136\u540e\u5462\uff0c\u5177\u4f53\u7684\u662f\u62ff\u4e1c\u897f\u4e5f\u597d\u5207\u83dc\u4e5f\u597d\u62e7\u74f6\u76d6\u4e5f\u597d\u53d1\u52a8\u6c7d\u8f66\u4e5f\u597d\uff0c\u90fd\u7528\u6e38\u620f\u4e2d\u7684\u5168\u606f\u56fe\u50cf\u6295\u5f71\u51fa\u7684UI\u83dc\u5355\u6765\u4ee3\u66ff\uff0cUI\u91cc\u5217\u51fa\u53ef\u64cd\u4f5c\u7684\u52a8\u4f5c\u6309\u94ae\uff0ccharacter\u53ea\u8981\u53bb\u6ed1\u52a8\u548c\u70b9\u51fb\u6309\u94ae\u5373\u53ef\u3002\u6709\u4e2a\u4f8b\u5916\u662f\u5f00\u95e8\u5173\u95e8\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u52a8\u4f5c\u592a\u666e\u904d\u4e86\uff0c\u81ea\u5df1\u505a\u52a8\u753b\uff0c\u4f46\u662f\u7531\u4e8e\u5404\u79cd\u95e8\u628a\u624b\u5f62\u72b6\u90fd\u4e0d\u540c\uff0c\u6240\u4ee5\u6298\u8877\u4e00\u4e0b\u5c31\u505a\u4e2a\u7c7b\u4f3c\u624b\u63a8\u7684\u610f\u5ff5\u65bd\u6cd5\u52a8\u4f5c\u6765\u5f00\u5173\u95e8\u3002 \u53ea\u8981\u5728unity\u7684settings\u4e2d\u8bbe\u7f6e\u597d\u73a9\u5bb6layer\u548c\u5176\u4ed6layer\u7684collision matrix\uff0cKCC\u7684motor\u5c31\u4f1a\u81ea\u52a8\u53bb\u5224\u65ad\u54ea\u4e9blayer\u53ef\u4ee5\u78b0\u649e\uff0c\u4e0d\u7528\u64cd\u5fc3\u3002\u6709\u7279\u6b8a\u60c5\u51b5\u7684collider\u7684\u8bdd\uff0c\u5728playerController\u7684Misc\u4e2d\u8bbe\u7f6eIgnoredColliders\u5c31\u884c\u4e86\u3002\u8bb0\u4f4f\uff0c\u73a9\u5bb6\u7684IgnoredCollider\u548c\u76f8\u673a\u7684IgnoredCollider\u662f\u5206\u5f00\u7684\uff0c\u8981\u5206\u522b\u8bbe\u7f6e\u3002</p> <p>\u4e00\u4e2a\u7075\u6d3b\u7684\u73a9\u5bb6controller\u90fd\u662fkinematic\u7684\uff0c\u8fd9\u6837\u624d\u6709\u66f4\u9ad8\u7684\u81ea\u7531\u5ea6\u80fd\u6e38\u6cf3\u80fd\u722c\u68af\u5b50\uff0c\u4f46\u662fkinematic\u7684\u610f\u601d\u662f\u544a\u8bc9Unity\u4e0d\u8981\u7528PhysX\uff0c\u6240\u6709\u7684\u7269\u7406\u6211\u90fd\u81ea\u5df1\u5904\u7406\uff0c\u54ea\u6015\u73a9\u5bb6\u8d70\u8fdb\u5899\u5185\u4e86\u6211\u5f00\u53d1\u8005\u4e5f\u662f\u77e5\u9053\u7684\uff0c\u6211\u4f1a\u81ea\u5df1\u5904\u7406\u4e0d\u7528\u4f60PhysX\u64cd\u5fc3\uff0c\u8fd9\u4e9b\u9700\u8981\u975e\u5e38\u9ad8\u8d85\u7684\u7f16\u7a0b\u6280\u672f\u3002\u73b0\u9636\u6bb5\u5148\u7528\u4e00\u4e2a\u7b80\u5355\u7684capsule collider\u4ee3\u66ff\u73a9\u5bb6\uff0c\u628a\u4e16\u754c\u67b6\u6784\u642d\u51fa\u6765\uff0c\u540e\u671f\u518d\u5904\u7406character\u3002\u6ce8\u610f\u4e00\u70b9\uff0c\u7531\u4e8e\u73a9\u5bb6character\u672c\u8eab\uff08\u6216\u73a9\u5bb6\u8eab\u4e0a\u7684\u67d0\u4e2achild\u521a\u4f53\uff09\u662f\u8981\u6302\u8f7dFPS\u6216TPS\u76f8\u673a\u7684\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u76f8\u673a\u8ddf\u968f\u7684\u6d41\u7545\uff0c\u73a9\u5bb6\u4eba\u7269\u7684motion\u5fc5\u987b\u8981\u975e\u5e38\u5e73\u6ed1\uff0c\u6240\u4ee5\u8981\u628a\u88ab\u6302\u8f7d\u7684\u521a\u4f53\u7684interpolate\u8bbe\u7f6e\u6253\u5f00\uff0c\u4f7f\u5176\u80fd\u7528\u63d2\u503c\u5e73\u6ed1\u63a8\u65ad\u6bcf\u4e00\u77ac\u95f4\u7684position\uff0c\u5e76\u4e14\u76f8\u673a\u8981\u5728LateUpdate\u4e2d\u66f4\u65b0\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u6709jitter\u5361\u7684\u60c5\u51b5\u4e86\uff0c\u8d77\u7801build\u4e86\u4ee5\u540e\u4e0d\u4f1a\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u76f8\u673a\u5c31\u7528Cinemachine\u5c31\u597d\u4e86\uff08cm\u7684collider extension\uff0c\u628acollide against\u8bbe\u6210environment\u7684layer\uff0c\u5e76\u4e0d\u662f\u4ec0\u4e48\u969c\u788d\u7269\u90fd\u8981forward\u76f8\u673a\u7684\uff0c\u7136\u540eignore player tag\uff09\uff0c\u5bf9\u4e8e\u9a7e\u9a76\u8f66\u8f86\u7684FPS/TPS\uff0c\u8bb0\u5f97\u5728Cinemachine\u91cc\u52a0\u4e0a\u566a\u97f3\u6765\u6a21\u4eff\u8f66\u7684\u5c0f\u98a0\u7c38\uff0c\u8fd8\u8981\u8bb0\u5f97\u53e6\u5916\u52a0\u4e24\u4e2a\u5c0f\u76f8\u673a\uff0c\u4e00\u4e2a\u662f\u5bfc\u822a\u5730\u56feminimap\uff0c\u8fd8\u6709\u4e00\u4e2a\u662f\u53cd\u5411\u7684\u7528\u6765\u6e32\u67d3\u8f66\u8f86\u540e\u89c6\u955c\uff08\u5de6\u53f3\u90fd\u52a0\uff09\uff0c\u5982\u679c\u662f\u884c\u9a76\u4e2d\u78b0\u5230\u969c\u788d\u7269\u6216\u8def\u4e0a\u7684\u51f8\u8d77\uff0c\u8f66\u8f86\u7684\u521a\u4f53\u4f1a\u81ea\u52a8\u89e6\u53d1\u7269\u7406\u78b0\u649e\uff0c\u5bfc\u81f4\u6bd4\u8f83\u5927\u7684\u98a0\u7c38\uff0c\u8fd9\u4e2a\u6548\u679c\u4e0d\u8981\u7528\u566a\u97f3\u505a\uff0c\u800c\u662f\u7528Cinemachine Impulse\u6765\u5b9e\u73b0\uff0c\u5177\u4f53\u53c2\u8003\u6587\u6863\u548cexample\u7684scene\uff0c\u7206\u70b8\u5bfc\u81f4\u76f8\u673ashake\u4e5f\u8fd9\u4e48\u505a\u3002</p> <p>\u5bf9\u4e8e\u9700\u8981\u68c0\u6d4b\u73a9\u5bb6\u662f\u5426\u8fdb\u5165\u8303\u56f4\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u7a7f\u5899\u7684\uff0c\u6bd4\u5982invisible\u7684\u8fb9\u754c\uff0c\u7528static trigger collider\uff0c\u4e0d\u52a0\u521a\u4f53\uff0c\u7528onTriggerEnter\u68c0\u6d4b\u3002</p> <p>collider\u8bbe\u7f6e\u597d\u4e4b\u540e\uff0c\u52a0\u4e0aPhysic Material\u6309\u4e0d\u540c\u7684\u7269\u4f53\u6750\u8d28\u8bbe\u7f6e\uff0c\u540c\u4e00\u4e2a\u521a\u4f53\u53ef\u80fd\u6709\u591a\u4e2acollider\uff0c\u6bcf\u4e2acollider\u53ef\u4ee5\u5355\u72ec\u8bbe\u7f6e\u90a3\u90e8\u5206\u7684physic material\uff0c\u6216\u8005\u76f4\u63a5\u628aPhysic Material\u653e\u5728\u521a\u4f53\u4e0a\uff0c\u90a3\u4e48\u6240\u6709\u7684collider\u90fd\u4f1a\u7528\u540c\u4e00\u4e2aPhysic Material\u3002\u6ce8\u610f\uff0c\u4e24\u4e2ago\u76f8\u649e\u65f6\uff0c\u4e0d\u4e00\u5b9a\u8981\u4e24\u8fb9\u90fd\u52a0\u4e0aPhysic Material\uff0c\u53ea\u6709\u5176\u4e2d\u4e00\u65b9\u6709\u4e5f\u53ef\u4ee5\u7684\uff0c\u6ca1\u52a0\u7684\u90a3\u4e00\u65b9\u76f8\u5f53\u4e8e\u662f\u7528\u7684\u7cfb\u7edf\u9ed8\u8ba4\u7684physic material\uff0c\u4e5f\u5c31\u662f\u5f39\u529b\u4e3a0\uff0c\u6469\u64e6\u529b\u4e3a0.6\u3002\u5982\u679c\u4e0d\u662f\u7279\u6b8a\u7684\u6750\u8d28\u6bd4\u5982\u51b0\u9762\u8fd9\u79cd\uff0c\u4e0d\u7528\u7279\u610f\u53bb\u52a0\uff0c\u51b0\u9762\u6469\u64e6\u529b\u4e3a0\uff0c\u6a61\u80f6\u5f39\u529b\u4e3a1\u6469\u64e6\u529b\u4e3a1\uff0c\u6c34\u4e2d\u7684\u6cb3\u5e8a\u6469\u64e6\u529b\u4e3a1\uff0c\u5176\u4ed6\u7684\u57fa\u672c\u4e0a\u4e0d\u7528\u6539\uff0c\u5f39\u529b\u5f88\u5c11\u4f1a\u7528\u5230\u7684\u3002</p> <p>\u5f53collision\u53d1\u751f\u65f6\uff0c\u5982\u679c\u7269\u4f53\u7684\u79fb\u52a8\u901f\u5ea6\u6781\u5feb\uff0c\u540c\u65f6\u53c8\u662f\u7528PhysX\u5f15\u64ce\u63a7\u5236\u7684\uff08\u975ekinematic\uff09\uff0c\u63a7\u5236\u78b0\u649e\u53cd\u5f39\u7684\u903b\u8f91\u53ef\u80fd\u4f1a\u8ddf\u4e0d\u4e0a\uff0c\u6240\u4ee5\u5f15\u64ce\u7684fixedUpdate\u8fd8\u4f1a\u66f4\u65b0\u51e0\u5e27\uff0c\u4f1a\u5bfc\u81f4\u7269\u4f53\u7684\u4e00\u90e8\u5206\u7a7f\u8fdb\u5899\u5185\uff0c\u8fd9\u65f6\u5019\u8981\u5728rigidbody\u7684constraints\u8bbe\u7f6e\u4e0b\u9762freeze\u6389position\uff08\u5982\u679c\u5e0c\u671b\u7269\u4f53slide\u6ed1\u52a8\u90a3\u4e48rotation\u4e5ffreeze\u6389\uff09\uff0c\u7269\u4f53\u5c31\u7edd\u4e0d\u4f1a\u7a7f\u5899\u4e86\u3002\u53ea\u6709\u5728\u5904\u7406\u7279\u522b\u9ad8\u901f\u7684\u7269\u4f53\u65f6\u624d\u9700\u8981\u8bbe\u7f6e\u8fd9\u4e2a\uff0c\u6bd4\u5982\u8d5b\u8f66\u4ec0\u4e48\u7684\uff0c\u4e00\u822c\u4e0d\u7528\u3002\u800ckinematic\u8fd9\u79cd\u81ea\u5df1\u4ee3\u7801\u63a7\u5236\u7684\u7269\u4f53\uff0c\u4e0e\u6b64\u65e0\u5173\u3002\u6b64\u5916\u8bb0\u4f4f\uff0c\u8fd9\u79cdphysX\u63a7\u5236\u7684\u8fd0\u52a8\uff0c\u53ea\u8981\u662f\u6bcf\u5e27\u66f4\u65b0\u7684\u4e1c\u897f\u90fd\u8981\u5199\u5728fixedUpdate\u65b9\u6cd5\u91cc\uff0c\u6bd4\u5982\u7528Time.deltaTime\u6bcf\u4e00\u7269\u7406\u5e27\u66f4\u65b0\u4f4d\u7f6e\u4ec0\u4e48\u7684\uff08\u5343\u4e07\u522b\u7528Time.fixedDeltaTime\uff0c\u90a3\u662f\u5e38\u6570\u800c\u4e0d\u662fdelta\u65f6\u95f4\uff09\uff0c\u800cUpdate\u65b9\u6cd5\u91cc\u53ea\u7528\u6765\u5224\u65ad\u73a9\u5bb6Input\uff0c\u6839\u636e\u903b\u8f91\u4e00\u6b21\u6027\u5730AddForce\uff0c\u6216\u662f\u8bbe\u7f6e\u4e00\u6b21\u6027\u7684\u521d\u59cb\u901f\u5ea6\u3002\u518d\u6bd4\u5982\uff0c\u63a7\u5236\u7269\u4f53\u5f39\u8df3\uff0c\u5982\u679c\u6536\u5230Input\u7684\u7a7a\u683c\u952e\u4e86\uff0c\u5c31\u5728update\u91cc\u8bbe\u4e00\u4e0bjump\u7684flag\u4e3atrue\uff0c\u4f46\u4e0d\u8981\u53bb\u771f\u7684\u53bb\u8c03\u7528jump\uff0c\u771f\u6b63\u7684jump\u8981\u653e\u5728fixedUpdate\u91cc\u6765\u505a\uff0c\u505a\u4e4b\u524d\u628aflag\u8bbe\u56defalse\u3002 \u4e3a\u4ec0\u4e48\u8981\u7528FixedUpdate\u5462\uff1f\u60f3\u8c61\u4e00\u4e0b\uff0c\u5982\u679cFPS\u5f88\u4f4e\uff0cUpdate\u66f4\u65b0\u7684\u5f88\u6162\uff0c\u4e00\u4e2a\u521a\u4f53\u7684\u79fb\u52a8\u8981\u662f\u5728update\u91cc\u66f4\u65b0\uff0c\u81ea\u7136\u4e5f\u4f1a\u968f\u4e4b\u53d8\u6162\uff0c\u4e0d\u7b26\u5408realistic\u7684\u7269\u7406\u6cd5\u5219\uff0c\u800cfixedUpdate\u6bcf0.02\u79d2\u8dd1\u4e00\u6b21\uff0c\u65e0\u89c6\u6e38\u620f\u7684FPS\uff0c\u8fd9\u6837\u7269\u4f53\u8fd0\u52a8\u624d\u66f4\u5408\u7406\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8eupdate\u5f88\u6162\uff0cupdate\u66f4\u65b0\u4e00\u6b21\u65f6\uff0cfixedUpdate\u5df2\u7ecf\u66f4\u65b0\u5f88\u591a\u6b21\u4e86\uff0c\u800c\u6bcf\u4e2aframe\u662f\u8ddf\u7740\u6bcf\u4e2aupdate\u8fdb\u884crender\u7684\uff0c\u6240\u4ee5update\u6e32\u67d3\u7684\u53ea\u4f1a\u662f\u7ecf\u8fc7\u591a\u6b21fixedUpdate\u540e\u7684\u90a3\u4e2a\u6700\u7ec8\u7ed3\u679c\u3002\u4f46\u662f\u5982\u679cupdate\u548cfixedUpdate\u901f\u5ea6\u5dee\u592a\u591a\uff0c\u6bcf\u6b21render\u7684\u65f6\u5019fixedupdate\u90fd\u5df2\u7ecf\u66f4\u65b0\u4e86\u5f88\u591a\u6b21\uff0c\u7269\u4f53\u79fb\u52a8\u4e86\u5f88\u8fdc\u7684\u8ddd\u79bb\uff0c\u5728\u6e32\u67d3\u65f6\u5c31\u4f1a\u611f\u89c9\u7269\u4f53\u6bcf\u5e27\u662f\u5728\u77ac\u95f4\u79fb\u52a8\uff0c\u5c31\u548c\u7f51\u7edclag\u7684\u65f6\u5019\u753b\u9762\u5361\u4e00\u6837\uff0c\u8fd9\u65f6\u5c31\u5fc5\u987b\u8981\u4f18\u5316FPS\uff0c\u5982\u679c\u4e0d\u662fFPS\u7684\u95ee\u9898\u800c\u662f\u7269\u4f53\u672c\u8eab\u5c31\u662f\u79fb\u52a8\u592a\u5feb\u4e86\uff08\u6216\u8005\u4f60\u4e3a\u4e86\u7cbe\u51c6\u7269\u7406\u800c\u624b\u52a8\u628aTime.fixedDeltaTime\u8bbe\u7f6e\u7684\u7279\u522b\u5c0f\uff09\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff0c\u7b80\u5355\uff0c\u5728rigidbody\u4e0b\u9762\u627e\u5230Interpolate\u7684\u8bbe\u7f6e\u5e76\u9009\u4e0ainterpolate\uff08\u4e00\u822c\u4e0d\u7528extrapolate\u9009\u9879\uff0c\u90a3\u4e2a\u662f\u7528\u6765\u731c\u6d4b\u7269\u4f53\u79fb\u52a8\u4f4d\u7f6e\u7684\uff0c\u53ea\u6709\u5f53\u7269\u4f53\u56fa\u5b9a\u65b9\u5411\u5300\u901f\u7a33\u5b9a\u8fd0\u52a8\u65f6\u624d\u4f1a\u7528\uff09\uff0c\u8ba9physX\u81ea\u52a8\u7684\u7ebf\u6027\u63d2\u503c\u5e73\u6ed1\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u65f6\u4f60\u5728\u753b\u9762\u4e0a\u770b\u5230\u7684\u7269\u4f53\u7684\u79fb\u52a8\u66f4\u65b0\u5b9e\u9645\u4e0a\u662f\u6bd4\u771f\u5b9e\u7684physX\u66f4\u65b0\u8981\u6ede\u540e\u7684\u3002</p> <p>\u68c0\u6d4bcollision\u6700\u6709\u6548\u7684\u529e\u6cd5\u662f\uff0c\u5bf9\u4e0d\u540c\u7684\u7269\u4f53\u8fdb\u884c\u5f52\u7c7b\u5e76\u6807\u6ce8\u81ea\u5b9a\u4e49\u7684layer\uff0c\u5e76\u5728\u9879\u76ee\u4e2d\u8bbe\u7f6e\u597d\u54ea\u4e9blayer\u4e4b\u95f4\u9700\u8981\u68c0\u6d4b\u78b0\u649e\u3002\u7528layer\u7684\u597d\u5904\u662funity\u4f1a\u81ea\u52a8\u8fc7\u6ee4\u6389\u4e0d\u76f8\u5173layer\u7684go\uff0c\u5927\u5e45\u5ea6\u63d0\u9ad8\u6027\u80fd\u3002\u8fd9\u6bd4\u8d77\u901a\u8fc7go\u7684tag\u6765\u68c0\u6d4b\u8981\u5feb\u597d\u51e0\u500d\uff0c\u56e0\u4e3atag\u662f\u9700\u8981\u505a\u5b57\u7b26\u4e32\u6bd4\u8f83\u6765\u5224\u65ad\u7684\u3002 \u53e6\u4e00\u4e2a\u4f18\u5316\u662f\uff0c\u4fdd\u8bc1collider\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u901a\u5e38\u662f\u628achildren\u4e0a\u7684primitive\u7ec4\u5408\u8d77\u6765\u6210\u4e3acompound collider\uff0c\u54ea\u6015\u5b9e\u5728\u8981\u7528mesh collider\u4e5f\u8981\u8bbe\u7f6e\u6210convex\u3002\u8981\u77e5\u9053\uff0cRaycasting against a mesh collider is really expensive. \u5728\u4f7f\u7528raycast\u68c0\u6d4b\u78b0\u649e\u65f6\uff0c\u63d0\u524d\u89c4\u5b9a\u597d\u5c04\u7a0b\uff0c\u4e0d\u8981\u7528mathf.Infinity\uff0c\u5e76\u4e14\uff0cBe specific on what the ray should hit and always try to specify a layer mask on the raycast function.</p> <p>Non-kinematic rigid bodies will ignore the hierarchy. If you make one rigid body a child of another and translate the parent. Then the child will NOT move with the parent. The child\u2019s transform will update so that it remains in place in world space. If you want to couple rigid bodies you need to use joints.</p> <p>Shirley\u73b0\u5728\u6ca1\u6cd5\u6362\u88c5\uff0c\u5979\u7684\u88d9\u5b50\u662f\u653e\u5728mesh\u91cc\u9762\u7684\uff0c\u7528\u4e0d\u4e86VRoidHub\u7684\u7d20\u6750\uff0c\u53ea\u80fd\u7b49\u4ee5\u540e\u5b66\u4e86Blender\u518d\u7528blender\u4fee\u6539\u3002 \u6240\u4ee5\uff0cShirley\u5148\u4f5c\u4e3a\u6682\u65f6\u7684\u4e3b\u89d2\u3002\u540e\u671f\u7684\u65f6\u5019\uff0c\u8fd8\u662f\u81ea\u5df1\u7528VRoidStudio\u505a\u4e00\u4e2a\u4e3b\u89d2\uff0c\u914d\u7f6e\u5404\u79cdHub\u4e0a\u7684\u7d20\u6750\u8863\u670d\u889c\u5b50\u4e4b\u7c7b\u7684\uff0c\u5934\u53d1\u96be\u4e0d\u8981\u7d27\uff0c\u76f4\u63a5\u7528Hub\u73b0\u6210\u7684\u6536\u8d39\u7d20\u6750\u3002\u96be\u70b9\u5728\u4e8eVRoidStudio\u4e0d\u77e5\u9053\u600e\u4e48\u505ashader\uff0c\u53ef\u80fd\u9700\u8981\u5bfc\u5165blender\u6216unity\u518d\u505ashader\u3002\u5230\u4e86\u540e\u671f\uff0cShirley\u5c31\u53ea\u5f53\u4f5cRestopia\u7684\u5973\u4ec6\u6765\u7528\uff0c\u53ef\u4ee5\u505a\u5973\u4ec6\u957f\u3002\u5979\u7684\u52a8\u753b\u4fdd\u6301\u7b80\u6d01\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>Mark and highlight the whole Unity Manual = twice! twice!</p> <p>overview and skim all scripts in the Unitywiki scripts section, also highlight</p> <p>\u6574\u7406github utilities\u7684library</p> <p>\u76ee\u524d\u9636\u6bb5\u8fd8\u5728\u63a2\u7d22\uff0c\u5148\u7528DRP\u5b8c\u6210\u4e00\u5207\u96cf\u5f62\uff0c\u57fa\u672c\u6210\u578b\u4e86\u4ee5\u540e\uff0c\u518d\u628a\u9879\u76ee\u5347\u7ea7\u4e3aHDRP\uff0c\u53c2\u8003\u5b98\u65b9upgrade\u6307\u5357\u3002\u753b\u8d28\u548c\u7d20\u6750\u8c03\u4f18\u4ec0\u4e48\u7684\uff0c\u540e\u671f\u7edf\u4e00\u505a\uff0c\u73b0\u5728\u5148focus\u5728Unity\u5f00\u53d1\u672c\u8eab\u4e0a\u4ee5\u53ca\u5199\u811a\u672c\u4e0a\u3002</p> <p>\u6e38\u620f\u5185\u505a\u4e00\u4e2a\u952e\u76d8\u81ea\u5b9a\u4e49\u7684\u529f\u80fd\uff0c\u73a9\u5bb6\u53ef\u4ee5\u81ea\u884c\u66f4\u6539\u67d0\u4e9b\u529f\u80fd\u7684hotkey\uff0c\u753b\u4e00\u4e2a\u6a21\u62df\u7684\u952e\u76d8\uff0c\u73a9\u5bb6\u53ef\u4ee5\u62d6\u52a8\u4e0d\u540c\u7684\u952e\u3002 \u52b2\u4e50\u56e2\uff01\uff01\uff01\uff01\uff01\uff01\u5728\u6e38\u620f\u5185\u505a\u4e00\u4e2a\u52b2\u4e50\u56e2\u51fa\u6765\uff01\uff01\uff01\uff01\u4e03\u4e2a\u6309\u952e\u7684\uff01\uff01\uff013D\u7248\u672c\u7684\uff01\uff01\uff01\u5355\u72ec\u505a\u4e2a\u573a\u666f\u52a0\u8f7d\uff0c\u4e3a\u4e86\u952e\u76d8\u53cd\u5e94\u7684\u6027\u80fd\u3002</p> <p>\u52a0\u4e00\u4e2a\u5b58\u6863\u70b9savepoint\u7684\u529f\u80fd\uff0c\u4f46\u662f\u4e0d\u540c\u4e8e\u5355\u673a\u6e38\u620f\u7684\u5b58\u6863\u529f\u80fd\uff08\u56e0\u4e3amana\u65f6\u95f4\u662f\u4e0e\u73b0\u5b9e\u540c\u6b65\u7684\uff09\u3002savepoint\u662f\u4e00\u4e2a\u623f\u95f4\u6216\u4f20\u9001\u95e8\uff0c\u53ef\u4ee5\u8ba9\u73a9\u5bb6\u4f20\u9001\u5230\u8fc7\u53bb\u7684\u67d0\u4e2a\u65f6\u95f4\u70b9\u7684\u4e0e\u5f53\u524d\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u8fdb\u5165\u4e00\u4e2a\u5d4c\u5957\u7684\u7a7a\u95f4\uff08\u65f6\u95f4\u5012\u9000\u4e86\uff09\uff0c\u4f46mana\u65f6\u95f4\u8fd8\u662f\u6b63\u5e38\u6d41\u52a8\uff0c\u73a9\u5bb6\u5fc5\u987b\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u79bb\u5f00\u8be5\u7a7a\u95f4\u3002\u8fd9\u4e2a\u53ef\u4ee5\u7528\u6765\u5b58\u50a8\u4e00\u4e9b\u6709\u7eaa\u5ff5\u610f\u4e49\u7684\u573a\u666f\uff0c\u6bd4\u5982\u5723\u8bde\u8282\u548c\u7279\u6b8aevent\u4e4b\u7c7b\u7684\u3002</p> <p>\u5173\u4e8eFPS/TPS controller\uff0c\u5bf9\u5e94\u7684Jasper Flick\u7684Movement\u7cfb\u5217\u7684\u6559\u7a0b\u6bd4\u8f83\u96be\uff0c\u9700\u8981\u4e13\u95e8\u82b1\u4e00\u5468\u591a\u65f6\u95f4\uff0c\u8fd9\u5757\u5148\u653e\u7740\uff0c\u6700\u597d\u5148\u7b49\u4e70\u4e86\u90a3\u4e2a\u7d20\u6750\u7136\u540e\u8bd5\u7740\u5199\u4e00\u5199\u81ea\u5df1\u7684controller\uff0c\u7136\u540e\u518d\u56de\u8fc7\u5934\u6765\u770b\u4f1a\u7406\u89e3\u5730\u66f4\u5feb\u4e00\u4e9b\uff0c\u6574\u5408\u5230\u81ea\u5df1\u7684\u4ee3\u7801\u91cc\u53bb\uff0c\u6700\u540e\u518d\u628awiki\u9875\u9762\u4e0a\u7684CharacterController\u548cPhysics\u90e8\u5206\u7684\u811a\u672c\u8fc7\u4e00\u904d\u6574\u5408\u8fdb\u6765\u3002\u76f8\u673a\u4e0d\u8981\u94bb\u7814\u592a\u7ec6\uff0cTPS\u5c31\u628aCinemachine\u73a9\u900f\u4e86\u5c31OK\uff0cFPS\u5c31\u76f4\u63a5\u6302\u4eba\u7269\u5934\u4e0a\u3002</p> <p>\u767b\u5f55\u754c\u9762+\u767b\u5f55\u97f3\u4e50\uff0c\u4ee5\u6545\u4e8b\u7684\u5f62\u5f0f\u8fdb\u5165\u6e38\u620f\uff0c\u4e3b\u9898\u662f\uff0c\u6765\u5bfb\u627e\u5230\u201c\u6211\u201d\u5427\uff0c\u88ab\u9009\u4e2d\u7684\u4eba\u3002\u201c\u6211\u201d\u662f\u8c01\uff1f\u5176\u5b9e\u6211\u5c31\u662f\u8fd9\u4e2a\u4e16\u754c\uff0c\u4f60\u5b58\u5728\u7684\u540c\u65f6\uff0c\u6211\u4e5f\u5728\u51dd\u89c6\u7740\u4f60\uff0c\u201c\u6211\u201d\u662f\u4f60\u7684\u4eba\u751f\u4ef7\u503c\u3002\u65e0\u8bba\u5728\u6e38\u620f\u8fd8\u662f\u73b0\u5b9e\u4e16\u754c\uff0c\u4eba\u53ea\u6d3b\u4e00\u6b21\uff0c\u771f\u6b63\u6709\u610f\u4e49\u7684\uff0c\u662f\u53bb\u5bfb\u627emana\uff0c\u5bfb\u627e\u7231\u7684\u56de\u5fc6\uff0c\u6240\u4ee5\u624d\u53eb\u505amana oasis\u3002mana\u662f\u4e00\u5207\u7684\u57fa\u7840\u548c\u91cd\u70b9\u3002</p> <p>\u6e38\u620f\u5165\u53e3\u7684\u573a\u666f\u662f\u73a9\u5bb6\u62e5\u6709\u7684\u4e00\u5ea7\u57ce\u5821\uff0c\u662f\u8001\u5bb6\u5c31\u53eb\u505amana-oasis\uff0c\u57ce\u5821\u5f88\u58ee\u89c2\uff0c\u6709\u591a\u680b\u697c\uff0c\u6bcf\u680b\u697c\u53ef\u4ee5\u6709\u65e0\u9650\u5c42\uff0c\u6bcf\u5c42\u90fd\u6709\u5404\u81ea\u7684\u8bbe\u65bd\u623f\u95f4\uff0c\u6bd4\u598283\u5c42\u662f\u97f3\u4e50\u5385\uff0c26\u5c42\u662f\u8c6a\u534e\u4f1a\u5ba2\u9910\u5385\uff0c38\u697c\u6709\u5927\u6d74\u573a\uff0c\u6bcf\u5c42\u6709\u4e00\u4e2a\u4e13\u5c5e\u8d1f\u8d23\u7684\u5973\u4ec6\u3002\u57ce\u5821\u662f\u4e00\u4e2a\u5927\u578b\u7684\u573a\u5730\uff0c\u6309\u7167\u4e0d\u540c\u7684\u697c\u5206\u4e3a\u51e0\u4e2a\u533a\u5757\u7684\uff0c\u6bcf\u4e2a\u533a\u5757\u6709\u4e2a\u603b\u9886\u5973\u4ec6\u3002\u5728\u5730\u9762\u90a3\u5c42\uff0c\u697c\u4e0e\u697c\u4e4b\u95f4\u7684\u7a7a\u767d\u533a\u57df\u662f\u57ce\u5821\u7684\u4e2d\u5ead\uff0c\u573a\u666f\u5c31\u7528\u5723\u9b54\u4e4b\u8840\u7684\u90a3\u4e2a\u5e7f\u573a\uff0c\u5728\u6bd4\u8f83\u9ad8\u7684\u7a7a\u4e2d\u5c42\uff0c\u697c\u4e0e\u697c\u4e4b\u95f4\u53ef\u4ee5\u7528\u56de\u5eca\u7684\u5f62\u5f0f\u8fde\u63a5\u8d77\u6765\uff0c\u8fd8\u53ef\u4ee5\u6709\u9732\u5929\u7684\u7a7a\u4e2d\u5ead\u9662\u3002\u6700\u540e\u57ce\u5821\u6709\u4e00\u5757\u540e\u5ead\uff0c\u6709\u8bb8\u591a\u65f6\u7a7a\u96a7\u9053\u901a\u5f80\u5176\u4ed6\u5927\u9646\u5f02\u4e16\u754c\u6d6e\u6e38\u5c9b\uff0c\u96a7\u9053\u662f\u5f02\u6b21\u5143\u7a7a\u95f4\u3002\u60f3\u597d\u57ce\u5821\u7684\u8fb9\u754c\u662f\u4ec0\u4e48\uff0c\u5982\u4f55\u63a7\u5236\u73a9\u5bb6\u4e0d\u51fa\u5708\uff0c\u8fb9\u754c\u505a\u6210\u600e\u4e48\u6837\u7684\u98ce\u666f\u6bd4\u8f83\u5408\u7406\uff0cskybox\u4e3a\u6c38\u8fdc\u7684\u9ed1\u591c\uff0c\u60f3\u597d\u5408\u7406\u7684\u6545\u4e8b\u89e3\u91ca\u80cc\u666f\u573a\u5730\u89e3\u91ca\uff0c\u60f3\u597d\u73a9\u5bb6\u767b\u5f55\u65f6\u4ece\u54ea\u91cc\u964d\u843d\uff0c\u4e5f\u5c31\u662f\u57ce\u5821\u7684\u5165\u53e3\u5728\u54ea\u91cc\u3002</p> <p>how to save and load? how to save checkpoint and game data? UI system. when working with UI or inventory, we need to pause the game sometimes (if single player mode). How to pause the game that meet your needs? This can be very tricky, be sure to study this: https://gamedevbeginner.com/the-right-way-to-pause-the-game-in-unity/</p> <p>\u753b\u9762\u5de6\u4e0a\u89d2\u505a\u4e00\u4e2a\u6e38\u620f\u5185\u7684console\uff0c\u53ef\u4ee5\u8f93\u5165console\u547d\u4ee4\u505a\u8bbe\u7f6e\uff1f\u53ef\u80fd\u9700\u8981\u7528\u5230SendMessage\uff1f\u8fd9\u4e2aconsole\u7684\u529f\u80fd\u4e00\u65b9\u9762\u662f\u7ed9\u73a9\u5bb6\u63d0\u4f9b\u6e38\u620f\u5185\u9ad8\u7ea7\u8bbe\u7f6e\uff0c\u4e00\u65b9\u9762\u6211\u53ef\u4ee5\u7528\u6765\u4f5c\u4e3aGM super user\u7684\u6d4b\u8bd5\u7a97\u53e3\uff0c\u901a\u8fc7\u8f93\u5165\u79d8\u7c4d\u6307\u4ee4\u7075\u6d3b\u5730\u8c03\u8282\u4e00\u5207\u6e38\u620f\u6570\u636e\uff0c\u73a9\u5bb6\u7b49\u7ea7\u4ec0\u4e48\u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbftesting\u3002\u4e0d\u8981\u81ea\u521b\u547d\u4ee4\u548c\u8bed\u8a00\u4e86\uff0c\u5c31\u7528python\u3002</p> <p>\u5173\u4e8eInventory\uff0c\u6240\u6709\u7684Item\u90fd\u8981\u5b9a\u4e49\u6210enum\u7c7b\u578b\uff0c\u6bd4\u5b57\u7b26\u4e32\u8981\u6548\u7387\u7684\u591a\u3002\u81f3\u4e8e\u73a9\u5bb6\u5177\u4f53\u7684\u80cc\u5305\u548c\u5e93\u5b58\uff0c\u7528Dictionary\u6765\u5b58\u50a8Item:Amount\u7684\u952e\u503c\u5bf9\uff0c\u4fbf\u4e8e\u67e5\u627e\u3002\u901a\u5e38\uff0c\u73a9\u5bb6\u90fd\u5e0c\u671b\u81ea\u5df1\u7684\u5e93\u5b58\u662f\u6709\u56fa\u5b9a\u987a\u5e8f\u7684\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5206\u7c7b\uff0c\u6240\u4ee5\u6700\u597d\u7528OrderedDictionary\u6709\u5e8f\u7684\u5b9e\u73b0\u3002\u8fd9\u6837\u4e5f\u65b9\u4fbf\u53ef\u4ee5\u4e00\u952e\u70b9\u51fb\u81ea\u52a8\u91cd\u65b0\u6392\u5217\u3002</p> <p>\u6240\u6709\u7684assets\uff0c\u8981\u6253\u5305\u8d77\u6765\u6210\u4e3aassetBundle\uff0c\u7528\u6700\u65b0\u7684\u5de5\u5177Unity Addressable Asset system\u7ba1\u7406\uff0c\u4fdd\u8bc1\u5185\u5b58\u4f1a\u81ea\u52a8\u91ca\u653e\u4e0d\u5fc5\u8981\u7684\u7d20\u6750\uff0c\u5426\u5219\u6240\u6709\u88abreference\u8fc7\u7684\u7d20\u6750\u6750\u8d28\u90fd\u4f1a\u4e00\u76f4\u5806\u79ef\u5728\u5185\u5b58\u91cc\u6700\u540ecrash\u3002</p> <p>Cinemachine\u53ef\u4ee5\u7528\u6765\u505atimeline\u52a8\u753b\u8854\u63a5\u591a\u4e2avirtual\u76f8\u673a\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u4e8e\u5236\u4f5c\u5267\u60c5\u4e2d\u7684\u5e73\u6ed1\u7684cut scene\uff08\u7528\u591a\u4e2a\u865a\u62df\u76f8\u673a\uff09\u3002\u5148\u628a\u573a\u666f\u4eba\u7269\u642d\u8d77\u6765\uff0c\u7136\u540e\u518d\u53bb\u505a\u4e00\u4e9bcutscene\u4f5c\u4e3a\u573a\u666f\u8854\u63a5\u52a8\u753b\uff0c\u4ee5\u53ca\u7247\u5934\u52a8\u753b\u3002</p> <p>\u7528scriptable object\u6765\u751f\u6210\u6279\u91cf\u7684gameobject\uff0c\u5bf9\u4e8eUI\u7684\u56fe\u6807\u4ec0\u4e48\u7684\u5c24\u5176\u6709\u7528\u3002\u8fd9\u79cd\u65b9\u5f0f\u751f\u6210\u7684\u6bcf\u4e2ago\u90fd\u662fcustomized\u7684\uff0c\u5e26\u6709\u4e0d\u540c\u7684\u5c5e\u6027\u3002\u800c\u5bf9\u8c61\u6c60\u548c\u5b83\u7684\u533a\u522b\u662f\uff0c\u5bf9\u8c61\u6c60\u662f\u4e3a\u4e86\u6027\u80fd\u539f\u56e0\u63d0\u524d\u751f\u6210go\uff0ccache\u5728\u5185\u5b58\u4e2d\u65b9\u4fbf\u53cd\u590d\u4f7f\u7528\uff0c\u6c60\u5b50\u91cc\u6bcf\u4e2ago\u90fd\u662f\u4e00\u6a21\u4e00\u6837\u7684\u57fa\u4e8e\u540c\u4e00\u4e2aprefab\u751f\u6210\u3002\u4f46scriptable object\u4e0d\u662f\u4e3a\u4e86\u6027\u80fd\uff0c\u800c\u662f\u4e3a\u4e86\u5f00\u53d1\u7684\u65b9\u4fbf\uff0c\u7ed9\u4e00\u7fa4\u7c7b\u4f3c\u7684go\u8bbe\u8ba1\u4e00\u4e2a\u53ef\u4ee5\u4f5c\u4e3a\u57fa\u7840\u7684\u6a21\u677f\uff0c\u5e76\u6ca1\u6709\u653e\u5728cache\u91cc\uff0c\u4e14\u6bcf\u4e2a\u884d\u751f\u51fa\u6765\u7684go\u90fd\u6709\u5404\u81ea\u7684\u7279\u8272\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u6837\u3002\u5728\u5f88\u591a\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u628ascriptable object\u548c\u5bf9\u8c61\u6c60\u7ed3\u5408\u8d77\u6765\uff0c\u914d\u5408\u4f7f\u7528\u8fbe\u5230\u9700\u8981\u7684\u6548\u679c\u3002</p> <p>Cinemachine Brain\u7684update method\u5c31\u7528\u9ed8\u8ba4\u63a8\u8350\u7684SmartUpdate\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e00\u822c\u4e0d\u4f1a\u5361\uff0c\u9664\u975e\u51fa\u73b0\u4e86jitter\uff08\u51e0\u4e4e\u4e0d\u4f1a\uff09\u3002smart\u5728\u5927\u591a\u65f6\u5019\u90fd\u662f\u7528LateUpdate\u7684\uff0c\u786e\u4fdd\u7269\u4f53\u5168\u90e8\u79fb\u52a8\u597d\u4e86\u518d\u66f4\u65b0\u76f8\u673a\u4f4d\u7f6e\uff0c\u9664\u975etarget\u662f\u4e00\u5806\u521a\u4f53\u5728\u52a8\u753b\uff08\u6bd4\u5982\u5e26\u521a\u4f53\u7684\u975ekinematic NPC\uff09\uff0c\u4e14\u52a8\u753b\u7279\u522b\u5feb\u5e45\u5ea6\u5927\u7279\u522b\u590d\u6742\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6bcf\u6b21LateUpdate\u4f1a\u6709\u5f88\u591a\u6b21FixedUpdate\u4e14\u52a8\u753b\u5e45\u5ea6\u5927\uff0c\u6240\u4ee5\u7528FixedUpdate\u66f4\u51c6\uff0c\u5426\u5219\u52a8\u753b\u53ef\u80fd\u4f1a\u6389\u5e27\u3002\u6b63\u5e38\u6e38\u620f\u91cc\u4e0d\u4f1a\u6709\u90a3\u4e48\u590d\u6742\u7684\u52a8\u753b\u7684\u3002\uff08\u8bb0\u4f4fLateUpdate\u662f\u5728\u6240\u6709update\u5305\u62ecfixedupdate\u4e4b\u540e\u7684\uff09 Cinemachine Brain\u7684\u6700\u540e\u4e00\u4e2atoggle\u9879Camera Activated Event\uff0c\u7528\u4e8e\u5f53\u4e24\u4e2a\u865a\u62df\u76f8\u673ablend\u5207\u6362\u65f6\u5728\u7b2c\u4e00\u5e27\u89e6\u53d1\u81ea\u5b9a\u4e49\u4e8b\u4ef6\uff0c\u8be5\u4e8b\u4ef6\u662f\u4e2a\u7ee7\u627f\u4e86UnityEvent\u7c7b\u7684\u81ea\u5df1\u5199\u7684C#\u7684class\u811a\u672c\uff08\u53c2\u8003CinemachineBrain\u7684\u7b2c113\u884c\u6e90\u7801\uff09\u3002\u6bd4\u5982\u4e24\u4e2aNPC A\u548cB\u5bf9\u8bdd\uff0c\u53ef\u4ee5\u7528\u6765\u5728\u5207\u6362AB\u7684follow\u76f8\u673a\u65f6blend\u7684\u7b2c\u4e00\u5e27\u89e6\u53d1\u663e\u793a\u53f0\u8bcd\u7684\u5bf9\u8bdd\u6846\u3002\uff08\u6216\u8005\u4e5f\u53ef\u4ee5\u5728\u6bcf\u4e2avirtual\u76f8\u673a\u7684transitions\u9009\u9879\u4e2d\u7684OnCameraLive\u6dfb\u52a0\u4e8b\u4ef6\uff0c\u4e5f\u5c31\u662f\u5f53\u8be5\u76f8\u673alive\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u662fblend\u7684\u6700\u540e\u4e00\u5e27\uff0c\u5176\u5b9e\u8fd9\u6837\u6548\u679c\u66f4\u597d\uff0c\u955c\u5934\u5bf9\u51c6\u4e86\u518d\u663e\u793a\u5bf9\u8bdd\u6846\uff09</p> <p>\u548c\u5973\u4ec6\u7684\u5bf9\u8bdd\u7a97\u53e3\u7528Live2D\u63d2\u4ef6\u6765\u5b9e\u73b0</p> <p>\u6309Q\u5207\u6362\u6b66\u5668\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u5feb\u901f\u6362\u67aa\u4e00\u6837\uff0c\u800c\u662f\u5f39\u51fa\u4e00\u4e2aUI\u7684\u8f6c\u76d8\uff0c\u8ba9\u73a9\u5bb6\u53ef\u4ee5\u9009\u62e9\u6b66\u5668\u3002</p> <p>TO-DO-LIST\uff1aCinemachine\u7528\u7684\u597d\u7684\u8bdd\uff0c\u548cTimeline\u4e24\u8005\u5b8c\u7f8e\u7ed3\u5408\uff0c\u662f\u53ef\u4ee5\u7528\u6765\u505a\u51fa\u5f88\u8d5e\u7684film\u7535\u5f71\u7684\uff0c\u5229\u7528\u5404\u79cd\u76f8\u673a\u5e73\u6ed1\u5207\u6362\uff0c\u914d\u5408storyboard\u548cBGM\u5e73\u6ed1\u5207\u6362\u3002\u8fd9\u5757\u6682\u65f6\u4e0d\u6df1\u7a76\uff0c\u4f46\u8fd9\u662f\u4e2a\u4eae\u70b9\u53ef\u4ee5\u7528\u6765\u5236\u4f5c\u7535\u5f71\u5267\u60c5\u3002\u6bd4\u5982ARIA\u7684\u573a\u666f\uff0c\u4e0d\u5149\u662f\u8ba9\u73a9\u5bb6\u81ea\u5df1\u81ea\u7531\u4ee5\u7b2c\u4e09\u89c6\u89d2\u63a2\u7d22\uff0c\u800c\u662f\u5236\u4f5c\u4e00\u6bb5\u5c0f\u7535\u5f71\u914d\u4e0a\u5408\u9002\u7684BGM\uff0c\u8bd5\u56fe\u6765\u8fd8\u539fARIA\u52a8\u6f2b\u539f\u4f5c\u4e2d\u7684\u4e00\u4e9b\u611f\u4eba\u6000\u65e7\u573a\u666f\uff0c\u662f\u975e\u5e38\u4e0d\u9519\u7684\u3002\u518d\u6bd4\u5982\u53ef\u4ee5\u7528\u6765\u5f53\u505a\u573a\u666f\u7684intro\u7247\u573afinale\u7247\u573a\u4ee5\u53ca\u4e2d\u95f4\u5267\u60c5\u8fc7\u573a\u52a8\u753b\uff0c\u6bd4\u5982\u5f53\u73a9\u5bb6\u53d1\u73b0\u67d0\u4e2a\u5e78\u798f\u7684\u5b9d\u85cf\u65f6\uff0c\u8fdb\u5165\u67d0\u4e2a\u573a\u666f\u65f6\uff0c\u5148\u7981\u7528\u73a9\u5bb6Input\uff0c\u64ad\u653e\u4e00\u6bb5\u4e0a\u5e1d\u89c6\u89d2\u7684\u9884\u89c8\u52a8\u753b\uff0c\u7528\u97f3\u4e50\u548c\u60c5\u611f\u8272\u5f69\u53bb\u6e32\u67d3\u90a3\u79cd\u610f\u5883\uff0c\u8ba9\u73a9\u5bb6\u66f4\u5bb9\u6613\u5165\u5883\u3002\u5bf9\u4e8e\u9759\u6001\u7684\u573a\u666f\uff0c\u53ef\u4ee5\u5728scene\u4e2d\u624b\u52a8\u8bbe\u7f6edolly paths\uff0c\u4e5f\u5c31\u662f\u4e00\u7cfb\u5217\u7684waypoint\u8f68\u9053\uff0c\u8ba9\u76f8\u673a\u6cbf\u7740\u8f68\u9053\u79fb\u52a8\uff0c\u4ece\u800c\u5b9e\u73b0\u624b\u6301\u76f8\u673a\u62cd\u6444\u7684\u6548\u679c\u3002\u53c2\u8003package\u81ea\u5e26\u7684sample\u573a\u666f\u6a21\u4eff\u5c31\u884c\u4e86\u3002</p> <p>\u628a\u6e38\u620f\u7684\u5404\u4e2a\u4e0d\u540c\u7684\u6a21\u5757\uff0c\u7528UML\u6574\u7406\u51fa\u6765\uff0c\u6709\u4e00\u4e2a\u6e05\u6670\u7684\u5927\u5c40\u89c2\u3002</p> <p>\u5149\u7167\u7684\u5f3a\u5ea6\uff08\u6bd4\u5982\u5929\u6c14\uff09\uff0c\u4ee5\u53ca\u67d0\u4e9b\u6548\u679c\u97f3\u548c\u97f3\u4e50\u7684\u97f3\u91cffade\uff0c\u53ef\u4ee5\u7528animation\u6765\u505a\u3002 \u5c24\u5176\u662f\u5149\uff0c\u53ef\u4ee5\u52a8\u753b\u4e00\u76cf\u8def\u706f\u88ab\u98ce\u5439\u800c\u6447\u52a8\uff0c\u540c\u65f6\u706f\u4e1dblink\uff0c\u5149\u7167\u5f3a\u5ea6\u9010\u6e10\u9012\u51cf\u7136\u540e\u7184\u706d\uff0c\u53c8\u8df3\u56de\u6765\u70b9\u4eae\uff0c\u5bfc\u81f4\u706f\u5149flick\u95ea\u70c1\u548c\u6447\u66f3\u7684\u6548\u679c\u3002\u975e\u5e38\u8d5e\u3002</p> <p>\u6700\u540ebuild\u7684\u65f6\u5019\uff0c\u5728Unity\u4e2d\u505a\u597d\u7247\u5934splash\u52a8\u753b\u548clogo\uff0c\u5728project settings/player\u4e2d\u8bbe\u7f6edefault icon\u4ee5\u53cadefault cursor\uff0c\u7528\u4f5c\u6e38\u620f\u5185\u7684\u56fe\u6807\u548c\u9f20\u6807\u56fe\u6848\u3002 build\u4e4b\u524d\uff0c\u628ascripting backend\u4ecemono\u6362\u6210IL2CPP\uff0c\u786e\u4fddC++ compiler\u8bbe\u7f6e\u4e3arelease\uff0c\u5e76\u542f\u7528Use incremental GC\u3002\u5e73\u65f6\u5f00\u53d1\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u542f\u7528Use incremental GC\uff0c\u867d\u7136\u5b83\u80fd\u8ba9GC\u5206\u644a\u5230\u5f88\u591aframes\u91cc\uff0c\u4ece\u800c\u907f\u514dprofiler\u51fa\u73b0\u6bd4\u8f83\u5927\u7684GC spike\uff0c\u4f46\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u5e76\u4e0d\u5229\u4e8e\u6211\u4eecoptimize\u505a\u8c03\u4f18\uff0c\u53cd\u800c\u4f1a\u5f88\u5bb9\u6613\u5ffd\u7565\u6389\u4e00\u4e9bGC spike\uff0c\u6240\u4ee5\u4e00\u5b9a\u8981\u5f53\u6240\u6709\u8c03\u4f18\u90fd\u5b8c\u6210\u540e\uff0c\u6700\u540ebuild\u7684\u65f6\u5019\u518d\u9009\u8fd9\u4e2a\u9009\u9879\u3002build\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u628aproject settings\u7684quality\u8bbe\u7f6e\u597d\uff0c\u76ee\u524d\u5f00\u53d1\u4e3a\u4e86\u6d41\u7545\uff0c\u6211\u628a\u9ed8\u8ba4\u7684quality\u8c03\u6210\u4e86low\uff0cbuild\u7684\u65f6\u5019\u8981\u6539\u6210ultra\uff0c\u5e76\u4e14\u63d0\u9ad8\u5404\u79cd\u753b\u8d28\u7684\u9009\u9879\u3002</p> <p>\u7528Cinemachine Confiner extension\u6765\u63a7\u5236TPS\u76f8\u673a\u7684\u8fb9\u754c\uff0c\u5230\u4e86\u8fb9\u754c\u73a9\u5bb6\u8fd8\u53ef\u4ee5\u5f80\u524d\u8d70\u4f46\u76f8\u673a\u5c31\u4e0d\u80fd\u4e86\uff0c\u6240\u4ee5\u73a9\u5bb6\u7684\u80cc\u5f71\u8d8a\u6765\u8d8a\u8fdc\uff0c\u8fbe\u5230\u4e00\u5b9a\u8ddd\u79bb\u4ee5\u540e\u5c31\u53ef\u4ee5\u5207\u6362\u573a\u666f\u4e86\uff0c\u7528\u8fd9\u4e2a\u505a\u573a\u666f\u5207\u6362\u7684\u6548\u679c\u3002\u6240\u4ee5\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u76f8\u673a\u7684confiner\u662f\u4e2a\u77e9\u5f62\uff0c\u77e9\u5f62\u7684\u957f\u5bbd\u8981\u6bd4scene\u7684\u5927\u5c0f\u7a0d\u5fae\u5c0f\u4e00\u5708\uff0c\u76f8\u5dee\u7684\u90a3\u4e00\u5708\u4e5f\u5c31\u662f\u76f8\u673a\u4f1a\u770b\u7740\u73a9\u5bb6\u6e10\u884c\u6e10\u8fdc\u7684\u90a3\u6bb5\u8ddd\u79bb\u3002</p> <p>\u6e38\u620f\u4e2d\u8bbe\u8ba1\u51e0\u4e2a\u89c2\u5bdf\u8005\u89c6\u89d2\u7684\u573a\u666f\u6d3b\u52a8\uff0c\u6bd4\u5982\u6597\u517d\u573a\u91cc\u770b\u5973\u5deb\u4eec\u5bf9\u6253\uff0c\u8d4c\u8c01\u8d62\u7684\u753b\u9762\uff0c\u6d89\u53ca\u5230\u591a\u4e2a\u7269\u4f53\u540c\u65f6\u79fb\u52a8\u3002\u7136\u540e\u7528Cinemachine Target Group\u6765\u5b9e\u73b0\u540c\u65f6\u8ba9\u76f8\u673alook at\u6240\u6709\u7684\u5973\u5deb\uff0c\u968f\u7740\u6218\u6597\u8fdb\u884c\uff0c\u5973\u5deb\u6570\u91cf\u9010\u6e10\u51cf\u5c11\uff0c\u76f8\u673a\u5c31\u4f1a\u81ea\u52a8zoom in\u3002\u8fd9\u662f\u552f\u4e00\u53ef\u4ee5\u5b9e\u73b0look at\u591a\u4e2a\u7269\u4f53\u4fdd\u8bc1\u5728\u5c4f\u5e55\u5185\u7684\u3002</p> <p>\u573a\u666f\u5207\u6362\u65f6\u8981\u6362BGM\uff0c\u5229\u7528\u97f3\u91cf\u9010\u6e10\u51cf\u5c0ffade\u7684\u5207\u6362\u65b9\u5f0f\uff0c\u7528Timeline\u6765\u5b9e\u73b0\u3002\u4e5f\u53ef\u4ee5\u7528coroutine\u3002</p> <p>\u4ee3\u7801\u8c03\u4f18\uff0cenhance performance\uff0c\u8bfb\u4e00\u4e0b\uff1a https://learn.unity.com/tutorial/fixing-performance-problems# \u5bf9\u4e8ePerformance-critical\u4ee3\u7801\u7684\u8c03\u4f18\uff0c\u6216\u8005\u662f\u901f\u5ea6\u975e\u5e38\u6162\u7684\u4ee3\u7801\uff08\u6bd4\u5982\u8bed\u97f3\uff0c\u56fe\u50cf\u7c7b\u64cd\u4f5c\uff09\uff0c\u53ef\u4ee5\u8003\u8651\u5199unsafe\u5173\u952e\u5b57\u7684\u51fd\u6570\uff0c\u7528C#\u7684\u6307\u9488\u6765\u624b\u52a8\u64cd\u4f5c\uff0c\u914d\u5408fixed\u548cstackalloc\u5173\u952e\u5b57\uff0c\u5c31\u548c\u5199C++\u4e00\u6837\uff0c\u4f46\u662f\u4f1a\u6d89\u53ca\u5230\u7c7b\u4f3cC\u8bed\u8a00\u5f88\u5e95\u5c42\u7684\u4e1c\u897f\uff0c\u901a\u5e38\u4e0d\u9700\u8981\u3002\u5f53\u4f60\u7528\u4e86unsafe\u5173\u952e\u5b57\u548c\u6307\u9488\uff0cC#\u81ea\u5e26\u7684GC\u5c31\u4e0d\u4f1a\u5bf9\u8fd9\u5757\u4ee3\u7801\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3aGC\u672c\u8d28\u4e0a\u4e5f\u662f\u4f9d\u9760\u667a\u80fd\u6307\u9488\u6765\u8ddf\u8e2a\u5185\u5b58\u7684\uff0cGC\u6ca1\u6cd5\u77e5\u9053\u4f60\u6709\u54ea\u4e9b\u6307\u9488\uff0c\u6307\u5411\u4ec0\u4e48\u5730\u5740\u3002</p> <p>\u8dd1\u8f66\u79fb\u52a8\u7684\u65f6\u5019\uff0c\u540e\u9762\u52a0\u4e0atrajectory render\u548cnitro\u80fd\u91cf\u7279\u6548\u3002</p> <p>Calendar\u91cc\u9762\u7684\u65e5\u51fa\u65e5\u843d\u6708\u51fa\u6708\u843d\u51fd\u6570\uff0c\u6bcf\u5929\u51cc\u66680\u70b9\u6279\u5904\u7406\u65f6\u8fd0\u884c\u83b7\u53d6\uff0c\u7528\u4e8eschedule\u63a5\u4e0b\u6765\u7684\u4e8b\u4ef6\uff0c\u6bd4\u5982\u89e6\u53d1Restopia\u57ce\u5821\u5185\u7684\u4e3b\u949f\u58f0\u548c\u949f\u6446\u52a8\u753b\u3002 GetManaDate\u7528\u4e8e\u5728UI\u91cc\u663e\u793a\u5f53\u524dMana\u4e16\u754c\u7684\u65f6\u95f4\uff0c\u53ef\u4ee5\u505a\u5168\u606f\u65e5\u5386\u4ec0\u4e48\u7684\u3002 GetManaSeason\u83b7\u53d6\u5b63\u8282\uff0c\u52a8\u6001\u5730\u8c03\u6574\u5730\u5f62\u7684\u5929\u6c14\u6548\u679c\u3002Restopia\u4e4b\u5916\u7684\u67d0\u4e9b\u5730\u56fe\u5bf9\u6b64invariant\uff0c\u6709\u72ec\u7acb\u7684\u5929\u6c14\u3002 GetManaTime\u83b7\u53d6\u4e00\u5929\u7684\u65f6\u95f4\u6bb5\uff0c\u5982\u65e9\u665a\u4e2d\u5348\u7b49\uff0c\u6839\u636e\u8fd9\u4e2a\u65f6\u95f4\u6bb5\u6765\u8c03\u6574Restopia\u5185\u7684mana\u6d53\u5ea6\uff0c\u5348\u591c\u8fbe\u5230\u6781\u503c\uff0c\u67d0\u4e9b\u573a\u666f\u7684\u7279\u6b8a\u9b54\u6cd5\u529f\u80fd\u9700\u8981\u4e00\u5b9a\u6d53\u5ea6\u624d\u80fd\u89e6\u53d1\u3002</p> <p>\u7535\u89c6\u673a\u6216\u7535\u8111\u7684\u5c4f\u5e55\uff0c\u6216\u8005\u4e00\u4e9b\u5927\u5c4f\u5e55\u7684\u52a8\u6001\u6e32\u67d3\uff0c\u662f\u7528\u76f8\u673a\u5b9e\u73b0\u7684\u3002\u628acamera\u7684view\u6295\u5f71\u5728\u4e00\u4e2arender texture\u4e0a\uff0c\u7136\u540e\u628a\u8fd9\u4e2atexture\u6302\u8f7d\u5230\u7535\u89c6\u5c4f\u5e55\u4e0a\u6216\u8005\u4e00\u5757\u77f3\u677f\u4e0a\uff0c\u8be5\u76f8\u673a\u7684view\u5c31\u90fd\u4f1a\u663e\u793a\u5728\u90a3\u4e2atexture\u6240\u6302\u8f7d\u7684gameobject\u4e0a\u3002\u76f8\u5f53\u4e8e\u662f\u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u64ad\u653ecamera view\u7684\u52a8\u6001texture\u3002</p> <p>\u7528[NonSerialized] to make sure a variable state is reset to default on game state change. \u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u6bd4\u5982motor\u91cc\u7684groundingStatus\uff0c\u6bcf\u4e00\u5e27\u90fd\u5728\u53d8\u5316\u66f4\u65b0\uff0c\u540c\u65f6\u5b83\u53c8\u662f\u4e00\u4e2apublic\u53d8\u91cf\u9700\u8981\u5728\u5176\u4ed6class\u91cc\u88ab\u8bbf\u95ee\u7684\uff0c\u5c31\u7528NonSerialized\uff0c\u6b64\u65f6unity\u4e0d\u4f1a\u53bb\u5e8f\u5217\u5316\u5b83\uff0c\u4f1a\u8ba9\u5b83\u6bcf\u5e27\u66f4\u65b0\uff0c\u800c\u5e8f\u5217\u5316\u901a\u5e38\u4ee3\u8868\u7740\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\u5728play\u7684\u65f6\u5019\u5c31\u56fa\u5b9a\u4e86\u4e0d\u53d8\u4e86\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a\u6bcf\u5e27\u4e0d\u505c\u5728\u53d8\u7684\u503c\u4e0d\u80fd\u88ab\u5e8f\u5217\u5316\uff0c\u5e8f\u5217\u5316\u53ea\u9002\u7528\u4e8eruntime\u76f8\u5bf9\u6052\u5b9a\u7684\u53d8\u91cf\uff0c\u901a\u5e38\u4e00\u4e2a\u6bcf\u5e27\u5728\u53d8\u7684\u503c\u90fd\u662fprivate\u53d8\u91cf\uff0c\u9ed8\u8ba4\u662fNonSerialized\u7684\uff0c\u5076\u5c14\u8fd9\u4e2a\u53d8\u91cf\u53c8\u9700\u8981\u88ab\u5176\u4ed6class\u8bbf\u95ee\uff0c\u6240\u4ee5\u662fpublic\uff0c\u8fd9\u65f6\u5c31\u8981\u52a0\u4e0aNonSerialized\u3002\u5176\u4ed6\u7684\u60c5\u51b5\u7528HideInInspector.</p> <p>\u67d0\u4e9blevel\u4e2d\uff0c\u6bd4\u5982\u5728\u5efa\u7b51\u7269\u5185\uff0c\u8bbe\u7f6e\u4e00\u4e9b\u623f\u95f4\uff0c\u4f7f\u5176\u573a\u666f\u662f\u5176\u4ed6level\u7684\u573a\u666f\uff08\u5e76\u4e0d\u662f\u7a7f\u8d8a\u5230\u53e6\u4e00\u4e2alevel\uff0c\u53ea\u662f\u628a\u90a3\u4e2alevel\u76f8\u540c\u7684\u573a\u666fcopy\u8fc7\u6765\uff09\u3002\u6bd4\u5982\u67d0\u4e2a\u623f\u95f4\uff0c\u6253\u5f00\u95e8\u7ed3\u679c\u5230\u4e86\u4e00\u4e2a\u68a6\u5e7b\u7684\u4e16\u754c\u90ca\u5916\uff08\u6709\u8fb9\u754c\uff09\u3002\u8fd9\u6837\u73a9\u5bb6\u4e0b\u6b21\u5230\u8fbe\u771f\u5b9e\u7684\u8be5\u573a\u666f\u65f6\uff0c\u4f1a\u53cd\u5e94\u8fc7\u6765\u8fd9\u4e2a\u5730\u65b9\u6211\u6765\u8fc7\uff08\u5b9e\u9645\u4e0a\u4e0d\u662f\u540c\u4e00\u4e2a\u5730\u65b9\uff09\u3002</p> <p>\u73a9\u5bb6\u521d\u59cb1\u7ea7\u6709100\u70b9\u8840\u548c\u9b54\uff0c\u6bcf\u5347\u4e00\u7ea7\u52a0100\uff0c\u6700\u9ad8100\u7ea7\uff0c\u8840\u548c\u9b54\u4e0a\u96509999.</p> <p>when level/scene changes such as the player goes thru a portal, fade out the current game view, then switch to a UI canvas with progress bar, then fade in the new game view. use a script to control fading effect. Using coroutines\u3002</p> <p>MUSIC\u6ca1\u6709\u7248\u6743\u6ca1\u5173\u7cfb\uff0c\u505a\u6210\u53ef\u4ee5\u8ba9\u73a9\u5bb6\u81ea\u884c\u9009\u62e9\u672c\u5730\u97f3\u4e50\u6587\u4ef6\u7684\u5f62\u5f0f\uff0c\u6bcf\u4e2a\u4eba\u5bf9\u4e8e\u6bcf\u4e2a\u573a\u666f\u6700\u9002\u5408\u4ec0\u4e48\u97f3\u4e50\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u504f\u597d\uff0c\u8fd9\u6837\u8ba9\u4ed6\u4eec\u81ea\u5df1\u53bb\u5339\u914d\u81ea\u5df1\u6700\u559c\u6b22\u7684\u573a\u666f\u6c1b\u56f4\u3002ofc, the player has the option to choose if to play the music in a scene or not, there's gonna be a play/stop button. \u81f3\u4e8e\u6211\u81ea\u5df1\u7684\u7248\u672c\uff0c\u6211\u53d1\u7ed9\u5176\u4ed6\u670b\u53cb\u548c\u6d4b\u8bd5\u8005\u9080\u8bf7\u4ed6\u4eec\u4e00\u8d77\u73a9\u7684\u7248\u672c\uff0c\u7531\u6211\u81ea\u5df1\u4e8b\u5148\u9009\u597d\u97f3\u4e50\uff0c\u8fd9\u6837\u4e0d\u6784\u6210\u4fb5\u6743\uff0c\u53ea\u5c5e\u4e8e\u79c1\u7528\uff0c\u4f46\u8981\u660e\u786e\u544a\u77e5\u5bf9\u65b9\u4e0d\u53ef\u4ee5\u5728\u7f51\u4e0a\u8fdb\u884c\u53d1\u5e03\u3002 \u5728\u6e38\u620f\u4e2druntime\u65f6\u9009\u62e9\u672c\u5730\u97f3\u4e50\u6587\u4ef6\uff0c\u5f39\u51fa\u4e00\u4e2a\u9009\u62e9\u7a97\u53e3\uff0c\u9700\u8981\u8bbf\u95eeOS\u7684fileSystem\uff0c\u8fd9\u4e2a\u662f\u53d6\u51b3\u4e8e\u5e73\u53f0\u7684\uff0c\u6bd4\u8f83\u96be\u505a\uff0c\u8fd8\u597d\u6709\u73b0\u6210\u7684\u5305\uff0c\u8bb0\u5f97\u7528Github\u6536\u85cf\u7684Unity Standalone File Browser\u8fd9\u4e2apackage\u3002 MUSIC\u8fd8\u6709\u4e2a\u529e\u6cd5\uff0c\u5229\u7528AI\u81ea\u52a8\u7f16\u66f2\uff0c\u9700\u8981\u7528\u5230\u97f3\u4e50\u4eba\u5de5\u667a\u80fd\u7684\u77e5\u8bc6\uff0c\u5177\u4f53\u5230\u65f6\u5019\u53c2\u8003\u77e5\u4e4e\u6536\u85cf\u7684\u6587\u7ae0\u5b66\u4e60\u4e00\u4e0b\uff0c\u7136\u540e\u53bb\u54a8\u8be2\u76f8\u5173\u4e13\u4e1a\u7684\u7b54\u4e3b\uff0c\u770b\u80fd\u4e0d\u80fd\u7528\u73b0\u6210\u7684API\u6216\u81ea\u5df1\u8bad\u7ec3\u4e2a\u6a21\u578b\uff0c\u53ea\u8981\u628a\u6211\u60f3\u7528\u7684\u539f\u66f2feed\u7ed9\u8fd9\u4e2a\u6a21\u578b\uff0c\u6a21\u578b\u5c31\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u6bb5\u76f8\u540c\u66f2\u98ce\u7684BGM\uff08\u65e0\u6cd5\u9006\u5411\u5de5\u7a0b\u7684\uff0c\u8fd9\u6837\u5c31\u6ca1\u4eba\u77e5\u9053\u539f\u66f2\u662f\u4ec0\u4e48\uff0c\u4e0d\u6d89\u53ca\u4efb\u4f55\u7248\u6743\u95ee\u9898\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u5728\u6e38\u620f\u91cc\u5217\u51fa\u6765\u539f\u66f2\u5217\u8868\u7ed9\u73a9\u5bb6\u53c2\u8003\uff09 MUSIC\u7684\u64ad\u653e\u7531\u573a\u666f\u81ea\u52a8\u89e6\u53d1\uff0c\u8fdb\u5165\u5219\u5f00\u59cb\u64ad\u653e\uff0c\u540c\u65f6\u5728\u753b\u9762\u53f3\u4e0a\u89d2\u4ee5\u201c\u5927\u56fe\u4e66\u9986\u7684\u7267\u7f8a\u4eba\u201d\u76f8\u540c\u7684\u65b9\u5f0f\uff0c\u5728\u4e00\u4e2a\u534a\u900f\u660e\u5c0f\u6587\u5b57\u6846\u91cc\u663e\u793a\u5f53\u524d\u6240\u64ad\u653e\u7684\u66f2\u76ee\u540d\u79f0\u3002</p> <p>\u5173\u4e8e\u6b66\u5668\uff0c\u4e3b\u8981\u6b66\u5668\u662f\u9b54\u6756wand\uff0c\u540c\u4e00\u6839\u9b54\u6756\u6709\u591a\u79cd\u6280\u80fd\u6548\u679c\uff0c\u5bf9\u5e94\u4e0d\u540c\u5feb\u6377\u952e\uff0c\u6bcf\u6b21\u89e6\u53d1\u65f6\u5728update\u4e2dinstantiate\u7c92\u5b50\u7cfb\u7edf\uff0c\u65e0\u9700\u4f7f\u7528\u5bf9\u8c61\u6c60\uff0c\u4f46\u8981\u8bbe\u7f6eboolean\u6807\u8bb0\u8868\u793a\u6280\u80fd\u8fdb\u5165CD\uff08update\u4f1a\u5224\u65adbool\u6807\u8bb0\uff09\uff0c\u540c\u65f6\uff0c\u4e0b\u65b9UI\u6280\u80fd\u6846\u8981\u663e\u793a\u6280\u80fdCD\u7684\u72b6\u6001\u3002\u6bcf\u79cd\u6280\u80fd\u7684\u653b\u51fb\u901f\u5ea6\u8303\u56f4\u90fd\u4e0d\u540c\uff0c\u76f4\u63a5\u5728wand\u7c7b\u4e2d\u8bbe\u7f6e\u3002\u7531\u4e8e\u6709CD\u673a\u5236\u7684\u5b58\u5728\uff0c\u4e0d\u7528\u5bf9\u8c61\u6c60\uff0c\u5e76\u4e14\u6bcf\u6b21\u76f4\u63a5getcomponent\u4e5f\u4e0d\u4f1a\u6709\u6027\u80fd\u95ee\u9898\u3002</p> <p>\u5173\u4e8e\u5347\u7ea7\u7cfb\u7edf\u3001\u804c\u4e1a\u7cfb\u7edf\u548c\u6280\u80fd\u6811\uff0c\u6709\u4e2a\u6700\u7b80\u5355\u7684\u529e\u6cd5\uff0c\u5c31\u662f\u4e0e\u73b0\u5b9e\u4e16\u754c\u7684\u4eba\u7c7b\u6210\u957f\u4e00\u4e00\u5bf9\u5e94\u3002\u804c\u4e1a\u5206\u4e3a\u7406\u5de5\u79d1\u3001\u6587\u79d1\u5546\u79d1\uff08\u7269\u7406\u672f\u58eb\uff0c\u6570\u5b66\u672f\u58eb\uff0c\u5316\u5b66\u5143\u7d20\u672f\u58eb\uff0c\u5546\u672f\u58eb\uff0c\u6587\u672f\u58eb\uff0c\u683c\u6597\u58eb\uff0c\u9b54\u6cd5\u4f7f\u7b49\u7b49\uff09\uff0c\u5347\u7ea7\u662f\u901a\u8fc7\u505a\u9898\u6765\u5b8c\u6210\u7684\uff0c\u5728\u6e38\u620f\u4e2d\u8bbe\u7f6e\u5bf9\u5e94\u5b66\u79d1\u7684\u4e60\u9898\uff0c\u7b54\u6848\u5bf9\u4e86\u5c31\u83b7\u5f97\u7ecf\u9a8c\u503c\uff0c\u8fbe\u5230\u4e0a\u9650\u5c31\u5347\u7ea7\uff0c\u53ef\u4ee5\u83b7\u5f97\u65b0\u7684\u6280\u80fd\u548c\u9053\u5177\u3002\u4e3a\u4e86\u6e38\u620f\u6027\uff0c\u4e0d\u8981\u628a\u9898\u76ee\u51fa\u7684\u5f88\u96be\u592a\u4e13\u4e1a\uff0c\u800c\u8981\u6709\u4e00\u5b9a\u7684\u8da3\u5473\u6027\uff0c\u6bd4\u5982\u53ef\u4ee5\u662f\u5f88\u795e\u5947\u7684\u5c0f\u5b66\u5965\u6570\u9898\uff0c\u8111\u7b4b\u6025\u8f6c\u5f2f\uff0c\u54f2\u5b66\u8ba8\u8bba\u9898\uff0c\u7b80\u5355\u79d1\u666e\u9898\uff0c\u6216\u662f\u6587\u5b66\u8457\u4f5c\u548c\u903b\u8f91\u7ecf\u5178\u4e66\u7c4d\u7684\u6458\u6284\u4ec0\u4e48\u7684\u3002</p> <p>\u6bcf\u4e2a\u73a9\u5bb6\u6709\u4e00\u4e2a\u7b14\u8bb0\u672c\uff0c\u529f\u80fd\u548c\u672a\u6765\u65e5\u8bb0\u7c7b\u4f3c\uff0c\u6bcf\u89e6\u53d1\u4e00\u5b9a\u4e8b\u4ef6\uff0c\u7b14\u8bb0\u672c\u4e0a\u4f1a\u81ea\u52a8\u8bb0\u5f55\u4e00\u4e9b\u6587\u5b57\uff0c\u5e76\u63d0\u793a\u97f3\u63d0\u793a\u73a9\u5bb6\u3002\u5176\u5b9e\u4e00\u5f00\u59cb\u7b14\u8bb0\u672c\u91cc\u5c31\u6709\u5168\u90e8\u7684\u6545\u4e8btext\uff0c\u53ea\u4e0d\u8fc7\u662f\u9010\u6761\u663e\u793a\uff0c\u6bcf\u6b21readline\u4e00\u884c\uff0c\u5e76\u4fdd\u5b58seeker\u7684\u4f4d\u7f6e\u72b6\u6001\uff0c\u800c\u4e0d\u7528\u53bb\u672c\u5730\u6587\u4ef6\u91cc\u6bcf\u6b21\u8bfb\u53d6\u3002</p> <p>\u8bed\u97f3\u7cfb\u7edf\u5b8c\u6210\u4e4b\u540e\uff0c\u8981\u5728unity\u91cc\u5b9e\u73b03D\u6548\u679c\uff0c\u6bd4\u5982\u73a9\u5bb6\u5728\u623f\u95f4\u91cc\u8bf4\u8bdd\uff0c\u5fc5\u987b\u8981\u6709\u56de\u58f0\uff0c\u6a21\u62df\u73b0\u5b9e\u7684\u58f0\u97f3\u800c\u4e0d\u53ea\u662f\u9ea6\u514b\u98ce\u3002</p> <p>\u5b9e\u73b0\u4e00\u4e2a\u52a8\u6001\u52a0\u8f7d\u5730\u56fe\u7684\u529f\u80fd\uff0c\u7528trigger collider\u505a\uff0c\u5f53\u73a9\u5bb6\u9760\u8fd1\u4e00\u5b9a\u8303\u56f4\u65f6\uff0c\u9644\u8fd1\u7684\u623f\u95f4\u5185\u5ba4\u624d\u4f1aload\u52a0\u8f7d\u3002</p> <p>Unity C#</p> <p>Mathf.PerlinNoise(float x, float y)\u5bf9\u4e8e\u76f8\u8fd1\u7684input\u4f1a\u4ea7\u751f\u76f8\u8fd1\u7684output\u968f\u673a\u6570\uff0c\u6240\u4ee5\u5c40\u90e8\u76f8\u90bb\u7684\u4f4d\u7f6e\u5c31\u770b\u4e0a\u53bb\u662f\u8fde\u7eed\u7684\u3002\u53ef\u4ee5\u628ax,y\u770b\u4f5c\u662f\u56fe\u4e0a\u7684\u4e00\u4e2apixel\u7684\u5750\u6807\u4f4d\u7f6e\uff0c\u76f8\u8fd1\u7684pixel\u5c31\u4f1a\u6709\u8fde\u7eed\u7684\u503c\u3002\u4f46\u5176\u5b9e\u8fd9\u4e2a\u51fd\u6570\u7684input\u5fc5\u987b\u662f\u5c0f\u6570\uff0c\u5bf9\u4e8e\u6574\u6570\u7684input\u6bd4\u59822.0\u548c3.00\u8fd9\u79cd\uff0c\u8fd4\u56de\u503c\u662f\u56fa\u5b9a\u7684\uff0c\u5c31\u4e0d\u4f1a\u6709\u8fde\u7eed\u7684\u6548\u679c\u3002PerlinNoise\u7684input\u88ab\u79f0\u4f5csample\uff0c\u56e0\u4e3a\u4f60\u4e0d\u4f1a\u53ea\u8c03\u4e00\u6b21\u8fd9\u4e2a\u51fd\u6570\uff0c\u800c\u662f\u8fde\u7eed\u4e0d\u65ad\u7684\u8f93\u5165\u76f8\u8fd1\u7684input\u53bb\u8c03\u5b83\uff0c\u5f97\u5230\u8fde\u7eed\u7684\u566a\u97f3\u7cfb\u5217\uff0c\u6240\u6709\u7684\u8fd9\u5806input\u5171\u540c\u6784\u6210\u4e86\u4e00\u7ec4sample\uff0csample\u53ef\u4ee5\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u4e00\u4e2a\u4ee3\u8868texture\u7684\u4e8c\u7ef4\u77e9\u9635\uff0c\u751a\u81f3\u662f\u4e09\u7ef4\u56db\u7ef4\u7684\u8d85\u7acb\u65b9\u4f53\u3002</p> <p>Unity\u53ea\u63d0\u4f9b\u4e86\u4e8c\u7ef4\u7684\u8fd9\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u6a21\u62df\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684perlin\u566a\u97f3\uff0c\u53ef\u4ee5\u7528\u6765\u751f\u6210\u968f\u673atexture\uff0c\u6bd4\u5982\u505aprocedural\u7684\u5730\u5f62\u4e4b\u7c7b\u7684\u3002\u4e09\u7ef4\u7684\u600e\u4e48\u505a\u4e0d\u77e5\u9053\uff0c\u6bd4\u8f83\u56f0\u96be\u3002\u4e00\u7ef4\u7684\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u56fa\u5b9ainput\u7684\u5176\u4e2d\u4e00\u4e2a\uff0c\u53ea\u53d8\u5316\u53e6\u4e00\u4e2a\u5c31\u53ef\u4ee5\u4e86\uff0c\u6bd4\u5982\u56fa\u5b9ax sample\u7684\u503c\u4e3a0\uff0c\u53d8\u5316y sample\u7684\u503c\uff0c\u90a3\u4e48\u76f8\u8fd1\u7684y\u503c\u5c31\u4f1a\u4ea7\u751f\u4e00\u7cfb\u5217\u770b\u4e0a\u53bb\u8fde\u7eed\u7684\u968f\u673a\u6570\uff0c\u5728\u5355\u4e2aaxis\u4e0a\u6a21\u62df\u968f\u673a\u6548\u679c\u3002\u8003\u8651\u4e00\u4e2a\u76f8\u673a\u7684shake\uff0c\u5982\u679c\u6bcf\u4e00\u5e27\u7684input\u90fd\u975e\u5e38\u63a5\u8fd1\uff0c\u53ea\u76f8\u5dee0.01\u6bd4\u5982\uff0c\u751f\u6210\u7684\u968f\u673a\u6570\u4e5f\u975e\u5e38\u63a5\u8fd1\uff0c\u90a3\u4e48\u53ea\u6709\u5f53\u65f6\u95f4\u8fc7\u7684\u8db3\u591f\u4e45\uff0c\u7ecf\u8fc7\u4e86\u5f88\u591a\u5e27\uff0c\u65b0\u7684input\u76f8\u5bf9\u4e8e\u6700\u5f00\u59cb\u7684input\u624d\u4f1a\u6709\u663e\u8457\u7684\u5dee\u522b\uff0c\u751f\u6210\u7684\u968f\u673a\u6570\u624d\u4f1a\u6709\u663e\u8457\u7684\u5dee\u522b\uff0c\u4e5f\u5c31\u662f\u53d8\u5316\u975e\u5e38\u5e73\u7f13smooth\uff0c\u6a21\u62df\u52a8\u753b\u6548\u679c\u7684\u8bdd\u5c31\u662f\u8d85\u6162\u52a8\u4f5c\uff1b\u53cd\u8fc7\u6765\u5982\u679c\u6bcf\u5e27input\u5dee\u522b\u8f83\u5927\uff0c\u6bcf\u5e27\u7684\u968f\u673a\u6570\u4e5f\u5dee\u522b\u5f88\u5927\uff0c\u90a3\u4e48\u52a8\u753b\u6bcf\u5e27\u90fd\u5728\u98a4\u6296\u7740\u53d8\u5316position\uff0c\u4f46\u8fd9\u6837\u770b\u4e0a\u53bb\u52a8\u4f5c\u5c31\u4e0d\u518d\u662f\u8fde\u7eed\u7684\u4e86\uff0c\u5c31\u5931\u53bb\u4e86\u7528perlin\u566a\u97f3\u7684\u610f\u4e49\u3002\u56e0\u6b64\uff0c\u8c03\u6574\u5230\u5408\u9002\u7684frequency\u975e\u5e38\u5173\u952e\uff0c\u8981\u8ba9input\u6bcf\u6b21\u53d8\u5316\u76f8\u8fd1\uff0c\u4f46\u53c8\u4e0d\u662f\u592a\u63a5\u8fd1\uff0c\u624d\u80fd\u540c\u65f6\u4fdd\u8bc1\u5e73\u6ed1\u8fde\u7eed\u548c\u6b63\u5e38\u7684\u52a8\u4f5c\u901f\u7387\u3002</p> <p>\u5173\u4e8e\u722c\u68af\u5b50\u7684\u8bbe\u7f6e\uff0c\u6240\u6709\u7684\u68af\u5b50\u5305\u62ecchild\u5168\u90e8\u8bbe\u6210Ladder layer\uff0c\u5176\u4e2d\uff0croot go\u52a0\u4e00\u4e2atrigger\u7684box collider\u7528\u4e8e\u68c0\u6d4b\u73a9\u5bb6\u662f\u5426\u9760\u8fd1\uff0c\u800c\u6bcf\u4e2achild\u52a0\u4e00\u4e2a\u6b63\u5e38\u7684collider\u7528\u4e8e\u78b0\u649e\uff0c\u4f7f\u73a9\u5bb6\u4e0d\u80fd\u7a7f\u6a21\u3002top\u548cbottom\u7684release\u70b9\uff0c\u5408\u7406\u8bbe\u7f6e\u4f4d\u7f6e\uff0c\u5c24\u5176y\u65b9\u5411\u8981\u4fdd\u6301\u6c34\u5e73\u3002top\u548cbottom\u7684anchor\u70b9\uff0c\u901a\u8fc7\u90a3\u6761gizmo\u7684\u7ebf\u8bbe\u7f6e\uff0c\u4fdd\u6301\u90a3\u4e2avector\u79bb\u68af\u5b50\u7684\u5782\u76f4\u8ddd\u79bb\u6b63\u597d\u591f\u73a9\u5bb6\u6478\u5f97\u5230\uff0c\u4f46\u53c8\u4e0d\u4f1a\u7a7f\u6a21\u3002</p> <p>asset\u5b8c\u5168\u53ef\u4ee5\u5728\u4e91\u7aef\u5728\u670d\u52a1\u5668\u4e0a\uff0c\u4f5c\u4e3aDLC\u7684\u5f62\u5f0f\u5b58\u5728\uff0c\u8fd9\u6837app\u7684size\u5c31\u53ef\u4ee5\u975e\u5e38\u7684\u5c0f\uff0c\u65b9\u4fbf\u4e0b\u8f7d\uff0c\u7b49\u73a9\u5bb6\u9700\u8981\u7528\u5230asset\u7684\u65f6\u5019\uff0c\u518d\u5b9e\u65f6\u7684\u4e0b\u8f7dDLC\u5c31\u53ef\u4ee5\u4e86\u3002\u5bf9\u4e8e\u516c\u53f8\u6765\u8bf4\uff0c\u8fd9\u6837\u4e5f\u4fbf\u4e8e\u672a\u6765\u6e38\u620f\u66f4\u65b0\uff0c\u518d\u600e\u4e48\u52a0\u5185\u5bb9\uff0c\u90fd\u4e0d\u4f1a\u8ba9app size\u53d8\u5927\u3002</p> <p>Streaming Assets\u6709\u70b9\u7c7b\u4f3c\u4e8eResources\u6587\u4ef6\u5939\uff0c\u6574\u4e2a\u6587\u4ef6\u5939\u4f1a\u539f\u5206\u4e0d\u52a8\u7684copy\u5230build\u4e2d\u53bb\uff0c\u7136\u540eruntime\u65f6\u53ef\u4ee5\u7528StreamReader\u4ee5stream\u6d41\u7684\u5f62\u5f0f\u8bfb\u53d6\uff0c\u9002\u5408\u4e8e\u89c6\u9891\u6587\u4ef6\u6216\u97f3\u4e50BGM\u4e4b\u7c7b\u7684\u975e\u5e38\u5927\u7684\u6587\u4ef6\u3002\u901a\u8fc7stream\u8bfb\u53d6\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u907f\u514d\u975e\u5e38\u5927\u7684\u6587\u4ef6\u8d44\u6e90\u88ab\u4e00\u4e0b\u5b50load\u5230\u5185\u5b58\u91cc\uff0c\u8282\u7701\u8d44\u6e90\u3002\u4e0d\u652f\u6301WebGL\u3002\u81f3\u4e8ebuild\u65f6\u5177\u4f53\u88abcopy\u5230\u54ea\u4e2a\u6587\u4ef6\u5939\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u53d6\u51b3\u4e8etarget platform\uff0c\u5bf9\u4e8ewindows mac linux ios android\u548cconsole\u7b49\u7b49\uff0c\u4f4d\u7f6e\u90fd\u4e0d\u4e00\u6837\u3002</p> <p>Addressable\u662f\u672a\u6765\u7684\u4e3b\u6d41\uff0c\u5f88\u5f3a\u5927\uff0c\u8ba4\u771f\u5b66\u4e00\u4e0b\u3002\u6709\u4e86Addressable\uff0c\u5f88\u591a\u4e1c\u897f\u90fd\u53ef\u4ee5\u505a\u6210\u4e91\u7aefDLC\u7684\u5f62\u5f0f\u5b58\u5728\uff0cStreamingAssets\u5c31\u57fa\u672c\u6ca1\u7528\u5904\u4e86\u3002\u672a\u6765\u53ef\u4ee5\u8003\u8651\u7528Unity\u81ea\u5e26\u7684Cloud Content Delivery\u4ea7\u54c1\uff0c\u53ef\u4ee5\u514d\u8d39\u670950\u4e2aGB\u7684\u4e91\u7aef\u5b58\u50a8\uff0c\u7528\u4e8e\u90e8\u7f72\u81ea\u5df1\u7684\u6e38\u620fasset\uff1ahttps://unity.com/products/cloud-content-delivery</p> <p>UI\u7684Canvas\u662f\u4e00\u5207UI\u5185\u5bb9\u7684\u5bb9\u5668\uff0c\u662f\u6700\u4e0a\u5c42\u7684\u4e00\u4e2acontainer\uff0c\u6240\u6709UI\u5185\u5bb9\u90fd\u4f1a\u88abrender\u5728canvas\u91cc\u9762\uff0c\u901a\u5e38\u8bbe\u7f6ecanvas\u7684\u5927\u5c0f\u4e3ascale with screen size\u5e76\u6307\u5b9a\u597d\u5206\u8fa8\u7387\u3002\u4e00\u4e2ascene\u53ef\u4ee5\u6709\u591a\u4e2acanvas\uff0c\u7528\u4e8e\u4e0d\u540c\u7684\u529f\u80fd\uff0c\u90fd\u662fon top of scene\u88abrender\u7684\uff0c\u53ef\u4ee5\u8bbe\u7f6ecanvas\u7684sort order\uff0c\u6570\u503c\u8d8a\u5927\u7684\u4f1a\u88ab\u6700\u540erender\uff0c\u6240\u4ee5\u4f1a\u8986\u76d6\u6389\u5176\u4ed6\u7684canvas\uff0c\u6bd4\u5982loading screen\u5c31\u8981\u8bbe\u6210999\u4fdd\u8bc1\u5b83\u6c38\u8fdc\u5728\u5c4f\u5e55\u6700\u524d\u9762\u3002</p> <p>Panel\u662fCanvas\u4e0b\u9762\u4e00\u7ea7\u7684container\uff0c\u4ee3\u8868canvas\u4e2d\u4e00\u5757\u5c0f\u533a\u57df\uff0c\u7528\u4e8e\u5c06canvas\u4e2d\u7684\u76f8\u5173\u8054\u7684UI\u5143\u7d20group\u8d77\u6765\uff0c\u4ee5\u6b64\u6765\u6709\u6548\u5206\u7c7b\u548c\u7ec4\u7ec7canvas\u7684\u4e0d\u540c\u5143\u7d20\u3002\u5728\u4e00\u4e2apanel\u4e0a\uff0c\u53ef\u4ee5\u6dfb\u52a0Canvas Group component\uff0c\u7528\u4e8e\u8c03\u8282\u6574\u4e2apanel\u7684\u900f\u660e\u5ea6\u4ec0\u4e48\u7684\u3002\u4e00\u4e2apanel\u5fc5\u987b\u6709\u4e14\u53ea\u80fd\u6709\u4e00\u4e2agraphics component\uff0c\u8981\u4e48\u662fImage\uff0c\u8981\u4e48\u662fRawImage\uff0c\u7528\u4e8erender\u8fd9\u4e2apanel\u3002Image\u6210\u5206reference\u7684\u662f\u4e00\u4e2asprite\uff0c\u901a\u5e38\u7528\u4e8e\u663e\u793a\u4e00\u5f20\u56fe\u7247\uff0c\u6bd4\u5982loading screen\u7684\u80cc\u666f\u56fe\uff0c\u662f\u9759\u6001\u7684\u3002RawImage\u6210\u5206reference\u7684\u662f\u4e00\u4e2atexture\uff0c\u901a\u5e38\u7528\u4e8e\u663e\u793a\u6bcf\u4e00\u5e27\u90fd\u5728\u4e0d\u65ad\u53d8\u5316\u7684\u5185\u5bb9\uff0ctexture\u5728runtime\u7684\u6bcf\u5e27\u90fd\u5728\u53d8\u3002\u5bf9\u4e8e\u6bcf\u5e27\u53d8\u5316\u7684\u5185\u5bb9\uff0csprite\u4e0d\u9002\u5408\uff0c\u56e0\u4e3aSprite.Create()\u53c8\u6162\u53c8\u5360\u5185\u5b58\u3002RawImage\u7075\u6d3b\u5ea6\u66f4\u9ad8\uff0c\u63a5\u53d7\u4efb\u4f55Texture\uff0c\u63d0\u4f9b\u66f4\u591a\u52a8\u753b\u548c\u4ece\u4ee3\u7801\u4e2dupdate\u7684\u529f\u80fd\uff0c\u800cImage\u6210\u5206\u76f8\u5bf9\u7b80\u5355\u5355\u4e00\uff0c\u53ea\u63a5\u53d7Sprite\uff08Sprite\u53ea\u662fTexture\u7684\u4e00\u79cd\uff09\u3002\u5927\u591a\u6570\u65f6\u5019\uff0c\u6211\u4eec\u7528\u7684\u90fd\u662fImage\u6210\u5206\uff0c\u914d\u5408\u4e00\u4e2asprite\uff0c\u5f88\u5c11\u9700\u8981\u5728UI\u4e2d\u663e\u793a\u52a8\u6001\u7684\u5185\u5bb9\u7684\u3002</p> <p>Texture\u7684\u672c\u8d28\u662fbitmap\uff0c\u662f\u7528\u6765\u8d34\u57283D\u7269\u4f53\u7684mesh\u4e0a\u7528\u6765render\u7684\u3002\u5728Unity\u4e2d\uff0c\u6bcf\u4e2ago\u7684mesh renderer\u4e0b\u9762\u90fd\u8981\u6709\u4e00\u4e2amaterial\uff0c\u901a\u5e38\u4e00\u4e2amesh\u5bf9\u5e94\u4e00\u4e2amaterial\uff0c\u5982\u679c\u6709submesh\u53ef\u4ee5\u6709\u591a\u4e2amaterial\uff0c\u800c\u6bcf\u4e2amaterial\u90fd\u662f\u7531\u4e00\u4e2a\u6216\u591a\u4e2atexture\u52a0\u4e0ashader\u6240\u7ec4\u6210\u7684\uff0cmaterial\u662f\u628atexture\u548cshader\u7ed3\u5408\u8d77\u6765\u6240\u6784\u6210\u7684\u6750\u8d28\u3002bitmap\u5c31\u662f\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\uff0c\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e00\u4e2apixel\uff0c\u7528\u6765\u8d34\u5728\u5176\u4ed6\u7269\u4f53\u4e0a\u3002\u6709\u65f6\u5019texture\u4e5f\u53ef\u4ee5\u662fcubemap\uff0c\u5373\u4e09\u7ef4\u77e9\u9635\uff0c\u7528\u6765\u8d34\u5728skybox\u4e0a\u3002</p> <p>Sprite\u662f\u4e00\u4e2a2D\u7684\u56fe\u5f62\u7269\u4f53\uff0c\u76f8\u5f53\u4e8e\u5c31\u662f\u4e00\u4e2a2D\u7684game object\uff0c\u5bf9\u5e94\u7684mesh\u662fflat\u5e73\u7684\uff0c\u8fd9\u4e2a\u5e73\u7684mesh\u4e0a\u5df2\u7ecf\u6709texture\u4e86\u3002Sprite\u662ftexture\u5e94\u7528\u5230go\u4e0a\u7684\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\uff0c\u4efb\u4f55\u4e00\u4e2atexture\u90fd\u53ef\u4ee5\u8f6c\u6362\u6210sprite\u3002\u7531\u4e8e\u5b83\u7684mesh\u662f\u5e73\u7684\uff0cSprite\u662f\u901a\u8fc7Sprite Renderer\u6e32\u67d3\u7684\uff0c\u800c\u4e0d\u662fMesh Renderer\u3002</p> <p>\u7b80\u800c\u8a00\u4e4b\uff0ctexture\u662f\u4e3b\u8981\u7528\u6765\u63a7\u5236\u4e00\u4e2a3D\u7269\u4f53\u7684\u5916\u89c2\u7684\uff0c\u800c\u5f53\u4f60\u9700\u8981\u663e\u793a\u4e00\u5f202D\u56fe\u7247\u7684\u65f6\u5019\uff0c\u65e0\u8bba\u662f\u52a8\u6001\u53d8\u7684\u8fd8\u662f\u9759\u6001\u7684\uff0c\u6c38\u8fdc\u662f\u7528sprite\u3002</p> <p>\u4e0d\u8fc7\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u5982\u679c\u9700\u8981\u5728runtime\u65f6load sprite\uff0c\u4e00\u5b9a\u8981\u628asprite\u63d0\u524d\u521b\u5efa\u597d\uff0c\u5bfc\u5165\u56fe\u7247\u540e\u5728import settings\u4e2d\u8bbe\u7f6e\u597d\u70b9\u51fbapply\uff0c\u5bf9\u4e8e\u5927\u56fe\u8fd9\u4e2a\u8981\u7b49\u4e0a\u597d\u51e0\u79d2\uff0c\u4f46\u662f\u4e4b\u540eruntime\u76f4\u63a5load\u5b83\u5c31\u5f88\u5feb\u4e86\u3002\u5982\u679c\u4e00\u5f00\u59cb\u6ca1\u6709\u5728import settings\u4e2dapply\u521b\u5efasprite\uff0c\u800c\u662f\u76f4\u63a5runtime\u8c03\u7528Sprite.Create()\u65b9\u6cd5\uff0c\u867d\u7136\u53ef\u884c\u4f46\u662f\u975e\u5e38\u6162\uff0c\u8981\u5361\u597d\u51e0\u79d2\u3002</p> <p>SetActive is for gameObjects\uff08go\uff09and enabled is for Components on the Object\uff0c\u6240\u4ee5\u6211\u4eec\u6211\u4eec\u8bbe\u7f6eactive\u72b6\u6001\u662f\u9488\u5bf9gameObjects\u800c\u8a00\u7684\uff0c\u800c\u5f53\u5177\u4f53\u67d0\u4e2agameObject\u88abactive\u4ee5\u540e\uff0c\u5728\u90a3\u4e2aobject\u7684\u6302\u8f7d\u7684component\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u8981\u7528onEnable\u53bb\u5224\u65ad\uff08\u5224\u65ad\u8fd9\u4e2a\u811a\u672ccomponent\u88abenable\u4e86\uff09\u3002\u8bbe\u7f6eenable flag\u5219\u662f\u9488\u5bf9\u5177\u4f53\u67d0\u4e2acomponent\u800c\u8a00\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0csetactive\u662f\u628a\u4e00\u6574\u4e2agameobject\u524d\u9762\u7684\u52fe\u6253\u4e0a\u6216\u53bb\u6389\uff0c\u8bbe\u7f6eenable=true or false\u662f\u628a\u67d0\u4e2acomponent\u524d\u9762\u7684\u52fe\u6253\u4e0a\u6216\u53bb\u6389\u3002</p> <p>\u5224\u65ad\u4e00\u4e2ago\u662f\u5426active\u901a\u5e38\u7528isActiveInHierarchy\uff0c\u4e5f\u5c31\u662f\u8bf4\u5fc5\u987b\u5b83\u7684\u6240\u6709parent\u4e5factive\uff0c\u5426\u5219\u53ea\u8981\u6709\u4e00\u4e2aparent\u4e0d\u662factive\uff0c\u54ea\u6015\u8fd9\u4e2ago\u672c\u8eab\u662factive\uff0c\u5b83\u4e5f\u4e0d\u4f1a\u88abupdate\u4e0d\u4f1a\u8d77\u4f5c\u7528\u3002\u5224\u65ad\u4e00\u4e2acomponent\u662f\u5426enabled\u901a\u5e38\u7528isActiveAndEnabled\uff0c\u5c31\u662f\u8fd9\u4e2acomponent\u5bf9\u5e94\u7684go\u9996\u5148\u8981active\u7136\u540e\u5b83enabled\u624d\u6709\u610f\u4e49\uff0c\u5426\u5219\u53ea\u770benabled\u4e3atrue\u5e76\u4e0d\u4ee3\u8868\u8fd9\u4e2acomponent\u5728\u8d77\u4f5c\u7528\uff0c\u5f88\u53ef\u80fd\u5b83attach\u7684go\u662finactive\u7684\u3002</p> <p>debug UI\u7684\u65f6\u5019\uff0c\u4e0d\u7528\u81ea\u5df1\u5199log\uff0c\u53ef\u4ee5\u76f4\u63a5\u70b9\u51fbHierarchy\u7a97\u53e3\u4e2d\u7684EventSystem go\uff0c\u7136\u540e\u5728inspector\u7684\u6700\u4e0b\u65b9\u5c31\u80fd\u770b\u5230eventsystem\u7684\u5b9e\u65f6debug\u4fe1\u606f\u8868\u3002</p> <p>debug\u67d0\u4e2ago\u7684\u65f6\u5019\uff0c\u5f80\u5f80\u6211\u4eec\u4e5f\u53ef\u4ee5\u628aInspector\u5207\u6362\u6210debug mode\uff0c\u53ef\u4ee5\u76f4\u63a5\u52a8\u6001\u5730\u770b\u5230\u6240\u6709private\u53d8\u91cf\u7684\u5b9e\u65f6\u66f4\u65b0\u60c5\u51b5\u3002</p> <p>GameObject and all of its component exist before awake is called. This means you can call GetComponent in Awake(), \u4f46\u662f\u8981\u6ce8\u610f\uff0cawake\u91cc\u9762\u4e0d\u53ef\u4ee5\u8bbf\u95ee\u4f60\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u867d\u7136\u53ef\u4ee5\u8bbf\u95ee\u4efb\u4f55component\uff0c\u4f46\u4e0d\u80fd\u8bbf\u95ee\u4efb\u4f55component\u7684\u53d8\u91cf\uff0c\u5305\u62ec\u672cclass\u7684SerializeField\u53d8\u91cf\u3002\u4ee5\u4e0b\u662fbest practice\uff1a</p> <p>Awake: Here you setup the component you are on right now (the \"this\" object)</p> <p>Start: Here you setup things that depend on other components.</p> <p>\u5f53\u7b2c\u4e00\u4e2aStart\u88abcall\u7684\u65f6\u5019\uff0c\u6574\u4e2a\u6e38\u620f\u91cc\u6240\u6709\u811a\u672c\u7684Awake\u90fd\u5df2\u7ecf\u8fd0\u884c\u5b8c\u4e86\u3002</p> <p>\u5982\u679c\u4e00\u4e2ago\u4e00\u5f00\u59cb\u662finactive\u7684\uff0cawake\u548cstart\u90fd\u4e0d\u4f1a\u88abcall\uff0c\u53ea\u6709\u5f53\u5b83\u5728\u6e38\u620f\u4e2d\u88abactive\u4e86\u4ee5\u540e\uff0cawake\u3001start\u548cOnEnable\u624d\u4f1a\u88ab\u8c03\u7528\u3002</p> <p>\u3010\u8981\u6ce8\u610f\u7684\u662f\u3011\uff0cawake\u88ab\u8c03\u7528\u7684\u524d\u63d0\u662fgo\u4e3aactive\u72b6\u6001\uff0c\u6240\u4ee5\u5373\u4f7f\u8be5\u811a\u672ccomponent\u662fdisabled\u7684\uff0c\u53ea\u8981\u5b83\u7684go\u662factive\uff0cawake\u4e5f\u4f1a\u88ab\u8c03\uff08OnEnable\u5219\u4e0d\u4f1a\uff09\uff0c\u800c\u4e0d\u662f\u7b49\u5230\u5b83OnEnable\u4e86\u624d\u4f1a\u88ab\u8c03\uff08Awake is called even if the script is a disabled component of an active GameObject.\uff09</p> <p>melee combat\u7528\u7b2c\u4e09\u4eba\u79f0\uff0cranged combat\u7528\u7b2c\u4e00\u4eba\u79f0\u3002</p> <p>\u521b\u5efa\u4e00\u4e2apreload scene\u662f\u4e2a\u597d\u4e60\u60ef\uff0c\u53ef\u4ee5\u66f4\u7b80\u5355\u65b9\u4fbf\u7684organize\u6e38\u620f\u8d44\u6e90\uff0c\u6bd4singleton\u4e4b\u7c7b\u7684lazy loading\u66f4\u597d\u7528\u3002</p> <p>preload scene\u4e3b\u8981\u7528\u6765\u751f\u6210\u90a3\u4e9bpersistent\u7684go\uff0cservice\u4e4b\u7c7b\u7684\uff0c\u4e5f\u5c31\u662f\u6574\u4e2asession\u6240\u6709scene\u90fd\u5fc5\u987b\u7684\u7ec4\u4ef6\u3002</p> <p>\u53ef\u4ee5\u8003\u8651\u7528splash screen scene\u6765\u4f5c\u4e3apreload scene\uff0c\u5b9e\u73b0\u4e00\u6837\u7684\u529f\u80fd\u3002</p> <p>\u5982\u4f55carry\u6570\u636eacross scenes\uff1f\uff1f\uff1f</p> <pre><code>https://gamedev.stackexchange.com/questions/110958/what-is-the-proper-way-to-handle-data-between-scenes\n</code></pre> <p>playerPrefs\u662f\u7528\u6765\u5b58\u653e\u6e38\u620f\u7684\u914d\u7f6e\u6570\u636e\u7684\uff0c\u662f\u6e38\u620f\u7684Preferences\u6570\u636e\uff0c\u6bd4\u5982\u97f3\u91cf\u5206\u8fa8\u7387\u4e4b\u7c7b\u7684\uff0c\u800c\u4e0d\u662f\u7528\u6765\u5b58\u6e38\u620f\u6570\u636e\u7684\u3002playerPrefs\u91c7\u7528\u7684\u662f\u6700\u7b80\u5355\u7c97\u66b4\u7684\u65b9\u6cd5\uff0c\u628a\u8fd9\u4e9bsettings\u6570\u636e\u5168\u90e8\u5b58\u50a8\u4e3astring\uff0c\u6ca1\u6709\u4efb\u4f55\u5e8f\u5217\u5316\u64cd\u4f5c\uff0c\u4e0d\u65b9\u4fbf\u7ba1\u7406\uff0c\u4e14\u5f53\u6570\u636e\u8f83\u5927\u65f6\u96be\u4ee5scale\uff0c\u56e0\u6b64\u4e0d\u8981\u7528playerPrefs\u6765\u505asave/load\u7cfb\u7edf\uff0c\u4ec5\u4ec5\u53ea\u662f\u5b58\u50a8\u6e38\u620f\u7684settings\u8bbe\u5b9a\u548c\u73a9\u5bb6preference\u800c\u5df2\uff01\uff01\uff01</p> <p>\u5728\u6e38\u620fsession\u4e2d\uff0c\u5b58\u653e\u6570\u636e\u7528ScriptableObject\uff0cSO\u975e\u5e38\u7075\u6d3b\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7684carry\u6570\u636eacross scenes\uff0c\u4f46\u662fSO\u53ea\u5728\u5f53\u524dsession\u5185\u5b58\u6d3b\uff0c\u5f53application\u9000\u51fa\u540eSO\u7684\u6570\u636e\u5c31\u6ca1\u6709\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528ISerializationCallbackReceiver\u6765\u5199\u81ea\u5df1\u7684custom\u5e8f\u5217\u5316\u903b\u8f91\uff0capplication quit\u7684\u65f6\u5019\u4f1a\u5e8f\u5217\u5316\u8c03\u7528\u8fd9\u4e2acallback\uff0c\u5c31\u53ef\u4ee5\u624b\u52a8\u628a\u6e38\u620f\u6570\u636e\u4fdd\u5b58\u5230\u672c\u5730\uff0c\u7136\u540e\u4e0b\u6b21\u6253\u5f00\u6e38\u620f\u7684\u65f6\u5019\u518d\u4ece\u672c\u5730load\u6570\u636e\u5230SO\u91cc\u3002\u5e8f\u5217\u5316\u5c31\u7528\u7b80\u5355\u7684File I/O\u6765\u505a\uff0c\u5229\u7528Unity\u81ea\u5e26\u7684JsonUtility class\u3002</p> <p>\u600e\u6837\u5408\u7406\u7684load new scene\u5e76\u4e14unload current scene\uff1f</p> <p>\u5982\u679cnew scene\u573a\u666f\u4e0d\u5927\uff0c\u6bd4\u5982\u8fdb\u5165\u53e6\u4e00\u4e2a\u623f\u95f4\u6216\u6218\u6597\u573a\u4e4b\u7c7b\u7684\uff0c\u76f4\u63a5additively\u5728\u540e\u53f0\u5f02\u6b65\u5730load new scene\u5c31\u597d\u4e86\uff0cload\u5b8c\u6210\u4e86\u518dunload current\uff0c\u5219\u4f1a\u81ea\u52a8\u5207\u6362\u5230new scene\u3002\u8bb0\u5f97\u8981\u7528\u5f02\u6b65\u7684LoadSceneAsync\u65b9\u6cd5\uff0c\u4e00\u822c\u90fd\u4e0d\u8981\u7528load single scene\u7684LoadScene\u51fd\u6570\u3002</p> <p>\u5982\u679c\u4e24\u4e2a\u573a\u666f\u90fd\u5f88\u5927\uff0c\u6bd4\u5982\u4e00\u822c\u7684\u4e3b\u573a\u666f\u5207\u6362\uff0cadditive\u7684\u6a21\u5f0f\u4f1a\u628a\u4e24\u4e2a\u540c\u65f6load\u8fdb\u5185\u5b58\uff0c\u8fd9\u5bf9memory\u8981\u6c42\u5f88\u9ad8\uff0c\u4e0d\u662f\u4e2a\u597d\u7684\u9009\u62e9\u3002\u6700\u597d\u7684\u505a\u6cd5\u662f\uff0c\u6bcf\u6b21\u4e3b\u573a\u666f\u5207\u6362\u7684\u65f6\u5019\uff0c\u4e2d\u95f4\u90fd\u505a\u4e00\u4e2aloading screen\u4f5c\u4e3a\u8fc7\u6e21\u7684\u573a\u666f\uff0c\u663e\u793a\u56fe\u7247\u548c\u4e00\u4e2a\u8fdb\u5ea6\u6761\u3002\u7531\u4e8eloading screen\u975e\u5e38\u7684\u5c0f\uff0c\u6240\u4ee5additve\u6ca1\u95ee\u9898\uff0c\u5148load\u8fd9\u4e2a\u8fc7\u6e21\u573a\u666f\uff0c\u597d\u4e86\u4e4b\u540eunload\u5f53\u524d\u573a\u666f\uff0c\u7136\u540e\u518dload\u65b0\u573a\u666f\uff0c\u597d\u4e86\u4e4b\u540eunload\u8fd9\u4e2a\u8fc7\u6e21\u573a\u666f\uff0c\u4e5f\u5c31\u662f\u505a\u4e24\u6b21\u8fd9\u4e2a\u52a8\u4f5c\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u65e0\u7f1d\u5207\u6362\u4e86\u3002</p> <p>SceneManager.sceneLoaded\u662f\u7528\u6765\u6307\u5b9a\u5f53\u65b0\u573a\u666fload\u597d\u4e4b\u540e\u9700\u8981call\u7684callback\uff0c\u4f46\u4e0d\u8981\u4e71\u7528\uff0c\u4e0d\u597d\u8ffd\u8e2a\u3002\u5927\u591a\u6570\u4e8b\u60c5\u4e0d\u9700\u8981\u653e\u5728\u8fd9\u91cc\u9762\u53bb\u505a\uff0c\u5728\u65b0\u573a\u666f\u7684go\u7684Awake\u6216\u8005Start\u91cc\u9762\u505a\u5c31\u884c\u4e86\uff0c\u6700\u597d\u662fgame manager\u91cc\u505a\uff0c\u8fd9\u6837\u8bbe\u8ba1\u66f4\u6e05\u6670\u3002sceneLoaded\u7684callback\u662f\u5728\u65b0\u573a\u666f\u7684awake\u4e4b\u540e\u6267\u884c\u7684\uff0c\u5e76\u4e0d\u662f\u6700\u5f00\u59cb\u8dd1\u3002\u53ea\u6709\u5f53\u6d89\u53ca\u5230\u4e00\u4e9b\u9700\u8981\u8de8scene\u7684\u903b\u8f91\uff0c\u6bd4\u5982move\u67d0\u4e9bgo\u5230\u65b0\u573a\u666f\u4ec0\u4e48\u7684\uff0c\u624d\u6709\u5fc5\u8981\u653e\u5728sceneLoaded\u91cc\u9762\u3002</p> <p>\u5982\u679c\u4f60\u786e\u5b9a\u67d0\u4e2ago\u6216component\u4e0d\u4f1a\u88abdestroy\uff0c\u90a3\u4e48\u5224\u65ad\u5b83\u662f\u5426\u4e3anull\u65f6\uff0c\u7528!ReferenceEquals(go, null)\uff0c\u76f8\u6bd4\u800c\u8a00\uff0c!=null\u975e\u5e38\u6602\u8d35\u3002</p> <p>NonSerialized\u4e3b\u8981\u662f\u7528\u6765\u907f\u514d\u5e8f\u5217\u5316\u4e00\u4e2a\u53d8\u91cf\uff0c\u4e8e\u662fUnity\u6216\u5176\u4ed6Json\u6216\u4e8c\u8fdb\u5236\u5e8f\u5217\u5316\u4e0d\u4f1a\u5305\u542b\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u4e5f\u5c31\u662f\u5728\u4efb\u4f55data\u6253\u5305\u4f20\u9001\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6b64\u5b57\u6bb5\u90fd\u4f1a\u88ab\u5ffd\u7565\u3002\uff08\u6bd4\u5982\uff0cclone\u6216instantiate\u4e00\u4e2ago\u65f6\uff0cunity\u5c31\u4f1a\u9700\u8981\u53bb\u5e8f\u5217\u5316\u8be5go\uff1b\u8fd8\u6709\u5f53unity\u60f3\u8981\u628a\u811a\u672c\u91cc\u7684\u5b57\u6bb5\u663e\u793a\u5728editor\u4e2d\uff0c\u4e5f\u5fc5\u7136\u6709\u4e2a\u5e8f\u5217\u5316\u53cd\u5e8f\u5217\u5316\u5373save/load\u7684\u8fc7\u7a0b\uff09\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u79c1\u6709\u53d8\u91cf\u7528private\u5c31\u53ef\u4ee5\uff0c\u5982\u679c\u53c8\u60f3\u4fdd\u62a4\u6570\u636e\u4ee5\u9632\u88ab\u6539\uff0c\u53c8\u60f3\u88ab\u5176\u4ed6\u7c7b\u8bbf\u95ee\u5230\uff0c\u5c31\u7528[NonSerialized] public\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e3a\u8fd9\u4e2a\u5b57\u6bb5\u4e13\u95e8\u8bbe\u4e00\u4e2apublic getter property\uff0c\u4f46\u5f88\u9ebb\u70e6\u4e5f\u672a\u5fc5\u9002\u7528\uff0cproperty\u662f\u7528\u4e8e\u4e13\u95e8\u4e3a\u4e86\u7ed9\u5176\u4ed6\u7c7b\u8bbf\u95ee\u7684\u53d8\u91cf\u7528\u7684\uff0c\u9884\u8ba1\u4f1a\u88ab\u9891\u7e41\u8bbf\u95ee\uff0c\u5982\u679c\u53ea\u662f\u5076\u5c14\u6709\u53ef\u80fd\u4f1a\u88ab\u8bbf\u95ee\u5230\uff0c\u8fd8\u662fNonSerialized\u5408\u9002\uff09\u3002\u518d\u6709\u5c31\u662f\u6bd4\u5982\u4e00\u4e9bc#\u65e0\u6cd5\u5b58\u50a8\u7684texture/bitmap\u4e4b\u7c7b\u7684\u53d8\u91cf\uff0c\u4e0d\u5e94\u8be5\u4e5f\u4e0d\u80fd\u88ab\u5e8f\u5217\u5316\uff0c\u5c31\u8981\u7528NonSerialized\u3002\u901a\u5e38NonSerialized\u6700\u5e38\u89c1\u7684\u7528\u6cd5\uff0c\u8fd8\u662f\u4e3a\u4e86\u4fdd\u62a4\u67d0\u4e9b\u5b57\u6bb5\u7684\u6570\u636e\uff0c\u800c\u8fd9\u4e9b\u5b57\u6bb5\u53c8\u5076\u5c14\u53ef\u80fd\u4f1a\u88ab\u8bbf\u95ee\u5230\u6240\u4ee5\u65e0\u6cd5\u8bbe\u6210private\u3002</p> <p>anchor\u662f\u4e00\u4e2aUI\u5143\u7d20\u7684Rect Transform\u76f8\u5bf9\u4e8e\u5b83\u7684parent\u7684Rect Transform\u7684\u4f4d\u7f6e\u3002anchor\u4e2d\u7684min max\u503c\uff0c\u6307\u7684\u662fanchor\u76f8\u5bf9\u4e8eparent Rect Transform\u7684\u4f4d\u7f6e\uff0c\u662f\u4e00\u4e2a\u767e\u5206\u6bd4\u4f8b\uff0c\u5f53parent\u7684scale\u53d1\u751f\u53d8\u5316\u65f6\uff08\u5207\u6362\u5206\u8fa8\u7387\uff09\uff0canchor\u7684\u503c\u80fd\u591f\u4fdd\u8bc1anchor\u76f8\u5bf9parent\u6c38\u8fdc\u5904\u4e8e\u540c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6bd4\u5982\u6c34\u5e7330%\u5782\u76f450%\u7b49\u7b49\u3002\u540c\u6837\u7684\uff0cpivot\u7684\u503c\u4e5f\u662f\u4e00\u4e2a\u767e\u5206\u6bd4\uff0c\u6307\u7684\u662fpivot\u5728\u5f53\u524dUI\u5143\u7d20\u4e2d\u7684\u76f8\u5bf9\u4f4d\u7f6e\u3002</p> <p>\u5728UI\u5143\u7d20\u7684Rect Transform\u4e2d\uff0cPOS X Y\u7684\u503c\uff0c\u6307\u7684\u662f\u8be5\u5143\u7d20\u7684pivot\u8ddd\u79bbanchor\u6709\u591a\u8fdc\u3002\u5f53pivot\u548canchor\u91cd\u5408\u65f6\uff0cpos x y\u6c38\u8fdc\u4e3a0.</p> <p>\u5728\u8c03UI\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u76f4\u63a5\u53bb\u6539POS X Y\u7684\u503c\uff0c\u5148\u786e\u5b9a\u597danchor\u548cpivot\u7684\u4f4d\u7f6e\uff08\u6700\u597d\u7528\u4e5d\u5bab\u683cRect Tool\uff09\uff0c\u7136\u540e\u6709\u5fc5\u8981\u4e86\u518d\u53bb\u6539POS\uff0c\u5426\u5219\u4e00\u56e2\u7cdf\u3002</p> <p>Destroy(gameObject);                 // Removes the go, all its components and children</p> <p>Destroy(this);                       // Removes this script instance from the game object</p> <p>Destroy(GetComponent());  // Removes the rigidbody from the game object <p>DestroyImmediate();                  // \u5343\u4e07\u4e0d\u8981\u7528\uff0c\u975e\u5e38\u5371\u9669\uff01\uff01\uff01\u53ef\u80fd\u4f1a\u5220\u9664\u4f60\u7684prefab\u548c\u5176\u4ed6asset\uff01</p> <p>PhysX\u7684\u91cd\u529b\u52a0\u901f\u5ea6\u662f\u5e38\u6570\uff0c\u9ed8\u8ba49.81\uff0c\u53ef\u4ee5\u5728\u811a\u672c\u4e2d\u901a\u8fc7Physics.gravity.y\u8bbf\u95ee\uff0c\u4e5f\u53ef\u4ee5\u5728Physics project settings\u4e2d\u8bbe\u7f6e\u3002\u5bf9\u4e8e\u67d0\u4e2a\u7279\u6b8a\u7684scene\u6bd4\u5982\u6708\u7403\u573a\u666f\uff0c\u53ef\u4ee5\u5728loadScene\u65f6\u628aPhysics.gravity\u8bbe\u7f6e\u6210Vector3(0, -4.9f, 0)\uff0c\u5373\u5730\u7403\u7684\u4e00\u534a\uff0c\u4e0d\u8fc7\u8981\u8bb0\u5f97\u6362\u573a\u666f\u65f6\u8bbe\u56de-9.81f\u3002</p> <p>\u5b9e\u73b0\u4e00\u4e2a\u7269\u4f53\u5728\u4e24\u70b9\u4e4b\u95f4\u6765\u56debounce\uff0c\u6709\u51e0\u79cd\u65b9\u6cd5\u3002\u9996\u5148\u662fMathf.PingPong\uff0c\u50cf\u4e52\u4e53\u7403\u4e00\u6837\u53cd\u5f39\uff0c\u7136\u540e\u8fd8\u53ef\u4ee5\u7528\u4e24\u4e2a\u65b9\u5411\u76f8\u53cd\u7684lerp\u65cf\u51fd\u6570\uff0c\u4f7f\u5f97\u53cd\u5f39\u5e73\u6ed1\uff0c\u518d\u6709\u5c31\u662f\u5229\u7528\u4e09\u89d2\u51fd\u6570sin,cos\uff0c\u5229\u7528sine wave\u81ea\u7136\u7684\u5e73\u6ed1\u6027\u8d28\uff0c\u5e76\u4e14\u53ef\u4ee5\u81ea\u5df1\u8c03\u8282wave\u7684\u5f62\u72b6\u548c\u9891\u7387\u53c2\u6570\uff0c\u5b9e\u73b0\u5404\u79cd\u6548\u679c\u3002\u4f46\u6700\u76f4\u89c2\u6700\u5e73\u6ed1\u7684\u529e\u6cd5\u662f\u7528animationCurve\uff0c\u5728\u811a\u672c\u91cc\u52a0\u4e00\u4e2aanimationCurve\u7684serializeField\uff0c\u7136\u540e\u5728inspector\u91cc\u62d6\u52a8\u6210\u60f3\u8981\u7684\u66f2\u7ebf\u5f62\u72b6\uff0c\u4ee3\u7801\u5728update\u4e2d\u53ef\u4ee5\u901a\u8fc7animationCurve.Evaluate(Time.time)\u6765\u5b9e\u65f6\u83b7\u53d6\u8be5\u66f2\u7ebf\u5f53\u524d\u7684float value\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u4f55\u5f62\u5f0f\u7684\u66f2\u7ebf\u6548\u679c\u3002</p> <p>vanilla version, code smell, boilerplate code vs template, overhead...</p> <p>Unity\u4e0d\u652f\u6301\u591a\u7ebf\u7a0b\uff0c\u4f60\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u7eafC#\u811a\u672c\u91cc\u7528\u591a\u7ebf\u7a0b\uff0c\u4f46\u4e0d\u80fd\u5728monobehavior class\u91cc\u7528\u591a\u7ebf\u7a0b\uff0c\u56e0\u4e3a\u591a\u7ebf\u7a0b\u811a\u672c\u662f\u65e0\u6cd5\u8bbf\u95ee\u4efb\u4f55Unity\u7684API\u7684\uff08\u56e0\u4e3aUnity\u7684API\u5e76\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff09\u3002\u540c\u65f6\uff0c\u5728\u4f60\u7684\u7eafC#\u811a\u672c\u91cc\uff0c\u4e5f\u8981\u5c0f\u5fc3\u4fdd\u8bc1\u7528\u5230\u7684\u90fd\u662f.net\u7684\u7ebf\u7a0b\u5b89\u5168\u7684\u51fd\u6570\u3002\u8fd9\u662f\u4e0d\u662f\u4ee3\u8868Unity\u5f88\u6ca1\u6709\u6548\u7387\uff1f\u4e0d\u662f\uff1a</p> <p>Unity\u7684\u5185\u90e8\u8fd8\u662f\u6709\u5f88\u591a\u5730\u65b9\u7528\u5230\u591a\u7ebf\u7a0b\u7684\uff0c\u6bd4\u5982scheduling\uff0cjob system\uff0caudio\uff0c\u7f51\u7edc\u901a\u8baf\uff0cmesh skinner\u7b49\u7b49\uff0c\u53ea\u4e0d\u8fc7Unity\u4e0d\u5141\u8bb8\u5f00\u53d1\u8005\u5728\u4e0eMono\u76f8\u5173\u7684game-level\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u591a\u7ebf\u7a0b\uff0c\u8fd9\u662f\u4e3a\u4e86\u4fdd\u8bc1Unity\u5185\u90e8\u7684\u591a\u7ebf\u7a0b\u72b6\u6001\u7a33\u5b9a\u3002\u4f46\u6211\u4eec\u5176\u5b9e\u8fd8\u662f\u53ef\u4ee5\u5728\u7eafC#\u811a\u672c\u4e2d\u4f7f\u7528\u591a\u7ebf\u7a0b\uff0c\u6bd4\u5982\u53ef\u4ee5\u7528\u6765\u8dd1\u540e\u53f0\u7684\u6279\u5904\u7406\u4ec0\u4e48\u7684\u3002\u5b9e\u9645\u4e2d\u6700\u5e38\u89c1\u7684\u7528\u4f8b\u662f\uff1a\u5904\u7406\u6587\u4ef6IO\u8bfb\u5199\uff0c\u5904\u7406\u7f51\u7edc\u901a\u8baf\uff0c\u8ba1\u7b97pathfinding\u7b49\u7b49\u8fd9\u4e9b\u548cmono\u72ec\u7acb\u7684\u90e8\u5206\u3002\u8fd9\u4e9b\u529f\u80fd\u5982\u679c\u8981\u5b9e\u73b0\u7684\u8bdd\uff0c\u5b8c\u5168\u4e0d\u9700\u8981\u548cUnity\u6302\u94a9\uff0c\u800c\u662f\u5e94\u8be5\u505a\u6210\u5355\u72ec\u7684\u6a21\u5757\uff0c\u5728\u666e\u901a\u7684.net solution\u91cc\u5f00\u53d1\u548c\u6d4b\u8bd5\u597d\uff0c\u518d\u76f4\u63a5\u63d0\u4f9b\u6570\u636e\u7ed9Unity\u4f7f\u7528\u3002</p> <p>\u9664\u4e86\u8fd9\u4e9b\u6bd4\u8f83\u91cd\u5927\u7684\u6a21\u5757\u4e4b\u5916\uff0c\u6211\u4eec\u5728\u5f00\u53d1\u65f6\u6700\u53ef\u80fd\u4f1a\u7528\u5230\u591a\u7ebf\u7a0b\u7684\u5730\u65b9\uff0c\u5c31\u662fUnity\u81ea\u5e26\u7684Job System\uff0c\u5177\u4f53\u53c2\u8003\u6587\u6863\u3002\u8fd9\u662f\u552f\u4e00\u4e00\u4e2a\u6211\u4eec\u53ef\u4ee5\u6309\u7167Unity\u89c4\u8303\u6765\u5b89\u5168\u7684\u4f7f\u7528\u591a\u7ebf\u7a0b\u7684\u5730\u65b9\uff0c\u4f46\u5176\u5b9e\u7528\u7684\u8fd8\u662fUnity\u7684API\uff0c\u591a\u7ebf\u7a0b\u662f\u53d1\u751f\u5728\u5e95\u5c42\u7684\uff0cUnity\u81ea\u52a8\u5e2e\u6211\u4eec\u5904\u7406\u5e76\u53d1\u95ee\u9898\uff0c\u6211\u4eec\u53ea\u8981\u4f1aschedule job\u5c31\u597d\u4e86\u3002\u6ce8\u610f\u522bschedule\u592a\u591a\u3002</p> <p>https://docs.unity3d.com/Manual/JobSystem.html</p> <p>\u8981\u6ce8\u610f\u4e00\u70b9\uff0cUnity\u81ea\u5e26\u7684coroutine\u548c\u591a\u7ebf\u7a0b\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u53ea\u662f\u8ba9\u4f60\u4ea7\u751f\u597d\u50cf\u662f\u591a\u7ebf\u7a0b\u7684\u9519\u89c9\u800c\u5df2\uff0c\u672c\u8d28\u8fd8\u662f\u5728\u4e00\u4e2acore\u4e0a\u8fd0\u884c\u7684\uff0c\u7531CPU\u8c03\u5ea6\u8ba1\u5212\u4ee5interleaved\u7684\u65b9\u5f0f\u6267\u884c\u4ee3\u7801\uff0c\u800c\u5e76\u6ca1\u6709\u6d89\u53ca\u5230\u4efb\u4f55\u7ebf\u7a0b\u4e4b\u95f4\u7684context switching\uff08\u4e0a\u4e0b\u6587\u5207\u6362\u5f88expensive\uff09\uff0c\u6240\u4ee5\u624d\u5f88light-weight\u3002</p> <p>\u5bf9\u8c61\u6c60\u7684\u6c60\u5b50\u7528Dictionary+queue\u7684\u6570\u636e\u7ed3\u6784\u6765\u5b58\u50a8\uff0c\u53ef\u4ee5\u63d0\u9ad8\u67e5\u627e\u6027\u80fd\uff0c\u6bd4\u5982\u9884\u751f\u6210150\u4e2a\u5b50\u5f39+200\u5757\u77f3\u5934\uff0c\u90a3\u4e48Dictionary\u5c31\u6709\u4e24\u4e2a\u952e\u503c\u5bf9\uff0c{'\u5b50\u5f39':queue()}, {'\u77f3\u5934':queue()}\uff0ckey\u662f\u67d0\u7c7bgo\u7684tag\u5b57\u7b26\u4e32\uff0cvalue\u662f\u5b58\u50a8\u8be5\u7c7bgo\u7684\u4e00\u4e2a\u961f\u5217\u3002\u8fd9\u6837\u8bbe\u8ba1\uff0c\u6bcf\u6b21fetch\u7684\u65f6\u5019\u4f20\u5165\u4e00\u4e2atag\uff0c\u5c31\u4e0d\u9700\u8981\u904d\u5386\u6570\u7ec4\u4e86\uff0c\u76f4\u63a5O(1)\u65f6\u95f4\u627e\u5230\u8be5\u7c7btag\u6240\u5bf9\u5e94\u7684queue\uff0c\u7136\u540e\u4e5f\u4e0d\u9700\u8981\u904d\u5386queue\uff0c\u76f4\u63a5Dequeue()\u5f39\u51fa\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u5373\u53ef\uff0c\u5c06\u5176\u8bbe\u4e3aactive\uff0c\u518d\u91cd\u65b0Enqueue()\u5165\u961f\u5230\u6700\u540e\u3002\u5982\u6b64\u4e00\u6765\uff0c\u6bcf\u6b21fetch\u90fd\u53ea\u7528O(1)\u7684\u65f6\u95f4\u6765\u5b8c\u6210\uff0c\u6700\u6548\u7387\u3002\u4e4b\u524d\u6211\u7528\u7684\u662farray\u6570\u7ec4\uff0c\u6bcf\u6b21\u8981\u904d\u5386\u624d\u80fd\u627e\u5230\u4e00\u4e2ainactive\u7684\u5bf9\u8c61\uff0c\u8fd4\u56de\u5b83\u518d\u5c06\u5b83\u8bbe\u6210active\uff0c\u5f88\u6162\uff0c\u800c\u4e14\u4e00\u65e6\u6570\u7ec4\u7684\u5bf9\u8c61\u5168\u90e8\u7528\u5149\u4e86\uff0c\u6240\u6709\u5bf9\u8c61\u90fd\u662factive\u7684\uff0c\u90a3\u4e48\u5c31fetch\u4e0d\u5230\u4e86\u3002\u800c\u5229\u7528queue\u7684\u60f3\u6cd5\u662f\uff0c\u6bcf\u6b21\u76f4\u63a5\u5f39\u51fa\u7b2c\u4e00\u4e2a\uff0c\u4e0d\u7ba1\u5b83\u662f\u4e0d\u662factive\uff0c\u90fd\u8bbe\u6210active\uff0c\u518d\u9a6c\u4e0a\u91cd\u65b0\u5165\u961f\u5230\u6700\u540e\uff0c\u7136\u540e\u76f4\u63a5\u4f7f\u7528\u5b83\u7684reference\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u51fa\u73b0\u6c60\u5b50\u88ab\u7528\u5149\u7684\u60c5\u51b5\uff0c\u54ea\u6015queue\u91cc\u6240\u6709\u5bf9\u8c61\u90fd\u662factive\u4e86\uff0cfetch\u4e5f\u4f1a\u5f39\u51fa\u7b2c\u4e00\u4e2a\uff08\u4e5f\u5c31\u662f\u6700\u8001\u7684\u6700\u65e9\u88abactive\u7684\u90a3\u4e2a\uff09\uff0c\u7136\u540e\u53bb\u590d\u7528\u5b83\uff0c\u5982\u6b64\u4e0d\u65ad\u5faa\u73af\u3002\u5f53\u7136\u5176\u5b9e\u8fd9\u4e0d\u4f1a\u51fa\u73b0\uff0c\u56e0\u4e3a\u5728\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u8981\u9884\u4f30\u597d\u7528\u91cf\uff0c\u4fdd\u8bc1\u9884\u751f\u6210\u7684\u6c60\u5b50\u8db3\u591f\u7528\uff0c\u540c\u65f6\u8fd8\u8981\u5728\u8be5\u5bf9\u8c61\u7684prefab\u4e0a\u6302\u597d\u811a\u672c\u5904\u7406OnEnable\u7684\u903b\u8f91\uff0c\u4fdd\u8bc1\u5bf9\u8c61\u5728\u88abactive\u540e\uff0c\u8fc7\u51e0\u79d2\u9a6c\u4e0a\u5c31\u4f1ainactive\u56de\u6536\uff0c\u800cfetch\u662f\u7531Input\u89e6\u53d1\u7684\uff0c\u54ea\u6015\u662fnegev\u8fde\u53d1\u6bcf\u79d2\u4e5f\u6700\u591a\u51e0\u5341\u6b21\uff0cfetch\u7684\u901f\u5ea6\u5e94\u8be5\u662f\u8ddf\u4e0d\u4e0a\u56de\u6536\u7684\u901f\u5ea6\u7684\u3002</p> <p>ObjectPool\u7684\u811a\u672c\u8981\u6302\u8f7d\u5728\u67aa\u3001\u9b54\u6756\u6216\u5176\u4ed6\u6b66\u5668\u7684\u53d1\u5c04\u53e3\u4e0a\uff0c\u8fd9\u6837\u751f\u6210\u7684\u5b50\u5f39\u7684parent\u76f4\u63a5\u5c31\u662f\u6b66\u5668\u672c\u8eab\uff0c\u4e14position\u548crotation\u76f4\u63a5\u5c31\u662fparent\u7684\u503c\uff0c\u4e0d\u7528\u518d\u53bb\u505a\u8fd0\u7b97\uff0c\u7136\u540e\u76f4\u63a5\u7ed9\u5b50\u5f39ammo\u7684\u521a\u4f53\u52a0\u4e00\u4e2a\u521d\u901f\u5ea6\uff0c\u6700\u540e\u518dstart\u4e00\u4e2acoroutine\u53bb\u5728\u51e0\u79d2\u540e\u56de\u6536\u5b83\u3002</p> <p>\u5bf9\u8c61\u6c60\u7684\u8bbe\u7f6e\uff0c\u6bcf\u4e2aprefab\u751f\u6210\u591a\u5c11\u4e2aamount\uff0c\u8fd9\u4e2a\u662f\u8981\u6839\u636e\u4e0d\u540c\u7684\u5bf9\u8c61\u53bbfine tune\u7684\uff0c\u8981\u5728\u6e38\u620f\u4e2d\u5177\u4f53\u6d4b\u8bd5\u4e0b\uff0c\u624d\u80fd\u627e\u5230\u6700\u4f18\u7684amount\uff0c\u6b63\u597d\u591f\u7528\u53c8\u6ca1\u6709\u6d6a\u8d39\u3002\u5177\u4f53\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u7528\u6700\u5927\u901f\u5ea6\u8fde\u53d1\uff0c\u7136\u540e\u76ef\u7740Hierarchy\u7a97\u53e3\uff0c\u5982\u679c\u53d1\u73b0\u5bf9\u8c61\u5168\u90fdactive\uff0c\u8bf4\u660e\u6570\u91cf\u4e0d\u591f\uff0c\u5982\u679c\u6700\u540e\u51e0\u4e2a\u5bf9\u8c61\u59cb\u7ec8\u662fgreyed out\u7684\uff0c\u90a3\u4e48\u5c31\u591f\u7528\u4e86\u3002</p> <p>\u6211\u7684\u5bf9\u8c61\u6c60\u662f\u901a\u7528\u7684\uff0c\u53ea\u7ba1\u9884\u751f\u6210object\uff0c\u5e76\u5728\u88abfetch\u7684\u65f6\u5019active\u4e00\u4e2a\u8fd4\u56de\u7ed9caller\uff0c\u800c\u4e0d\u9700\u8981\u53bb\u5173\u5fc3caller\u62ff\u5230\u5bf9\u8c61\u540e\u53bb\u505a\u4ec0\u4e48\u3002\u5bf9\u8c61\u59cb\u7ec8\u90fd\u5728\u6c60\u5b50\u91cc\uff0c\u53ea\u4e0d\u8fc7active\u72b6\u6001\u4f1a\u53d8\u800c\u5df2\u3002\u5bf9\u8c61\u672c\u8eab\u7684\u811a\u672c\uff0c\u8d1f\u8d23\u5b9e\u73b0\u5404\u79cd\u65b9\u6cd5\u4ee5\u53ca\u4f55\u65f6\u56de\u6536\uff0c\u800ccaller\u5219\u662f\u8d1f\u8d23\u4f55\u65f6\u53bb\u8c03\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002\u5bf9\u8c61\u6c60\u81ea\u5df1\u5e76\u4e0d\u5173\u5fc3\u8fd9\u4e9b\uff0c\u5b83\u5047\u5b9acaller\u548c\u5bf9\u8c61\u81ea\u5df1\u4f1a\u5904\u7406\u597d\u4e00\u5207\uff0c\u5728\u77ed\u65f6\u95f4\u5185\u4e00\u5b9a\u4f1a\u56de\u5230inactive\u7684\u72b6\u6001\u3002\u5982\u679c\u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u4e0d\u4f1a\u662f\u6c60\u5b50\u7684\u95ee\u9898\uff0c\u8981\u4e48\u662fcaller\u548c\u5bf9\u8c61\u81ea\u5df1\u7684class\u6ca1\u5904\u7406\u597d\uff0c\u8981\u4e48\u662f\u751f\u6210\u6c60\u5b50\u7684\u65f6\u5019amount\u592a\u5c0f\u6570\u91cf\u4e0d\u591f\u3002</p> <p>\u53ef\u4ee5\u7ed9\u6bcf\u4e2a\u81ea\u5df1\u5199\u7684\u811a\u672c\uff0c\u751a\u81f3\u6bcf\u4e2agameobject\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u7684icon\u56fe\u6807\uff0c\u8fd9\u4e2a\u5f88\u6709\u610f\u601d\uff0c\u53ef\u4ee5\u65b9\u4fbf\u6211\u4eec\u8fa8\u522b\u4e0d\u540c\u7684\u811a\u672c\u3002</p> <p>https://forum.unity.com/threads/gamemanager-cs-icon.539596/</p> <p>\u5982\u4f55\u5728\u4e00\u4e2a\u811a\u672c\u91cc\u8c03\u7528\u53e6\u4e00\u4e2a\u811a\u672c\u7684\u65b9\u6cd5\uff1f\u6bd4\u5982player\u6709\u4e00\u4e2aTakeDamage\u7684\u65b9\u6cd5\uff0c\u800c\u6e38\u620f\u4e2d\u5f88\u591a\u5176\u4ed6\u7269\u4f53\u90fd\u53ef\u80fdcall\u5b83\uff0c\u4e0d\u5149\u662fenemy\u8fd8\u6709\u5730\u5f62\u6548\u679c\u548cbuff\u548citem\u6548\u679c\u7b49\u7b49\u3002\u6700\u76f4\u63a5\u7684\u529e\u6cd5\u662f\u5728\u6bcf\u4e2a\u53ef\u80fd\u4f1a\u662fcaller\u7684\u811a\u672c\u91cc\uff0c\u8bbe\u7f6e\u4e00\u4e2aSerializeField\u53d8\u91cf\u6765\u62d6\u62fd\u5b58\u50a8player\u7684go\uff0c\u8fd9\u6837\u5c31\u80fd\u5229\u7528\u8fd9\u4e2a\u53d8\u91cf\u76f4\u63a5call\uff0c\u4f46\u662f\u5982\u679ccall\u7684\u5730\u65b9\u592a\u591a\u4e86\u5462\uff1f\u6bd4\u5982TakeDamage\u975e\u5e38\u901a\u7528\uff0c\u5230\u5904\u90fd\u5728call\u5b83\uff0c\u6bcf\u6b21\u90fd\u8fd9\u6837\u8bbe\u53d8\u91cf\u5728\u7f16\u8f91\u5668\u91cc\u62d6\u62fd\uff0c\u53c8\u9ebb\u70e6\u53c8\u6742\u4e71\uff0c\u8bbe\u8ba1\u5f88\u7cdf\u7cd5\uff0c\u90a3\u600e\u4e48\u529e\uff1f</p> <p>UnityEvents\u662f\u7528\u6765\u5b58\u653e\u4e00\u5806functions\u7684\u5bb9\u5668\uff0c\u5728editor\u4e2d\u53ef\u4ee5\u62d6\u62fd\u4e0d\u540c\u7684function\u8fdb\u53bb\uff0c\u544a\u8bc9\u67d0\u4e2a\u811a\u672c\u8981\u6267\u884c\u54ea\u4e9bevent\uff0c\u663e\u7136\u4e0d\u662f\u7528\u6765\u5e72\u8fd9\u4e2a\u7684\u3002</p> <p>SendMessage\u5df2\u7ecf\u4e0d\u9002\u5408\u73b0\u5728\u7684\u7248\u672c\u4e86\uff0c\u4e0d\u8981\u4f7f\u7528\uff0c\u6027\u80fd\u6162\u4e14design\u5f88\u5dee\uff0cBroadcastMessage\u4e5f\u662f\u540c\u7406\u3002\u9664\u975e\uff1f\u753b\u9762\u5de6\u4e0a\u89d2\u505a\u4e00\u4e2a\u6e38\u620f\u5185\u7684console\uff0c\u53ef\u4ee5\u8f93\u5165console\u547d\u4ee4\u505a\u8bbe\u7f6e\uff1f\u53ef\u80fd\u9700\u8981\u7528\u5230SendMessage\uff1f</p> <p>\u90a3\u5c31\u53ea\u80fdGetComponent\u4e86\uff0c\u4f46\u662f\u4e00\u5b9a\u8981\u6bcf\u6b21\u90fd\u8fd9\u6837\u505a\u5417\uff1f\u6709\u6ca1\u6709\u66f4\u597d\u7684\u529e\u6cd5\uff1f</p> <p>\u60f3\u4e86\u4e0b\uff0c\u5e94\u8be5\u662f\u6ca1\u6709\u7684\u3002\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60call\u7684\u90a3\u4e2a\u65b9\u6cd5\u5982\u679c\u4e0d\u662fstatic\u7684\u8bdd\uff0c\u5fc5\u7136\u662f\u5728\u67d0\u4e2a\u5df2\u7ecf\u751f\u6210\u7684class instance\u4e0acall\u7684\uff0c\u6240\u4ee5\u65e0\u8bba\u5982\u4f55\u90fd\u9700\u8981\u6709\u4e00\u4e2a\u8be5instance\uff08\u5728Unity\u4e2d\u4e5f\u5c31\u76f8\u5f53\u4e8eplayer go\uff09\u7684reference\uff0c\u5982\u679c\u4e0d\u62d6\u62fdhook up\u4e0a\uff0c\u90a3\u5c31\u53ea\u80fd\u7528findWithTag\u8fd9\u79cd\u66f4\u6162\u7684\u529e\u6cd5\u4e86\u3002\u5982\u679c\u4f60\u60f3\u628a\u90a3\u4e2a\u65b9\u6cd5wrap\u5c01\u88c5\u4e00\u4e0b\uff0c\u5728\u522b\u7684\u5730\u65b9\u968f\u610fcall\uff0c\u4e5f\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u80fd\u968f\u610fcall\u7684\u53ea\u6709class\u7684static\u65b9\u6cd5\uff0c\u5bf9\u4e8e\u975estatic\u65b9\u6cd5\uff0c\u662f\u4e0d\u80fd\u628a\u5b83\u5c01\u88c5\u6210\u4e3astatic\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u60f3\u8981\u6709universal\u7684\u8c03\u7528\u65b9\u5f0f\uff0c\u90a3\u4e48\u5fc5\u987b\u662f\u9488\u5bf9static\u65b9\u6cd5\uff0c\u800c\u4f9d\u8d56\u4e8e\u67d0\u4e2ago\u6216instance\u7684\u65b9\u6cd5\u662f\u65e0\u8bba\u5982\u4f55\u4e5f\u505a\u4e0d\u6210universal\u7684\u3002\u8bd5\u60f3\u4e00\u4e0b\uff0c\u5728playerManager\u91cc\uff0cplayerController\u5df2\u7ecf\u88ab\u6210\u529f\u7684hook\u4e0a\u4e86\uff0c\u4f60\u60f3\u4e00\u52b3\u6c38\u9038\uff0c\u5199\u4e2a\u65b9\u6cd5PlayerTakeDamage()\uff0c\u5728\u91cc\u9762\u53bb\u64cd\u4f5c\u5728playerController\uff0c\u7136\u540e\u60f3\u8ba9\u5916\u9762\u80fd\u968f\u610fcall\u5b83\u800c\u4e0d\u7528\u91cd\u590dhook playerController\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u8981\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\u7684\u8bdd\uff0cPlayerTakeDamage()\u5fc5\u987b\u662fstatic\u7684\uff0c\u800c\u4e00\u4e2astatic\u51fd\u6570\u4f53\u5185\uff0c\u662f\u4e0d\u80fdaccess\u975estatic\u7684\u4e1c\u897f\u7684\uff0c\u6240\u4ee5\u77db\u76fe\u3002\u6362\u4e2a\u89d2\u5ea6\u60f3\uff0c\u8fd9\u6837\u7684\u8bbe\u8ba1\u5176\u5b9e\u5e76\u4e0d\u7cdf\u7cd5\uff0c\u6216\u8005\u8bf4\u8fd9\u6837\u624d\u5bf9\uff0c\u56e0\u4e3a\u5728\u4efb\u4f55\u4e00\u4e2a\u4f1adeal damage\u7684go\u4e0a\uff0c\u90fd\u5e94\u8be5\u663e\u5f0f\u7684\u6709\u4e00\u4e2adamage receiver\uff0c\u624d\u7b26\u5408\u903b\u8f91\u3002</p> <p>\u53cd\u6b63\u662f\u5355\u673a\u6e38\u620f\uff0c\u53ea\u6709\u4e00\u4e2aplayer\uff0c\u7528singleton\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u800c\u4e14playerStatus\u53ea\u7ba1\u7406\u73a9\u5bb6\u6570\u636e\u800c\u5df2\u3002\u6216\u8005\u5e72\u8106\u5c31\u7528\u4e00\u4e2astatic class\u7b97\u4e86\uff0c\u4f46\u662f\u90a3\u6837\u7684\u8bdd\u6ca1\u6cd5save\u548cload\uff0c\u4e0d\u9002\u5408\u5e8f\u5217\u5316\u3002\u8fd9\u4e2a\u8bbe\u8ba1\u7684\u95ee\u9898\uff0c\u89e3\u51b3\u65b9\u6848\u4e0d\u4ec5\u8981\u8003\u8651\u5230player\u6570\u636e\u53ef\u4ee5\u5355\u4f8b\u7684\u5168\u5c40\u8bbf\u95ee\uff0c\u8fd8\u8981\u8003\u8651\u5230\u600e\u4e48\u5e8f\u5217\u5316save load\uff0c\u600e\u4e48persist between scenes\u3002</p> <p>ScriptableObject\u4e5f\u662fglobal access\u7684\uff0c\u53ef\u4ee5\u662fsingleton\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u66ff\u4ee3\u3002</p> <p>GetComponent()\u662fgeneric\u6cdb\u578b\u7684\u7248\u672c\uff0c\u8fd4\u56de\u7684\u76f4\u63a5\u5c31\u662f\u8be5\u6cdb\u578bT(\u5c31\u662f\u67d0\u4e2aclass\u7684\u7c7b\u578b\uff0c\u6bd4\u5982\u67d0\u4e2ascript\u7684class\u540d\u5b57)\uff0c\u7136\u540e\u53ef\u4ee5\u76f4\u63a5\u64cd\u4f5c\u8c03\u65b9\u6cd5\u4e86\u3002 <p>GetComponent(typeof(someType))\u8fd4\u56de\u7684\u662fcomponent\uff0c\u7528\u4e8e\u83b7\u53d6\u67d0\u4e2acomponent\u3002\u901a\u5e38\u6211\u4eec\u662f\u8981\u5bf9someType\u7684\u65b9\u6cd5\u8fdb\u884c\u64cd\u4f5c\uff0c\u6240\u4ee5\u7528\u4e4b\u524d\u8fd8\u9700\u8981\u5148cast\u4e00\u4e0b\uff1a(someType) GetComponent(typeof(someType))\u3002\u663e\u7136\uff0c\u7528generic\u7684\u7248\u672c\u66f4\u52a0\u4fbf\u6377\u3002</p> <p>if (x &gt; 10) { _animator.setBool('Walk', true)}  // don't write like this</p> <p>_animator.setBool('Walk', x &gt; 10)  // nice one</p> <p>Vector3? point = ...  // type\u540e\u9762\u7684\u95ee\u53f7\u4ee3\u8868\u8fd9\u4e2a\u53d8\u91cf\u53ef\u80fd\u662f\u8be5type\uff0c\u4e5f\u53ef\u80fd\u662fnullable type</p> <p>TextMeshPro\u7684text\u4e0d\u8981\u76f4\u63a5\u4fee\u6539\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u7ed9text\u8d4b\u503c\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2aupdate\u90fd\u8981\u4ea7\u751f\u5f85GC\u7684\u5783\u573e\uff0c\u5176\u4ed6UI text\u4e5f\u662f\u540c\u7406\u3002\u7528TextMeshPro.SetText()\u65b9\u6cd5\u53ef\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5783\u573e\uff0c\u8be5\u51fd\u6570\u6709\u591a\u4e2a\u7248\u672c\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u4f7f\u7528StringBuilder\u4f5c\u4e3a\u53c2\u6570\u3002\u5bf9\u4e8eTimer\u8fd9\u79cd\u4e3b\u8981\u662f\u6570\u5b57\u7684text\uff0c\u6700\u5e95\u5c42\u7684garbage-free\u7684\u529e\u6cd5\u662f\u7528TextMeshPro.SetCharArray()\u65b9\u6cd5\uff0c\u4f20\u5165\u4e00\u4e2achar\u6570\u7ec4\uff0c\u4f46\u8981\u624b\u5de5update\u6bcf\u4e2achar\uff0c\u6709\u70b9\u9ebb\u70e6\u3002\u4e8b\u5b9e\u4e0a\u4e0d\u7528\u9ebb\u70e6\uff0c\u5c31\u7528SetText\u5c31\u53ef\u4ee5\u4e86\uff0c\u770b\u4e86\u4e0b\u6e90\u7801\uff0cSetText\u91cc\u9762\u5c31\u662f\u7528\u7684SetCharArray\uff0c\u5185\u90e8\u6709\u4e00\u4e2a\u552f\u4e00\u7684char\u6570\u7ec4\uff0c\u6bcf\u6b21\u53ea\u4f1a\u66f4\u65b0\u53d8\u52a8\u7684char\uff0c\u4e0d\u8fc7\u8981\u4fdd\u8bc1\u7528\u7684\u662f\u5e26arg\u7684\u7248\u672c\uff0cSetText(string text, float arg0, float arg1, ...)\uff0c\u800c\u4e0d\u662fSetText(string text, bool syncTextInputBox = true)\u8fd9\u4e2a\u4f1a\u4ea7\u751f\u5783\u573e\u7684\u7248\u672c\u3002</p> <p>Time.fixedDeltaTime\u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u548c\u6e38\u620fFPS\u65e0\u5173\uff0c\u53ef\u4ee5\u5728project settings\u91cc\u9762\u8bbe\u5b9a\uff0c\u9ed8\u8ba4\u662f0.02f\u3002Time.fixedDeltaTime\u5e76\u4e0d\u662f\u4e24\u4e2aFixedUpdate call\u4e4b\u95f4\u7684\u95f4\u9694\u65f6\u95f4\uff0c\u8fd9\u70b9\u975e\u5e38\u5bb9\u6613\u641e\u9519\uff0c\u4e0d\u7ba1\u662fUpdate\u8fd8\u662fFixedUpdate\uff0c\u95f4\u9694\u65f6\u95f4\u90fd\u662fTime.deltatime\u3002</p> <p>\u8fd8\u6709\u4e2a\u5f88\u5927\u7684\u8bef\u533a\u662f\u4ee5\u4e3aFixedUpdate is called at fixed time steps\uff0c\u56e0\u4e3a\u5b83\u540d\u5b57\u91cc\u6709\u4e2afixed\uff0c\u7136\u800c\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\uff0c\u8fd9\u4e2afixed\u4e0e\u73b0\u5b9e\u4e16\u754c\u7684\u65f6\u95f4\u6ca1\u4efb\u4f55\u5173\u7cfb\uff0c\u5e76\u4e0d\u662f\u6bcf\u9694fixed\u65f6\u95f4\u95f4\u9694\u5c31\u4f1a\u88abcall\u7684\uff0c\u5177\u4f53\u7684\u9891\u7387\u7531Unity\u51b3\u5b9a\u3002FixedUpdate\u53ea\u7528\u4e8esimulate Physics\uff0c\u4e0d\u8981\u628a\u5176\u4ed6\u7684\u6bcfx\u79d2\u66f4\u65b0\u7684\u903b\u8f91\u653e\u5728FixedUpdate\u91cc\uff0c\u4e0d\u8981\u5728FixedUpdate\u4e2d\u4f7f\u7528\u4efb\u4f55\u975ePhysics\u7684\u4ee3\u7801\u3002</p> <p>MonoBehavior\u662f\u4e2a\u7c7b\uff0c\u4f46\u9996\u5148\u662f\u4e2aBehavior\uff0c\u662f\u63a7\u5236go\u5728unity\u4e2d\u5982\u4f55behave\u7684\u7c7b\uff0c\u6211\u4eec\u901a\u8fc7inherit\u5b83\u6765\u5199\u81ea\u5df1\u7684behavior\uff0c\u8fd9\u4e9bbehavior\u662f\u901a\u8fc7component\u7684\u5f62\u5f0f\u6765\u5b9e\u73b0\u7684\uff0c\u7136\u540e\u7528component\u6765\u64cd\u7eb5\u6e38\u620f\u4e2d\u7684go\u3002\u6240\u4ee5\u53ef\u4ee5\u8bf4\uff0c\u6211\u4eec\u4e3b\u8981\u662f\u9762\u5411component\u7f16\u7a0b\u7684\uff0ccomponent\u662fUnity\u6e38\u620f\u4e3b\u8981\u7684\u67b6\u6784\u6a21\u5f0f\uff0ccomponent\u603b\u662f\u548cgo\u7d27\u5bc6\u5173\u8054\u5728\u4e00\u8d77\u3002\u95ee\u9898\u5728\u4e8e\uff0c\u5927\u91cf\u7684go\u548ccomponent\u5728\u5207\u6362\u573a\u666f\u7684\u65f6\u5019\uff0c\u91cd\u65b0load\u7684\u65f6\u5019\uff0c\u662f\u8981\u88abdestroy\u7684\uff0c\u975e\u5e38\u7684\u96f6\u6563\uff0c\u800c\u4e14\u65e0\u6cd5persist across scenes\u3002\u6240\u4ee5\u5728\u5927\u5c40\u89c2\u4e0a\uff0cMonoBehavior\u5e76\u4e0d\u662f\u7528\u6765\u5b58\u653e\u6570\u636e\u7684\u5730\u65b9\uff0c\u53ea\u5b9a\u4e49\u6211\u4eec\u7684\u884c\u4e3a\u3002</p> <p>ScriptableObject\u867d\u7136\u4e5f\u662f\u7ee7\u627fmono\u7684\uff0c\u4f46\u5b83\u4e0d\u4e0e\u4efb\u4f55\u7684go\u6216component\u6216prefab\u5173\u8054\uff0c\u81ea\u5e26\u5e8f\u5217\u5316\u529f\u80fd\uff0c\u9002\u5408\u5305\u88c5\u548c\u5b58\u653e\u6570\u636e\uff0c\u5e76\u4e14\u80fdshare across scenes\uff0c\u4e5f\u5f88\u4fbf\u4e8etransfer\u5230\u5176\u4ed6\u9879\u76ee\u3002ScriptableObject\u9002\u5408\u7528\u4e8e\u5b58\u653eplayer\u6216enemy\u7684\u6570\u636e\uff0c\u7136\u540e\u5728mono\u7684\u884c\u4e3a\u811a\u672c\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u53bbreference\u5b83\uff0c\u628a\u6570\u636e\u548c\u884c\u4e3a\u7684\u4ee3\u7801\u5206\u79bb\u3002\u8fd8\u53ef\u4ee5\u7528\u6765\u5b58\u653einventory\u7684\u6570\u636e\u3002\u751a\u81f3\u662f\u6574\u4e2a\u573a\u666f\u7684level data\uff0c\u914d\u5408\u4e0aJsonUtility\u7684\u5e8f\u5217\u5316\u529f\u80fd\u3002\u5230\u65f6\u5019\u770b\u770bsave load\u7528\u8fd9\u4e2a\u600e\u4e48\u6837\u3002</p> <p>LateUpdate() is called after all Update functions have been called but before redrawing the scene\uff0c\u8bb0\u4f4fa follow-camera should always be updated in LateUpdate\uff01\uff01</p> <p>C#\u6709\u81ea\u5e26\u7684Timer\u548cStopwatch\u7c7b\uff0c\u65f6\u95f4\u53ef\u4ee5\u975e\u5e38\u7cbe\u51c6\uff0c\u5f53\u5904\u7406precision critical\u903b\u8f91\u6bd4\u5982\u6570\u636e\u5e93\u548c\u767b\u5f55\u65f6\u95f4\u7684\u65f6\u5019\uff0c\u90fd\u8981\u7528\u8fd9\u4e24\u4e2a\u3002\u4f46\u662f\u5728Unity\u4e2d\uff0c\u8fd8\u662f\u7528\u6211\u81ea\u5df1\u5199\u7684\u90a3\u51e0\u4e2a\u5305\u62eccooldownCounter\u7684\u7c7b\uff0c\u56e0\u4e3a\u6e38\u620f\u91cc\u7684event\u8981\u548cUnity\u7684Time.deltaTime\u7b49\u65f6\u95f4\u6302\u94a9\uff0c\u9700\u8981\u6839\u636etime scale\u548cFPS\u53d8\u5316\u800c\u53d8\u5316\uff0c\u800c\u4e0d\u5e94\u8be5\u53c2\u7167\u7edd\u5bf9\u7684\u7cfb\u7edf\u65f6\u95f4\u3002\u7528C#\u81ea\u5e26\u7684Timer\u7c7b\u7684\u8bdd\uff0c\u662f\u6ca1\u529e\u6cd5\u5904\u7406time scale\u7684\u95ee\u9898\u7684\uff0c\u54ea\u6015\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u8bbe\u7f6e\u6e38\u620f\u7684timeScale\uff0c\u59cb\u7ec8\u7528\u9ed8\u8ba4\u503c\uff0c\u4e5f\u65e0\u6cd5\u4fdd\u8bc1Unity\u7684timeScale\u548c\u7edd\u5bf9\u7684\u7cfb\u7edf\u65f6\u95f4\u662f\u540c\u6b65\u7684\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u8be5timeScale\u548c\u73b0\u5b9e\u4e16\u754c\u7684\u540c\u6b65\u7387\u4e3a1.</p> <p>\u6709\u4e9b\u811a\u672c\u7684\u540d\u5b57\u662fUnity\u4fdd\u7559\u7684\u5173\u952e\u5b57\uff0c\u6bd4\u5982Folder\uff0cAudioclip\uff0cGameManager\uff0cSearch\u4e4b\u7c7b\u7684\uff0c\u5f53\u4f60\u521b\u5efa\u4e00\u4e2a\u540c\u540d\u7684\u811a\u672c\u65f6\uff0cUnity\u4f1a\u81ea\u52a8\u7ed9\u5b83\u4e00\u4e2a\u56fe\u6807\u3002\u8fd9\u5bf9\u6e38\u620f\u672c\u8eab\u6ca1\u4ec0\u4e48\u5f71\u54cd\uff0c\u4f46\u662f\u548cUnity\u81ea\u5e26\u7684\u4fdd\u7559\u7684\u529f\u80fd\u53ef\u80fd\u4f1a\u51b2\u7a81\uff0c\u89e3\u51b3\u529e\u6cd5\u5f88\u7b80\u5355\uff0c\u628a\u4f60\u7684\u811a\u672c\u4ee3\u7801\u7528\u4e00\u4e2anamespace\u5305\u8d77\u6765\uff0c\u53ea\u8981\u4f60\u7528\u7684\u662f\u81ea\u5df1\u7684namespace\uff0c\u800c\u4e0d\u662fglobal\u7684\u5168\u5c40\u7684namespace\uff0c\u5c31\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u4ec0\u4e48\u65f6\u5019\u7528abstract\u7c7b\uff0c\u4ec0\u4e48\u65f6\u5019\u7528interface\uff0c\u7ed3\u5408\u8bbe\u8ba1\u6a21\u5f0f\u53bb\u8003\u8651\u3002</p> <p>\u524d\u8005\u662fis-a\u7684\u5173\u7cfb\uff0c\u540e\u8005\u662fhas-a\u7684\u5173\u7cfb\u3002\u524d\u8005\u662finherit\u7684\u5173\u7cfb\uff0c\u53ef\u4ee5\u7528virtual\u548coverride\uff0c\u540e\u8005\u662fimplement\u7684\u5173\u7cfb\uff0c\u53ef\u4ee5\u63d0\u4f9b\u591a\u4e2a\u89c4\u8303\u3002</p> <p>https://stackoverflow.com/questions/747517/interfaces-vs-abstract-classes</p> <p>https://stackoverflow.com/questions/14728761/difference-between-virtual-and-abstract-methods</p> <p>\u5bf9\u4e8e\u4efb\u4f55member\u5305\u62ecmethod\uff0cproperty\uff0cevent\uff0cindexer\u800c\u8a00\uff0cvirtual\u53ef\u4ee5\u88aboverride\u4e5f\u53ef\u4ee5\u4e0d\u88ab\uff0c\u53ea\u662f\u63d0\u4f9b\u4e86override\u7684option\uff0c\u4f46abstract\u5fc5\u987b\u88ab\u5b50\u7c7bimplement\u3002\u5f53rider\u63d0\u793a\u4f60\u4f60\u7684\u67d0\u4e2amethod\u6216\u8005property hide\u9690\u85cf\u4e86\u4e00\u4e2a\u540c\u7c7b\u7684member\uff0c\u53ef\u4ee5\u7528new\u5173\u952e\u5b57\u6765\u660e\u786e\u6307\u51fa\u4f60\u5e0c\u671bhide\u3002</p> <p>Unity\u7684event function\u6bd4\u5982Awake\u548cUpdate\uff0c\u5728abstract\u7c7b\u4e2d\u8981\u8bbe\u7f6e\u6210protected virtual\uff0c\u8ba9\u5b50\u7c7b\u9009\u62e9\u6027\u7684\u53bboverride\u5b83\uff0cor not\u3002\u800c\u5bf9\u4e8eproperty\uff0c\u901a\u5e38\u8bbe\u7f6e\u4e3aprotected abstract\uff0c\u5f3a\u5236\u5b50\u7c7b\u53bb\u63d0\u4f9b\u5177\u4f53\u5b9e\u73b0\u3002</p> <p>tag\u662f\u7528\u6765\u5904\u7406\u6279\u91cf\u7684go\u7684\uff0c\u5982\u679c\u67d0\u4e2atag\u53ea\u6709\u4e00\u4e2ago\u7528\uff0c\u5c31\u663e\u5f97\u6709\u4e9b\u6ca1\u5fc5\u8981\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd9\u662f\u4e3a\u4e86\u6027\u80fd\uff0c\u56e0\u4e3aFind\u51fd\u6570\uff08\u901a\u8fc7name find\uff09\u975e\u5e38\u6162\uff0c\u4f1a\u641c\u7d22\u5168\u90e8scene\u7684\u6bcf\u4e00\u4e2ago\uff0c\u4f46\u662ffindWithTag\u51fd\u6570\u662f\u4f18\u5316\u8fc7\u7684\uff0cfindGameObjectsWithTag\u4e5f\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u662f\u8fd4\u56de\u6240\u6709\u8be5tag\u7684go\u3002\u4f7f\u7528tag\u65f6\uff0c\u8111\u5b50\u91cc\u5148\u628ago\u5e72\u51c0\u7684\u5206\u597d\u7c7b\uff0c\u60f3\u597dtag\uff0c\u5426\u5219\u540e\u9762\u5f88\u4e71\u4f1a\u5f88\u96be\u6539\u3002\u5982\u679c\u5b9e\u5728\u8981find\u4e00\u4e2ago\uff0c\u6bd4\u5982\u4e8b\u5148\u4e0d\u77e5\u9053\u8be5go\u5728\u54ea\u513f\uff0c\u6216\u662f\u8be5go\u8981\u5728\u6e38\u620f\u4e2d\u540e\u9762\u624d\u4f1a\u751f\u6210\uff0c\u90a3\u4e48findWithTag\u662f\u6700\u4f18\u7684\u9009\u62e9\uff0c\u7136\u800c\uff01\uff01\uff01\u901a\u5e38\u6211\u4eec\u90fd\u77e5\u9053\u8981\u627e\u7684\u662f\u54ea\u4e2ago\uff0c\u6240\u4ee5\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u5728\u811a\u672c\u91ccfind\uff0c\u76f4\u63a5\u5b9a\u4e49\u4e00\u4e2aSerializeField\u53d8\u91cf\uff0c\u63d0\u524d\u5728\u7f16\u8f91\u5668\u4e2d\u62d6\u62fdhook up\u4e0a\u5c31\u884c\u4e86\uff0c\u8fd9\u6837\u6bd4findWithTag\u8fd8\u8981\u5feb\u5f88\u591a\uff0c\u800c\u4e14\u8fd8\u80fd\u51cf\u5c11\u573a\u666f\u52a0\u8f7d\u65f6\u95f4\u3002</p> <p>singleton\u6a21\u5f0f\u8981\u614e\u7528\uff0c\u4e00\u4e2asingleton\u7684instance\u88ab\u521b\u5efa\u4ee5\u540e\uff0c\u56e0\u4e3a\u662f\u5728class\u5185\u88abinstantiate\u7684\uff0c\u6240\u4ee5\u5b83\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5c31\u6c38\u8fdc\u5b58\u5728\u800c\u4e0d\u4f1a\u88abgc\u6389\u3002\u5982\u679c\u6709\u5f88\u591a\u4e2asingleton\uff0c\u5c31\u4f1a\u4e0d\u5fc5\u8981\u7684\u5360\u636e\u56fa\u5b9a\u7684\u5185\u5b58\u3002\u4ec0\u4e48\u65f6\u5019\u7528\u5462\uff1f\u5982\u679c\u4f60\u9700\u8981\u4e00\u4e2aclass\u7684\u5b9e\u4f8b\u6570\u636e\uff0c\u4e14\u8be5instance\u662f\u5728\u6574\u4e2a\u7a0b\u5e8f\u5168\u5c40\u9700\u8981\u88ab\u5171\u4eab\u7684\uff0c\u4e14\u6574\u4e2a\u7a0b\u5e8f\u5168\u5c40\u53ea\u80fd\u6709\u4e00\u4e2a\u8be5\u7c7b\u7684instance\u65f6\uff0c\u53ef\u4ee5\u7528\u3002\u6bd4\u5982\u8bf4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u5168\u5c40\u7684GameManager\uff0c\u662f\u5168\u5c40\u5171\u4eab\u7684\u4e14\u53ea\u80fd\u6709\u4e00\u4e2a\u3002\u518d\u6bd4\u5982\uff0c\u5355\u673a\u6e38\u620f\u53ea\u6709\u4e00\u4e2a\u73a9\u5bb6\uff0c\u4e14\u73a9\u5bb6\u7684\u6570\u636e\u672c\u6765\u5c31\u662f\u8981\u6c38\u8fdc\u5b58\u5728\u7684\uff0c\u4e14\u6e38\u620f\u4e2d\u5404\u79cd\u5730\u65b9\u90fd\u4f1a\u53bb\u8c03\u7528\u73a9\u5bb6\u7684TakeDamage\u65b9\u6cd5\uff0c\u90a3\u4e48\u73a9\u5bb6\u7684class\u5c31\u53ef\u4ee5\u505a\u6210singleton\u3002\u6570\u636e\u5e93\u548c\u670d\u52a1\u5668\u8fd9\u79cd\u5e9e\u5927\u7684\u5bf9\u8c61\uff0c\u867d\u7136\u4e5f\u662f\u5168\u5c40\u5171\u4eab\u7684\u5355\u4f8b\uff0c\u4f46\u5343\u4e07\u4e0d\u8981\u505a\u6210singleton\uff0c\u4f1a\u5f88\u5360\u5185\u5b58\u3002\u800c\u5bf9\u4e8e\u4e0d\u5927\u4e0d\u5c0f\u7684\u5168\u5c40\u5171\u4eab\u5bf9\u8c61\uff0c\u8981\u4e0d\u8981\u505a\u6210singleton\u662f\u770b\u60c5\u51b5\u7684\uff0c\u7528\u4e86\u5219\u4f1a\u5360\u7528\u5185\u5b58\uff0c\u4f46\u51cf\u5c11\u4e86CPU\u8bfb\u5199\u5f00\u9500\uff0c\u4e0d\u7528\u7684\u8bdd\u7701\u5185\u5b58\uff0c\u4f46\u6bcf\u6b21\u8bfb\u5199\u5c31\u4f1a\u66f4\u6d88\u8017CPU\uff0c\u6240\u4ee5\u672c\u8d28\u4e0a\u662f\u4e00\u4e2abalancing act\uff0c\u5728\u5185\u5b58\u548cCPU\u4e2d\u95f4\u627e\u5e73\u8861\u53d6\u820d\uff0c\u5982\u679c\u8bfb\u5199\u5341\u5206\u9891\u7e41\u7684\u8bdd\uff0c\u820d\u5f03\u70b9\u5185\u5b58\u8282\u7701CPU\u6d88\u8017\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\u3002</p> <p>singleton\u53ef\u4ee5persist across scenes\uff0c\u4e0d\u7ba1\u6709\u591a\u5c11\u4e2ascene\uff0c\u90fd\u80fd\u5171\u4eab\u540c\u4e00\u4e2asingleton\u3002</p> <p>\u5728Unity\u4e2d\u4f7f\u7528singleton\uff0c\u8fd8\u8981\u989d\u5916\u6ce8\u610f\uff0c\u56e0\u4e3a\u8981\u7ee7\u627fmonobehavior\u7684\u8bdd\uff0c\u6ca1\u6cd5\u4fdd\u8bc1singleton\u53ea\u6709\u4e00\u4e2ainstance\uff0c\u54ea\u6015\u6784\u9020\u51fd\u6570\u7684private\u7684\uff0c\u6211\u4eec\u4f9d\u7136\u53ef\u4ee5\u5728editor\u91cc\u62d6\u62fd\u811a\u672c\u6765\u521b\u5efa\u591a\u4e2asingleton\u7684\u5b9e\u4f8b\uff0c\u6216\u8005\u7528Instantiate\u51fd\u6570\u6765\u521b\u5efa\u5b9e\u4f8b\uff0c\u60f3\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u5c31\u8981\u975e\u5e38\u5c0f\u5fc3\u3002</p> <p>C#\u7684internal\u5173\u952e\u5b57\u548cC++\u7684friend\u53cb\u5143\u7c7b\u4f3c\uff0c\u4f46\u53ef\u80fd\u662f\u4e2acode smell\uff0c\u7528\u7684\u65f6\u5019\u8003\u8651\u597d\u3002Unity\u4e2d\u4e0d\u7528\u8003\u8651\u8fd9\u4e48\u590d\u6742\uff0c\u5fc5\u987b\u7528\u5230\u4e86\u518d\u8bf4\u3002</p> <p>Code smells are usually not bugs; they are not technically incorrect and do not prevent the program from functioning. Instead, they indicate weaknesses in design that may slow down development or increase the risk of bugs or failures in the future.</p> <p>conversion\u548ccast\u662f\u5b8c\u5168\u4e0d\u540c\u7684\uff0c\u6240\u4ee5(int)x\u548cConvert.ToInt32(x)\u6709\u672c\u8d28\u7684\u533a\u522b\uff0c\u4f46\u8fd9\u4e2a\u95ee\u9898\u6781\u5176\u590d\u6742\uff0c\u5177\u4f53\u7528\u5230\u4e86case by case\u641c\u4e00\u4e0b\u3002\u3002\u3002</p> <p>c#\u91cc\u9762\u7684struct\u662fvalue-type\u800c\u4e0d\u662freference-type\uff0c\u56e0\u6b64\u4e0d\u80fd\u4fee\u6539struct\u91cc\u67d0\u4e2afield\u7684\u503c\u3002class\u7c7b\u578b\u4ee5\u53caC#9.0\u65b0\u63a8\u51fa\u7684record\u7c7b\u578b\u90fd\u662freferene-type\uff0c\u800c\u539f\u59cb\u7c7b\u578b\u6bd4\u5982int\uff0cfloat\uff0cstring\u8fd9\u4e9b\u662fvalue-type\uff0c\u8fd9\u5f88\u597d\u7406\u89e3\uff0c\u4f46\u8981\u6ce8\u610fstruct\u4e5f\u662fvalue-type\uff0c\u4e0d\u80fd\u5f53\u6210class\u7528\uff0c\u53e6\u5916\u8fd8\u6709tuple\u4e5f\u662f\u7684\uff0c\u6240\u4ee5tuple\u6216struct\u4e00\u65e6\u88ab\u521b\u5efa\uff0c\u5c31\u662f\u4e00\u4e2a\u5185\u5b58\u91cc\u7684\u5e38\u91cf\u503c\uff0c\u4e0d\u80fd\u4fee\u6539\u67d0\u4e2afield\uff0c\u60f3\u4fee\u6539\u53d8\u91cf\u7684\u503c\u5fc5\u987b\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684struct\u6216tuple\u3002\u8fd9\u70b9\u548cC++\u662f\u4e0d\u540c\u7684\u3002In practice\uff0cstruct\u81ed\u540d\u662d\u8457\u6709\u5f88\u591a\u5751\uff0c\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\uff0c\u5982\u679c\u8981\u7528\u7684\u8bdd\uff0c\u4e00\u5b9a\u8981\u7528immutable\u7248\u672c\u7684struct\uff0c\u5b9a\u4e49readonly struct\uff0c\u4ee5\u9632\u51fa\u9519\u3002</p> <p>\u4e0d\u8fc7Unity\u81ea\u5e26\u7684Vector3\u662f\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539x,y,z\u7684\u503c\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u5e76\u4e0d\u662fraw field\uff0c\u800c\u662f\u88ab\u5c01\u88c5\u597d\u7684public property\uff0c\u5f53\u4f60\u4fee\u6539\u7684\u65f6\u5019\u5b83\u7684setter\u4f1a\u81ea\u52a8new\u4e00\u4e2a\u65b0\u7684vector3\uff0c\u5bf9\u4e8eQuaternion\u4ee5\u53caMatrix4x4\u4e5f\u662f\u4e00\u6837\u7684\u3002</p> <p>Input\u5728\u6c34\u5e73\u548c\u5782\u76f4\u7684axis\u4e0a\u7684\u503c\u5bf9\u4e8e\u952e\u76d8\u548c\u624b\u67c4\u901a\u5e38\u662f-1\u52301\u4e4b\u95f4\uff0c0\u4ee3\u8868\u6ca1\u52a8\uff0c\u53ea\u6709\u9f20\u6807\u7684\u79fb\u52a8\u662f\u4f8b\u5916\uff0c\u53ef\u4ee5\u5728\uff08-1\uff0c1\uff09\u533a\u95f4\u4e4b\u5916\u3002GetAxis\u4f1a\u8fd4\u56de(-1,1)\u4e4b\u95f4\u7684\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u505a\u8fc7smooth\u5904\u7406\u4e86\uff0c\u6b65\u957f\u662f0.05f\uff0c\u4f46GetAxisRaw\u6ca1\u6709smooth\u548c\u6b65\u957f\uff0c\u6240\u4ee5\u503c\u53ea\u4f1a\u662f-1\u30010\u30011\u4e09\u8005\u5176\u4e2d\u4e4b\u4e00\uff0c\u6ca1\u6709\u6d6e\u70b9\u6570\u3002</p> <p>\u901a\u5e38\uff0c\u6211\u4eec\u8ba1\u7b97\u901f\u5ea6\u65f6\uff0c\u662f\u770bInput\u7684\u7edd\u5bf9\u503c\u7684\uff0c\u4e5f\u5c31\u662f0-1\u4e4b\u95f4\u7684\u4e00\u4e2a\u503c\uff0c\u518d\u4e58\u4ee5\u4e00\u4e2amultiplier\u548cdeltatime\uff0c\u5982\u679cxy\u4e24\u4e2aaxis\u540c\u65f6\u6309\u4f4finput\uff0c\u8d70\u659c\u7ebf\u662f\u6839\u53f72\uff0c\u8981\u6bd4\u5355\u72ec\u4e00\u4e2aaxis\u901f\u5ea6\u5feb\uff0c\u6240\u4ee5\u4e3a\u4e86\u901f\u5ea6\u5e73\u8861\uff0c\u8bb0\u4f4f\u4e00\u5b9a\u8981\u505anormalize\u5904\u7406\u3002</p> <p>normalize\u548cclamp\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1fnormalize\u8fd4\u56de\u4e00\u4e2a\u5411\u91cf\u7684unit\u5355\u4f4d\u5411\u91cf\u7684copy\uff0c\u6a21\u4e3a1\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u88abnormalized\u4e86\u4ee5\u540e\uff0c\u6a21\u6c38\u8fdc\u662f1\u3002\u800cclamp\u53ef\u4ee5\u8fd4\u56de\u6bd41\u5c0f\u7684\u6d6e\u70b9\u6570\uff0c0-1\u4e4b\u95f4\u90fd\u53ef\u4ee5\u3002\u8003\u8651\u4e00\u4e2a\u4ece\u539f\u70b9\u51fa\u53d1\u7684\u5355\u4f4d\u7403\uff0c\u4e00\u4e2anormalized\u7684\u5411\u91cf\u6c38\u8fdc\u53ea\u80fd\u89e6\u78b0\u5230\u7403\u4f53\u7684\u8868\u9762\uff0c\u5374\u65e0\u6cd5\u89e6\u78b0\u5230\u7403\u4f53\u5185\u90e8\uff0c\u4f46\u662fclamp\u5219\u53ef\u4ee5\u89e6\u78b0\u5230\u6574\u4e2a\u7403\u4f53\u7a7a\u95f4\u5185\u7684\u4efb\u4f55\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4e0d\u6b62\u9650\u4e8e\u8868\u9762\u3002\u6240\u4ee5\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7528clamp\uff0c\u4e0d\u8981\u7528normalize\uff0c\u5bf9\u4e8e\u5355\u4e2a\u6d6e\u70b9\u6570\uff0c\u5c31\u7528Mathf.Clamp\uff0c\u5bf9\u4e8e\u5411\u91cfVector2,Vector3,Vector4\uff0c\u7528\u5bf9\u5e94\u7c7b\u7684\u9759\u6001\u65b9\u6cd5\u53bbclamp\uff0c\u6bd4\u5982Vector3.ClampMagnitude().</p> <p>speed\u662f\u4e00\u4e2a\u6807\u91cfscalar\uff0c\u662f\u4e00\u4e2a\u5177\u4f53\u7684float\u6570\u503c\uff0cvelocity\u662f\u4e00\u4e2a\u5411\u91cfVector3\uff0c\u4e24\u8005\u4e0d\u8981\u6df7\u6dc6\u3002</p> <p>Vector3.Equals\u7528\u4e8e\u5224\u65ad\u4e24\u4e2avector3\uff08\u53ef\u4ee5\u662f\u70b9\u6216\u5411\u91cf\uff09\u662f\u5426\u5b8c\u5168\u76f8\u7b49\uff0c\u8fd9\u5f88\u5c11\u4f1a\u7528\u5230\u3002\u4e00\u822c\u7528\u7684\u90fd\u662fVector3\u91cd\u8f7d\u7684==\u7b26\u53f7\uff0c\u6bd4\u5982transform.position == other.position\uff0c\u8fd9\u4f1a\u5224\u65ad\u8fd9\u4e24\u4e2aposition\u662f\u5426\u8fd1\u4f3c\u76f8\u7b49\uff0c\u8003\u8651\u4e86\u6d6e\u70b9\u6570\u7684\u7cbe\u5ea6\u8bef\u5dee\uff0c\u5dee\u503c\u5c0f\u4e8e1e-5\u5219\u8ba4\u4e3a\u76f8\u7b49\u3002</p> <p>the amount returned by Mouse X/Y or the scrollwheel can vary heavily from device to device so it's common to provide a sensitivity setting for the user to adjust. (use a [HideInInspector] public float sensitivity variable, which can be changed via the UI system later in-game) \u8fd9\u4e2a\u8bbe\u7f6e\u540e\u9762\u52a0\u5728UI\u91cc\uff0c\u8ba9\u73a9\u5bb6\u53ef\u4ee5\u81ea\u5df1\u8c03\u8282\uff0c\u4e0d\u8981\u653e\u5728inspector\u91cc\u3002</p> <p>\u5982\u679cKCC\u5c31\u7b97\u8bbe\u7f6e\u4e86step height\u4e5f\u722c\u4e0d\u4e0a\u67d0\u4e9b\u697c\u68af\uff0c\u5f88\u53ef\u80fd\u662f\u6d6e\u70b9\u6570\u7cbe\u5ea6\u7684\u539f\u56e0\u3002\u7a0d\u5faeresize\u4e00\u4e0bcapsule collider\u5373\u53ef\uff0c\u53ea\u8981height\uff08\u9ed8\u8ba42\uff09\u4e0d\u662fradius\uff08\u9ed8\u8ba40.5\uff09\u76844\u500d\u5c31\u884c\u4e86\uff0c\u53ef\u4ee5\u628a\u5706\u67f1\u4f53\u7684height\u8c03\u62101.1.</p> <p>\u5982\u679c\u5c31\u7b97\u5728UpdateVelocity\u91cc\u66f4\u65b0\u4e86ref currentVelocity\u7684\u503c\uff0cKCC\u4e5f\u6ca1\u6709\u53cd\u5e94\u6ca1\u6709\u79fb\u52a8\uff0c\u4e5f\u662f\u6d6e\u70b9\u6570\u7cbe\u5ea6\u7684\u95ee\u9898\u3002\u5982\u679c\u901f\u5ea6\u7684xyz\u5206\u91cf\u592a\u5c0f\u7684\u8bdd\uff0cKCC\u662f\u4f1a\u5ffd\u7565\u7684\uff0c\u6539\u62100.01\u6216\u4ee5\u4e0a\u7684\u6570\u91cf\u7ea7\u5c31\u597d\u4e86\uff0c\u4e09\u4f4d\u5c0f\u65700.001\u8fd9\u79cd\u4f1a\u88ab\u8ba4\u4e3a\u662f0\u3002</p> <p>KCC\u7684character\u7ad9\u5728\u666e\u901a\u7684\u7269\u7406\u9a71\u52a8\u7684\u521a\u4f53\u4e0a\uff0c\u4e5f\u662f\u53ef\u4ee5\u8ddf\u7740\u79fb\u52a8\u7684\uff0c\u4f46\u662f\u6c38\u8fdc\u4f1a\u6162\u4e00\u4e2aframe\uff0c\u8fd9\u6837\u5c31\u6709jitter\u3002\u53ea\u6709\u52a0\u4e0aphysicsMover\u624d\u80fd\u770b\u4e0a\u53bb\u5e73\u6ed1\uff0c\u56e0\u4e3aKCC\u7cfb\u7edf\u5185\u90e8\u662f\u4e25\u683c\u5b9a\u4e49\u4e86physicsMover\u7684execution order\u8981\u5728character\u4e4b\u524d\u3002\u6211\u7684movingPlatform\u811a\u672c\u662f\u652f\u6301timeline\u52a8\u753b\u7684\uff0c\u4e00\u822c\u7684moving\u7269\u4f53\u90fd\u53ef\u4ee5\u7528\u52a8\u753b\u6765\u5b9e\u73b0\u590d\u6742\u7684movement\uff0c\u672c\u8eab\u518d\u5e26\u521a\u4f53\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u548cKCC\u5b8c\u7f8e\u7684\u4ea4\u4e92\u3002\u5982\u679c\u4e00\u4e9bmoving\u7269\u4f53\u5fc5\u987b\u662f\u7531physics\u9a71\u52a8\u7684\uff0c\u6bd4\u5982\u6d77\u4e0a\u7684\u4e00\u8258\u8239\uff0c\u8239\u7684translation\u548crotation\u662f\u5728runtime\u7684\u65f6\u5019\u7531\u590d\u6742\u7684\u6c34\u7684physics\u51b3\u5b9a\u7684\uff0c\u90a3\u5c31\u5fc5\u987b\u5728\u8239\u4e0a\u52a0\u4e0aphysicsMover component\u4ee5\u53ca\u4e00\u4e2amovingPlatform\u7684\u811a\u672c\uff0c\u901a\u8fc7\u811a\u672c\u7684UpdateMovement\u51fd\u6570\u53bb\u544a\u8bc9physicsMover\u5f53\u524d\u7684goal\u7684position\u548crotation\u662f\u591a\u5c11\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u5f53\u524d\u8239\u7684tranform\u7684pose\u3002</p> <p>root motion VS scripting motion</p> <p>scripting motion\u662f\u6307character\u7684movement\u5b8c\u5168\u7531controller\u7684\u4ee3\u7801\u6240100%\u63a7\u5236\uff0c\u7a0b\u5e8f\u5458\u5bf9movement\u6709\u5b8c\u5168\u7684\u81ea\u7531\u638c\u63a7\u3002</p> <p>root motion\u662f\u6307character\u7684movement\u7531\u52a8\u753b\u6240\u51b3\u5b9a\uff0c\u52a8\u753bplay\u7684\u540c\u65f6\u4eba\u7269\u4f1amove\uff0c\u53ef\u4ee5\u662f\u81ea\u52a8\u7684\uff0c\u4e5f\u53ef\u4ee5\u624b\u52a8\u901a\u8fc7OnAnimatorMove()\u6765\u83b7\u53d6\u52a8\u753b\u7684movement\u3002</p> <p>\u5982\u679c\u4f60\u5e0c\u671binput\u7684\u63a7\u5236\u5341\u5206\u6d41\u7545\u7075\u654f\uff0cmovement\u53c8\u5341\u5206\u590d\u6742\uff0c\u6bd4\u5982FPS\u5c04\u51fb\u8fd9\u79cd\u5bf9\u7cbe\u5ea6\u8981\u6c42\u9ad8\u7684\u6e38\u620f\uff0c\u7528scripting motion\u6bd4\u8f83\u597d\uff0c\u6b64\u65f6\uff0ccharacter\u7684movement\u548c\u52a8\u753b\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff0c\u52a8\u753b\u53ea\u662fin-place\u7684\u52a8\u753b\uff0c\u52a8\u753b\u672c\u8eab\u53ea\u5728\u539f\u5730animate\u4eba\u7269\u4f46\u5e76\u4e0d\u4ea7\u751f\u5b9e\u9645\u7684movement\u3002\u5728\u4ee3\u7801\u91cc\uff0c\u5148\u6307\u793a\u4eba\u7269\u5982\u4f55move\uff0c\u7136\u540e\u518d\u5728\u5408\u9002\u7684\u5730\u65b9\u66f4\u65b0\u52a8\u753b\u7684\u53c2\u6570\uff0cplay\u76f8\u5e94\u7684\u52a8\u753b\u3002scripting motion\u7684\u7f3a\u70b9\u5728\u4e8e\uff0c\u811a\u672c\u63a7\u5236\u7684movement\u548c\u52a8\u753b\u662f\u72ec\u7acb\u7684\uff0c\u6240\u4ee5\u6ca1\u6cd5\u5b8c\u7f8e\u540c\u6b65\uff0c\u5728\u4e0d\u540c\u7684\u901f\u5ea6\u4e0b\uff0cwalk\u548cturn\u4e4b\u7c7b\u7684\u90fd\u4f1a\u51fa\u73b0\u7ec6\u5fae\u7684\u4e0d\u534f\u8c03\uff0c\u6bd4\u5982walk\u65f6\u770b\u4e0a\u53bbcharacter\u7684foot\u50cf\u662f\u5728\u5730\u9762\u4e0aslide\u4e00\u6837\u3002\u597d\u5904\u662f\u8fd9\u6837\u505a\u66f4\u5b89\u5168\uff0c\u6709\u66f4\u591acontrol\uff0c\u5e76\u4e14\u628amovement\u548c\u52a8\u753b\u5b8c\u5168\u5206\u5272\u5f00\u6765\uff0cworkflow\u4e5f\u66f4\u6e05\u6670\uff0c\u4e0d\u4f1a\u6709\u4e24\u8005\u4e92\u76f8\u5e72\u6d89\u800c\u4ea7\u751f\u7684bug\uff0c\u6700\u4e3b\u8981\u7684\uff0c\u957f\u8fdc\u6765\u770b\u8fd9\u662f\u4e00\u4e2a\u957f\u671f\u6295\u8d44\uff0c\u5982\u679c\u4f60\u672a\u6765\u53ef\u80fd\u4f1a\u7ed9character controller\u52a0\u66f4\u591a\u66f4\u590d\u6742\u7684\u529f\u80fd\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7684\u6269\u5c55\u6027\u5f88\u597d\u3002</p> <p>\u5982\u679c\u4f60\u5e0c\u671b\u52a8\u753b\u548cmovement\u5b8c\u7f8e\u534f\u8c03\uff0c\u753b\u9762\u52a8\u4f5c\u770b\u4e0a\u53bb\u5341\u5206\u81ea\u7136realistic\uff0c\u90a3\u53ea\u80fd\u7528root motion\u3002\u6b64\u65f6\uff0c\u4ee3\u7801\u5c31\u4e0d\u80fd\u81ea\u7531\u63a7\u5236\u4eba\u7269\u7684movement\u4e86\uff0c\u800c\u662f\u8981\u5728OnAnimatorMove()\u7684callback\u4e2d\u83b7\u53d6animator\u7684deltaPosition\u4ee5\u53cadeltaRotation property\uff0c\u6839\u636edelta\u7684\u4fe1\u606f\u7b97\u51fa\u5b9e\u65f6\u7684\u901f\u5ea6\u548c\u65cb\u8f6c\uff0c\u518dupdate\u4eba\u7269\uff0c\u4ee5\u4fdd\u8bc1\u5b8c\u7f8e\u540c\u6b65(\u6bcf\u4e00\u6b21update loop\uff0c\u52a8\u753b\u90fd\u53ef\u80fd\u4f1aloop\u4e00\u6b21\u6216\u591a\u6b21\uff0c\u6240\u4ee5OnAnimatorMove\u8981accumulate)\u3002root motion\u7684\u7f3a\u70b9\u5728\u4e8e\uff0c\u7531\u4e8e\u5b8c\u7f8e\u540c\u6b65\uff0c\u52a8\u753b\u5fc5\u987b\u8981\u505a\u7684\u5341\u5206\u7cbe\u51c6\u624d\u884c\uff0c\u5426\u5219\u6709\u4efb\u4f55\u5fae\u5c0f\u7684\u9707\u8361\uff0c\u90fd\u4f1a\u53cd\u5e94\u5728movement\u4e0a\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4f60\u7684character\u8fd0\u52a8\u9700\u6c42\u7279\u522b\u590d\u6742\uff0c\u90a3\u4e48\u5c31\u8981\u6c42\u52a8\u753b\u4e5f\u8981\u540c\u7b49\u7684\u590d\u6742\u7cbe\u51c6\uff0c\u8fd9\u662f\u5f88\u9ebb\u70e6\u7684\uff0c\u6bd5\u7adf\u7528\u4ee3\u7801\u63a7\u5236movement\u8981\u6bd4\u7528\u52a8\u753b\u53bb\u63a7\u5236\u7b80\u5355\u7684\u591a\uff0c\u8fd9\u4e5f\u5bfc\u81f4\u4e86\u672a\u6765\u7684\u53ef\u62d3\u5c55\u6027\u4e0d\u9ad8\u3002\u800croot motion\u6700\u5927\u7684\u5f0a\u75c5\u5728\u4e8e\uff0c\u7531\u4e8e\u52a8\u753b\u7684transition\u662f\u9700\u8981\u65f6\u95f4\u7684\uff0c\u8fd9\u4f1a\u4f7finput\u7684\u53cd\u5e94\u6709\u4e00\u5b9a\u5ef6\u8fdf\uff0c\u964d\u4f4econtroller input\u7684\u7075\u654f\u5ea6\u548cresponsiveness\u3002</p> <p>root motion\u548cscripting motion\u7684\u533a\u522b\uff0c\u5bf9\u6bd4\u4e00\u4e0bCSGO\u548cDOTA\u5c31\u77e5\u9053\u4e86\uff0cCSGO\u7684\u64cd\u4f5c\u8981\u6c42\u9f20\u6807\u7684\u53cd\u5e94\u7edd\u5bf9\u7684\u7075\u654f\u7cbe\u51c6\uff0c\u90a3\u4e48\u4eba\u7269\u5c31\u81ea\u7136\u6ca1\u6cd5\u548c\u73b0\u5b9e\u4e2d\u4e00\u6837\u7279\u522brealistic\uff0c\u800cDOTA\u5219\u8981\u6c42\u82f1\u96c4\u4eba\u7269\u7684\u52a8\u4f5c\u548c\u65bd\u6cd5\u975e\u5e38\u903c\u771f\uff0c\u5bf9\u64cd\u4f5c\u7684\u7cbe\u51c6\u5ea6\u6ca1\u6709\u592a\u9ad8\u8981\u6c42\uff0c\u6bd4\u5982\u706b\u5973\u7684T\u4e3a\u4e86\u65bd\u6cd5\u52a8\u4f5c\u903c\u771f\u5c31\u4f1a\u6709\u4e2a\u62ac\u624b\u52a8\u4f5c\uff0c\u5bfc\u81f4\u65bd\u6cd5\u524d\u6447\u800c\u4e0d\u662f\u77ac\u53d1\u7684\uff0c\u6bd4\u5982\u5c41\u80a1\u5927\u7684\u82f1\u96c4\u4f1a\u6709\u660e\u663e\u7684\u8f6c\u8eab\u65f6\u95f4\u3002\u901a\u5e38\uff0cscripting motion\u7528\u4e8eFPS\u7c7b\u6e38\u620f\uff0croot motion\u7528\u4e8eRPG\u7c7b\u6e38\u620f\u3002</p> <p>\u6700\u597d\u7684\u65b9\u6848\u662f\uff0c\u53d6\u4e24\u8005\u7684\u957f\u5904\u7ed3\u5408\u8d77\u6765\uff0cblend\u5728\u4e00\u8d77\u4f7f\u7528\u3002\u5bf9\u4e8e\u73a9\u5bb6\u4eba\u7269\u7684\u666e\u901a\u79fb\u52a8\u7b49\u64cd\u4f5c\uff0c\u7528scripting motion\uff0c\u800c\u5728\u6218\u6597\u6a21\u5f0f\u4e2d\u65bd\u6cd5\u548c\u653b\u51fb\u65f6\uff0c\u5207\u6362\u4e3aroot motion(\u5426\u5219\u653b\u51fb\u65f6\u73a9\u5bb6\u6c38\u8fdc\u662f\u5728\u539f\u5730\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u6325\u821e\u5200\u5251\u4ec0\u4e48\u7684\u901a\u5e38\u4f34\u968f\u7740\u73a9\u5bb6\u5411\u524d\u79fb\u52a8\u4e00\u5c0f\u6b65\uff0c\u53d7\u5230\u653b\u51fb\u7684\u52a8\u753b\u4f1a\u5411\u540e\u9000\u4e00\u6b65\uff0c\u7b49\u7b49)\u3002\u5bf9\u4e8eNPC\u8fd9\u7c7bAI\u4eba\u7269\uff0c\u56e0\u4e3a\u4e0d\u662f\u73a9\u5bb6\u81ea\u5df1\u4e3b\u52a8control\u7684\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u8981\u6c42\u7cbe\u51c6\u5ea6\u548cresponsiveness\u7684\u60c5\u51b5\uff0c\u7edf\u4e00\u90fd\u7528root motion\u6765\u5b9e\u73b0\u6bd4\u8f83\u597d\u3002</p> <p>\u7b80\u5316\u9700\u6c42\uff01\u4e0d\u8981\u8ffd\u6c42\u548c\u73b0\u5b9e\u4e00\u6837\u6781\u81f4\u5b8c\u7f8e\uff0c\u6e38\u620f\u7684\u91cd\u70b9\u5728\u4e8e\u6545\u4e8b\u7ebf\u548c\u63a2\u7d22\u4e16\u754c\u800c\u4e0d\u662f\u73a9\u5bb6\u672c\u8eab\u7684\u52a8\u753b\u3002</p> <p>\u901a\u5e38\u73a9\u5bb6\u53ea\u8981\u73b0\u6709\u7684controller\u884c\u4e3a\u548c\u52a8\u753b\u5c31\u8db3\u591f\u4e86\uff0c\u4e0d\u9700\u8981\u548c\u73b0\u5b9e\u4e00\u6837\u9075\u5faa\u5404\u79cd\u7269\u7406\u3002\u672c\u8eabKCC\u5c31\u662fkinematic\u7684\uff0c\u4e5f\u5c31\u4ee3\u8868\u7740\u6211\u4eec\u81ea\u5df1handle\u4e00\u5207\u7684\u7269\u7406\uff0c\u800c\u4e0d\u7528Unity\u81ea\u5e26\u7684\u7269\u7406\u5f15\u64ce\uff0c\u6240\u4ee5\u60f3\u8981\u5b8c\u7f8e\u6a21\u62df\u5404\u79cdruntime\u7684\u7269\u7406\u52a8\u4f5c\u5e76\u4e0d\u73b0\u5b9e\uff0c\u6709\u57fa\u672c\u52a8\u753b\u5373\u53ef\u3002\u54ea\u6015\u662f\u73a9\u5bb6\u88ab\u8f66\u649e\u98de\uff0c\u5229\u7528AddExtraVelocity\u5e76\u52a0\u4e0a\u77ac\u65f6\u7684camera shake\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e86\u3002</p> <p>Ragdoll\u5c31\u662f\u5728\u9aa8\u9abc\u7684\u5404\u4e2a\u90e8\u4f4d\u52a0\u4e0a\u521a\u4f53\u548ccollider\uff0c\u50cf\u4e2a\u7269\u7406\u4eba\u5076\u4e00\u6837\uff0c\u7528\u4e8e\u81ea\u52a8\u548cphysics\u4ea4\u4e92\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5341\u5206\u903c\u771f\u7684\u7269\u7406\u6548\u679c\uff0c\u5982\u679c\u8981\u7528Ragdoll\u7684\u8bdd\uff0c\u53bb\u4e70\u5546\u5e97\u7684PuppetMaster\u7d20\u6750\u5305\uff0c\u8fd9\u4e2apackage\u53ef\u4ee5\u65e0\u7f1d\u5e73\u6ed1\u7684\u8854\u63a5\u73b0\u6210\u7684\u52a8\u753b\u548cphysics\uff0c\u65e0\u7f1d\u5207\u6362\u3002</p> <p>\u53e6\u5916\uff0cFinalIK\u662f\u540c\u4e00\u4e2astudio\u51fa\u54c1\u7684IK\u7684\u5305\uff0c\u53ef\u4ee5\u548cPuppetMaster\u914d\u5408\u4f7f\u7528\uff0c\u4f46\u5176\u5b9e\u6ca1\u5fc5\u8981\uff0c\u6211\u53ea\u8981\u7b80\u5355\u7684\u8ba9\u73a9\u5bb6\u5934\u90e8\u5728auto\u6a21\u5f0f\u4e0b\u80fdfollow\u67d0\u4e2aNPC\u5c31\u597d\u4e86\uff0c\u8fd9\u79cd\u6700\u57fa\u672c\u7684\u529f\u80fd\uff0c\u76f4\u63a5\u7528Unity\u81ea\u5e26\u7684animation rigging\u5305\u5c31\u53ef\u4ee5\u5b8c\u6210\u4e86\u3002</p> <p>\u9664\u975e\u662f\u5728auto\u6a21\u5f0f\u4e0b\u505acutscene\u52a8\u753b\u9700\u8981\u4e00\u4e9b\u903c\u771f\u7684\u52a8\u4f5c\uff0c\u6216\u8005\u662f\u63a7\u5236NPC\u7684\u52a8\u4f5c\uff0c\u624d\u9700\u8981\u8fd9\u4e9b\u5de5\u5177\uff0c\u7528\u5230\u4e86\u518d\u8bf4\u3002\u4e70\u7d20\u6750\u8003\u8651\u4e0b\u4ef7\u683c\uff0c\u6700\u597d\u82b1\u94b1\u5728\u5200\u53e3\u4e0a\uff0c\u8fd8\u662f\u4e3b\u8981\u4ee5\u4e70\u4e16\u754c\u6a21\u578b\u7684\u7d20\u6750\u4e3a\u4e3b\u3002NPC\u4e0d\u8981\u7528KCC controller\u53bb\u64cd\u4f5c\uff0c\u53ea\u8981\u7528timeline\u505a\u73b0\u6210\u7684\u52a8\u753b+NavMesh\uff0c\u9876\u591a\u914d\u5408\u4e0a\u6700\u57fa\u672c\u7684Ragdoll\u7269\u7406\uff0c\u52a0\u4e0a\u4e00\u70b9\u70b9IK\uff0c\u5c31\u8db3\u591f\u6ee1\u8db3\u9700\u6c42\u4e86\u3002</p> <p>\u3010\u5904\u7406IK\u6709\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u3011</p> <p>\u6700\u5e95\u5c42\u7684\u662f\u81ea\u5df1\u624b\u5de5\u4ee3\u7801\u5904\u7406\uff0c\u5728animator\u7684base layer\u4e0a\u52fe\u9009IK Pass\uff0c\u8fd9\u6837animator\u5c31\u4f1a\u81ea\u52a8\u7684\u53bbcall OnAnimatorIK\u7684\u65b9\u6cd5\uff0c\u6240\u4ee5\u53ea\u8981\u5728\u540c\u4e00\u4e2ago\u4e0a\u6302\u4e2a\u811a\u672c\uff0c\u8be5\u811a\u672c\u91cc\u5b9e\u73b0OnAnimatorIK()\u7684\u903b\u8f91\uff0c\u8bbe\u7f6e\u597dIK target\u7684position/rotation\u4ee5\u53caweight\uff0c\u5c31OK\u4e86\uff0c\u4f46\u662ftarget\u7684position/rotation\u5e76\u4e0d\u5bb9\u6613\u8ba1\u7b97\uff0c\u6bd4\u5982\u73a9\u5bb6\u722c\u697c\u68af\u6216\u8005\u8d70\u5728\u5751\u6d3c\u7684\u5730\u5f62\u4e0a\u6216\u8005slope\u4e0a\uff0c\u54ea\u6015\u811a\u7684\u7740\u9646\u70b9\u53ef\u4ee5\u5411\u4e0b\u505araycast\u7b97\u4f4d\u7f6e\uff0c\u4f46\u811a\u8fd8\u6709\u957f\u5ea6\u7684\uff0c\u60f3\u6b63\u786e\u8ba1\u7b97\u811a\u7684rotation\uff0c\u9700\u8981\u505a\u591a\u4e2araycast\uff0c\u8fd8\u8981\u8003\u8651\u5230character\u7684velocity\u4ee5\u53cacharacter\u7684transform up\u65b9\u5411\uff0c\u975e\u5e38\u590d\u6742\u3002\u8fd8\u6709\u5c31\u662f\uff0c\u54ea\u6015\u6b63\u786e\u8ba1\u7b97\u4e86target\u7684\u4fe1\u606f\uff0c\u6548\u679c\u672a\u5fc5\u597d\uff0c\u56e0\u4e3arigging\u7684\u5904\u7406\u5b8c\u5168\u662f\u7531Unity\u81ea\u5e26\u7684Mecanim\u64cd\u4f5c\u7684\uff0c\u4e5f\u5c31\u662fanimator\u63a7\u4ef6\u5728\u63a7\u5236\u7684\uff0c\u5bf9\u6bd4\u4e0bFinal IK\u53ef\u4ee5\u770b\u5230\uff0cMecanim\u5904\u7406rigging\u5e76\u4e0d\u662f\u5f88\u81ea\u7136\uff0c\u8fd8\u662f\u6709\u4e0d\u5c11\u95ee\u9898\u7684\uff0c\u8fd9\u5757\u81ea\u5df1\u53c8\u63a7\u5236\u4e0d\u4e86\u3002</p> <p>\u5229\u7528Animation Rigging package\uff0c\u5728editor\u91cc\u8bbe\u7f6e\u597dIK constraint\u4ee5\u53catarget\u8fd8\u6709rig\uff0c\u90a3\u4e48Unity\u4f1a\u81ea\u52a8\u5e2e\u4f60\u5904\u7406\u597dIK\uff0c\u8fd9\u4e2a\u5305\u5bf9\u4e8erigging\u7684\u5904\u7406\u8981\u6bd4\u539f\u672c\u7684Mecanim\u7684animator\u597d\u7684\u591a\uff0c\u4f46\u4f60\u8fd8\u662f\u8981\u624b\u52a8\u53bbupdate target\u7684\u4f4d\u7f6e\u548c\u65cb\u8f6c\uff0c\u5982\u679c\u53ea\u662f\u7b80\u5355\u7684\u8ba9Humanoid\u7684\u5934\u90e8look at\u67d0\u4e2atarget\u8fd8\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46foot IK\u8fd8\u662f\u5f88\u96be\u7b97\u4f4d\u7f6e\u548c\u65cb\u8f6c\uff0c\u800c\u4e14\u4e5f\u662f\u8981\u81ea\u5df1\u5904\u7406\u597dcollision\u4ec0\u4e48\u7684\u3002\u91cd\u70b9\u5c31\u662f\u4e0d\u77e5\u9053\u8fd9\u4e2a\u5305\u662f\u4e0d\u662f\u7a33\u5b9a\uff0c\u6bd5\u7adf\u8fd8\u5728preview\uff0c\u5c31\u7b97\u53d1\u5e03\u4e86\u4e5f\u8fd8\u5f88naive\uff0c\u9700\u8981\u65f6\u95f4\u7684\u8003\u9a8c\u3002</p> <p>\u7528\u4ed8\u8d39\u7684Final IK\u5305\uff0c\u76ee\u524dFinal IK\u662f\u6700\u597d\u7684asset\uff0c\u4e0d\u9700\u8981\u81ea\u5df1\u624b\u52a8\u7b97\u4f4d\u7f6e\u65cb\u8f6c\uff0c\u5168\u90e8\u5e2e\u4f60\u81ea\u52a8\u89e3\u51b3\uff0c\u6302\u4e2acomponent\u5c31\u597d\u4e86\u3002\u529f\u80fd\u5f3a\u5927\u4e14\u4e30\u5bcc\uff0c\u529f\u80fd\u6700\u5168\uff0c\u7ecf\u8fc7\u591a\u5e74\u8bb8\u591a\u4eba\u7684\u6d4b\u8bd5\u8003\u9a8c\u3002\u7f3a\u70b9\u662f90\u5200\u6253\u5bf9\u6298\u4e5f\u8fd8\u662f\u5f88\u8d35\uff0c\u9664\u975e\u9700\u8981\u5b9e\u73b0\u5f88\u590d\u6742\u7684IK\uff0c\u5426\u5219\u4e0d\u8981\u4e70\u3002\u53e6\u5916\uff0c\u672a\u6765\u7684\u8bdd\uff0c\u5b98\u65b9\u7684Animation Rigging\u5305\u4f1a\u662f\u5927\u8d8b\u52bf\uff0c\u65e9\u665a\u4f1a\u66ff\u4ee3final ik\u3002</p> <p>\u3010SOLUTION\u3011\u957f\u8fdc\u6765\u770b\uff0c\u8fd8\u662f\u8981\u81ea\u5df1\u719f\u6089\u8fd9\u5757\u529f\u80fd\u548c\u903b\u8f91\uff0c\u76ee\u524d\u53ea\u9700\u8981foot IK\u548cAim IK\uff0c\u4f46\u968f\u7740\u6e38\u620f\u53d8\u590d\u6742\uff0c\u5176\u4ed6\u7684\u50cf\u662f\u4eba\u7269\u62ff\u676f\u5b50\u559d\u6c34\uff0c\u5f00\u95e8\u4ec0\u4e48\u7684\uff0c\u7528IK\u53ef\u4ee5\u505a\u7684\u975e\u5e38\u6f02\u4eae\u4e14realistic\uff0c\u73b0\u5728\u8fd8\u662f\u8981\u8ba4\u771f\u5b66\u4e60\u548c\u719f\u6089\u4e00\u4e0b\u3002\u4ece\u7a0b\u5e8f\u5458\u6210\u957f\u7684\u89d2\u5ea6\uff0c\u6700\u597d\u662f\u81ea\u5df1\u53bb\u8e29\u5751\uff0c\u7528\u65b9\u6cd51\uff0c\u81ea\u5df1\u624b\u5de5\u5199\u4ee3\u7801\u5b9e\u73b0\u5168\u90e8\uff0c\u90a3\u4e48\u4ee5\u540e\u7528\u522b\u7684package\u4e5f\u4f1a\u66f4\u987a\u624b\u3002\u76ee\u524d\u7684\u8bdd\uff0c\u5148\u4e70\u90a3\u4e2a\u4fbf\u5b9c\u7684\u7d20\u6750\uff0c\u628a\u91cc\u9762\u7684\u4ee3\u7801\u5168\u90fd\u7814\u7a76\u4e00\u904d\uff0c\u518d\u6539\u6210\u81ea\u5df1\u7684\uff0c\u8fc7\u51e0\u5e74\u7b49Animation Rigging\u5305\u7a33\u5b9a\u4e86\uff0c\u628a\u4e00\u90e8\u5206\u903b\u8f91\u5207\u6362\u8fc7\u53bb\u3002</p> <p>\u505a\u52a8\u753b\u662f\u4e00\u4ef6\u975e\u5e38\u590d\u6742\u56f0\u96be\u7684\u4efb\u52a1\uff0c\u8868\u9762\u4e0a\u770b\u53ea\u8981\u6bcf\u4e00\u5e27\u53bb\u8c03\u6574\u4e0d\u540c\u9aa8\u9abc\u7684pose\u5c31\u597d\u4e86\uff0c\u4f46\u5176\u5b9e\u60f3\u8981\u5b9e\u73b0\u9ad8\u8d28\u91cf\u7684\u52a8\u753b\uff0c\u5373\u4f7f\u6709VeryAnimation\u548cUmotion\u8fd9\u79cd\u63d2\u4ef6\u5de5\u5177\uff0ctune\u7684\u8fc7\u7a0b\u975e\u5e38\u9ebb\u70e6\uff0c\u5f88\u96be\u505a\u51fa\u7406\u60f3\u7684\u6548\u679c\u3002\u4e5f\u6b63\u662f\u56e0\u4e3a\u8fd9\u6837\uff0c\u6240\u4ee5\u4f1a\u6709\u4e13\u95e8\u7684animation artist\u8fd9\u4e2a\u804c\u4e1a\uff0c\u4e13\u804c\u505a\u5404\u79cd3D\u52a8\u753b\u3002\u60f3\u8981\u81ea\u5df1\u5b9e\u73b0tech48\u90a3\u79cd\u52a8\u753b\uff0cUnity\u91cc\u662f\u4e0d\u53ef\u80fd\u505a\u5f97\u5230\u7684\u3002\u4e13\u4e1a\u7684artist\u90fd\u4f1a\u7528\u7b2c\u4e09\u65b9\u7684\u4e13\u4e1a\u52a8\u753b\u5236\u4f5c\u8f6f\u4ef6\uff0c\u4f8b\u5982\u9f99\u9aa8\uff0cspine\uff0c3dmax\u8fd9\u4e9b\u8f6f\u4ef6\uff0c\u4e13\u95e8\u6709\u4e00\u5806\u505a\u52a8\u753b\u7684\u5de5\u5177\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u4e00\u4e2a\u590d\u6742\u7684\u52a8\u753b\u8fd8\u662f\u5f88\u56f0\u96be\uff0c\u7f51\u4e0a\u627e\u804c\u4e1aartist\u4ee3\u505a\u52a8\u753b\uff0c\u884c\u60c5\u4e5f\u57fa\u672c\u4e0a\u662f10\u79d2\u949f\u7684\u52a8\u753b\u5c31\u898120\u5200\u3002\u6240\u4ee5\uff0c\u76ee\u524d\u5f88\u591a\u6280\u672f\u90fd\u5728\u5f80mocap\u7684\u65b9\u5411\u53d1\u5c55\uff0c\u4e5f\u5c31\u662fmotion capture\uff0c\u5f53\u7136\u4ef7\u683c\u5f88\u6602\u8d35\uff0c\u6bd4\u5982Radical\u662f\u7528AI\u81ea\u52a8\u4ece\u89c6\u9891\u4e2d\u89e3\u6790\u51fa\u52a8\u753b\u6570\u636e\uff0c8\u52001\u5206\u949f\uff0c\u8fd8\u6709xsens\u63a8\u51fa\u4e86\u4e00\u5957\u7a7f\u6234\u5f0f\u7684\u4f20\u611f\u670d\u88c5\u8bbe\u5907\uff0c\u4eba\u7a7f\u4e0a\u4e86\u5c31\u53ef\u4ee5\u5b9e\u65f6\u5f55\u5236\u52a8\u753b\uff0c\u898110000\u5200\uff0c\u518d\u6709\u5c31\u662ficlone 7\u8fd9\u79cd\u9ad8\u7ea7\u8f6f\u4ef6\uff0c\u53ef\u4ee5\u505a\u5404\u79cd\u4e13\u4e1a\u7684\u7535\u5f71\u7ea7\u522b\u52a8\u753b\uff0c\u4e5f\u662f\u4e0a\u5343\u5200\u8d77\u3002</p> <p>\u5982\u679c\u662f\u505a\u4e00\u822c\u7684\u4e0d\u592a\u590d\u6742\u7684\u52a8\u753b\uff0c\u5c24\u5176\u662fgeneric\u7c7b\u7684\uff0c\u6216\u8005\u7b80\u5355\u7684humanoid\u52a8\u4f5c\uff0c\u53ef\u4ee5\u5728unity\u4e2d\u7528VeryAnimation\u4ee5\u53caUmotion\u63d2\u4ef6\u3002\u5982\u679c\u8981\u505a\u4e30\u5bcc\u7684humanoid\u52a8\u753b\uff0c\u4e0d\u8981\u81ea\u5df1\u6d6a\u8d39\u65f6\u95f4\uff0c\u884c\u4e0d\u901a\u7684\uff0c\u54ea\u6015\u662f\u4e0b\u8f7dmixamo\u7684\u52a8\u753b\u518d\u81ea\u5df1\u4fee\u526a\uff0c\u4e5f\u5f88\u96be\uff0c\u8fd8\u662f\u8981\u53bb\u627e\u73b0\u6210\u7684\u7d20\u6750asset\uff0c\u6216\u8005\u5916\u5305\u7ed9\u7b2c\u4e09\u65b9\u3002\u5bf9\u4e8e\u52a8\u6f2b\u7c7b3D character\u7684\u52a8\u753b\uff0c\u60f3\u8981\u6bd4\u8f83\u53ef\u7231\u7684\u52a8\u753b\u6548\u679c\uff0c\u8fd8\u662f\u8981\u53bb\u627e\u65e5\u672c\u7684\u7d20\u6750\u548c\u5916\u5305\uff0c\u6709\u9700\u8981\u4e86\u591a\u641c\u641c\u770b\u3002</p> <p>Unity.Mathematics\u4e00\u5b9a\u8981\u914d\u5408Burst\u4f7f\u7528\uff0c\u5355\u72ec\u7528\u7684\u8bdd\u6bd4mono\u8fd8\u8981\u6162\u3002DOTS\u8981\u7528\u5c31\u4e00\u8d77\u7528\uff0c\u8fd9\u6837\u624d\u80fd\u63d0\u9ad8\u6027\u80fd\u3002</p> <p>\u5982\u679c\u53d1\u73b0animation\u7684transition\u5f88\u5947\u602a\uff0c\u4eba\u7269\u7684\u8111\u888b\u4f1a\u53d8\u5f62\uff0c\u90a3\u662f\u56e0\u4e3a\u4f60\u7684animator\u91cc\u6307\u5b9a\u4e86mechanim\u7684controller\u3002\u7528Animancer\u7684\u65f6\u5019\uff0c\u8981\u786e\u4fddanimator\u91cc\u7684controller\u4e3aNone(Runtime Controller)\u624d\u53ef\u4ee5\u3002</p> <p>\u5f53\u4f60\u53d1\u73b0\u67d0\u4e9b\u8fd0\u52a8\u7684\u7269\u4f53\u548cplayer\u4ea4\u4e92\u7684\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u4e86jittery\uff0c\u6709\u51e0\u4e2a\u70b9\u53ef\u4ee5\u68c0\u67e5\u3002\u9996\u5148\u5982\u679c\u5b83\u662f\u901a\u8fc7animation\u8fd0\u52a8\u7684\uff0c\u68c0\u67e5\u4e00\u4e0banimation\u7684Update Mode\u662f\u5426\u6b63\u786e\uff0c\u53ef\u80fd\u8981\u7528AnimatePhysics\u9009\u9879\uff0c\u6216\u8005\u5bf9\u4e8eUI\u7269\u4f53\u8981\u7528unscaledTime\u9009\u9879\u3002\u518d\u8005\uff0c\u770b\u4e00\u4e0b\u5b83\u7684\u521a\u4f53\u662f\u5426\u5f00\u542f\u4e86interpolate\uff0c\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u5f53physX\u548c\u73a9\u5bb6update\u7684fps\u901f\u5ea6\u4e0d\u4e00\u81f4\u65f6\u603b\u4f1a\u51fa\u73b0jittery\u3002</p> <p>Random.insideUnitSphere  Random.rotation</p> <p>kinematic animated\u7684\u7269\u4f53\u662f\u6ca1\u6709\u901f\u5ea6\u7684\uff0cvelocity\u6c38\u8fdc\u4e3a0\uff0c\u5c3d\u7ba1\u5b83\u4eec\u5728\u8fd0\u52a8\u3002\u6240\u4ee5\u5fc5\u987b\u624b\u52a8\u8ba1\u7b97\uff0c\u7528deltaPosition\u548cdeltaTime\u505a\u9664\u6cd5\u3002\u975ekinematic\u7684\u8fd0\u52a8\u7269\u4f53\uff0c\u662f\u7531physX\u63a7\u5236\u7684\uff0c\u6211\u4eec\u603b\u662f\u53ef\u4ee5\u901a\u8fc7\u521a\u4f53\u8bbf\u95ee\u5230\u5b83\u7684velocity\u5c5e\u6027\u3002</p> <p>Mathf\u662fMono\u9488\u5bf9C#\u672c\u8eab\u7684Math\u5e93\u505a\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5c01\u88c5\uff0c\u6027\u80fd\u4e0a\u662f\u6ca1\u4ec0\u4e48\u5dee\u522b\u7684\uff0c\u539f\u751f\u7684Math\u5e93\u662f\u57fa\u4e8edouble\u7c7b\u578b\u64cd\u4f5c\u7684\uff0cMathf\u5e93\u662f\u57fa\u4e8efloat\u7c7b\u578b\u64cd\u4f5c\u7684\uff0c\u6240\u4ee5\u624d\u53eb\u505aMathf\u3002Mathf\u7684\u5f88\u591a\u65b9\u6cd5\uff0c\u5176\u4ed6\u7c7b\u4e5f\u6709\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u53ea\u662f\u64cd\u4f5c\u5bf9\u8c61\u7c7b\u578b\u4e0d\u540c\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5f88\u591a\u65b9\u6cd5\u9664\u4e86Mathf\u7684\u7248\u672c\u4e4b\u5916\u8fd8\u6709\u5176\u4ed6\u7248\u672c\u3002\u6bd4\u5982Mathf.SmoothDamp\u662f\u5bf9\u4e00\u4e2afloat\u8fdb\u884c\u5e73\u6ed1\u66f4\u65b0\uff0c\u5bf9\u5e94\u5230\u5411\u91cf\uff0c\u5219\u53ef\u4ee5\u7528Vector3.SmoothDamp\uff0c\u529f\u80fd\u662f\u5b8c\u5168\u4e00\u6837\u7684\u53ea\u4e0d\u8fc7\u662f\u64cd\u4f5c\u5411\u91cf\u3002Mathf\u8fd8\u6709Lerp\u548cLerpUnclamped\u8fd9\u79cd\u63d2\u503c\u51fd\u6570\uff0c\u540c\u6837\u7684\uff0c\u5bf9\u4e8e\u5176\u4ed6\u7c7b\u578b\uff0c\u6211\u4eec\u4e5f\u6709Vector4.LerpUnclamped\uff0cQuaternion.LerpUnclamped\u7b49\u7b49\u3002</p> <p>\u5982\u679c\u662f\u5728PS4 XBOX\u8fd9\u79cdconsole\u4e0a\u73a9\u7684\u8bdd\uff0c\u7535\u89c6\u5c4f\u5e55\u8981\u5927\u7684\u591a\uff0c\u5fc5\u987b\u8981\u628a\u76f8\u673a\u7684FOV\u8c03\u5230100\u4ee5\u4e0a\uff0c\u6d4b\u8bd5\u5b8c\u4e86\u518dbuild\u3002\u5982\u679c\u662fVR\u8bbe\u5907\u7684\u8bdd\uff0c\u8981\u66f4\u5927\u624d\u884c\uff0c\u8fd9\u4e2a\u5c31\u6bd4\u8f83\u590d\u6742\u4e86\u73b0\u5728\u4e0d\u8003\u8651\uff0c\u6709\u4e9bVR\u4f1a\u81ea\u52a8\u91cd\u65b0\u8ba1\u7b97FOV\u7684\u3002</p> <p>\u76f8\u673a\u7684near clip\u8bb0\u5f97\u8bbe\u6210\u4e00\u4e2a\u6bd4\u8f83\u5c0f\u7684\u503c\uff0c\u6bd4\u59820.01\uff0c\u5426\u5219\u76f8\u673aobstruct\u7684\u65f6\u5019\uff0c\u4f1a\u51fa\u73b0render\u9ed1\u6846\u7684\u60c5\u51b5\u3002far clip\u6839\u636escene\u7684\u666f\u6df1\u8c03\u8282\u3002</p> <p>\u51e0\u79cd\u5e73\u6ed1\u548c\u63d2\u503c\u7684\u6bd4\u8f83\uff1a</p> <p>Lerp is linear, works well for very fast movements, is less demanding on CPU\uff0c\u4f46\u662f\u5728\u9996\u5c3e\u4e24\u7aef\u7684\u79fb\u52a8\u4f1a\u5f88sudden\u4e0d\u5e73\u6ed1\u3002</p> <p>SmoothDamp follows a sigmoid function, looks more like the object is accelerating and decelerating, is more pleasant to the eye.</p> <p>Slerp or Spherical Lerp is generally only applied to Quaternions, or at least vectors, not positions.</p> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u8bbe\u8ba1\u81ea\u5df1\u7684\u5e73\u6ed1\u51fd\u6570\uff0c\u7528sine\u548ccosine wave\u5c31\u662f\u5f88\u597d\u7684\u4f8b\u5b50\uff0c\u5b83\u4eec\u5b9a\u4e49\u57df\u65e0\u9650\uff0c\u800c\u4e14\u8fd8\u80fd\u8c03\u8282amplitude\u548c\u9891\u7387\uff0c\u8fd8\u80fd\u914d\u5408clamp\u4ea7\u751f\u53cd\u5f39\u6548\u679c\u7b49\u7b49\u3002</p> <p>Mono format\u662f\u5355\u97f3\u8f68\uff0cStereo format\u662f\u53cc\u97f3\u8f68\uff08\u5de6\u8033\u53f3\u8033\uff09\uff0c\u666e\u901a\u7684\u97f3\u9891\u90fd\u9009force to mono\uff0c\u6bd4\u5982\u4eba\u7269\u5bf9\u8bdd\uff0cUI\u97f3\u4e4b\u7c7b\u7684\uff0c\u800cBGM\u97f3\u4e50\u548cambience\u97f3\uff0c\u4ee5\u53cacutscene\u548c\u67d0\u4e9b\u7279\u6548\u7684\u97f3\u9891\uff0c\u9009stereo\u3002</p> <p>PCM\u662f\u6240\u6709\u97f3\u9891\u6700\u7ec8\u8f93\u51fa\u65f6\u5019\u7684\u76ee\u6807\u683c\u5f0f\uff08codecs\uff09\uff0c\u662flossless\u7684\u683c\u5f0f\uff0c\u5904\u4e8e\u5b8c\u5168\u89e3\u538buncompressed\u7684\u72b6\u6001\uff0c\u5360\u7528\u5185\u5b58\u5927\u5c0f\u7b49\u540c\u4e8e\u6e90\u6587\u4ef6original size\u3002</p> <p>ADPCM\u662f\u4e00\u4e2a\u538b\u7f29\u8fc7\u7684compressed\u683c\u5f0f\uff0c\u5728Unity\u4e2d\uff0c\u5360\u7528\u5185\u5b58\u5927\u5c0f\u8981\u6bd4PCM\u683c\u5f0f\u5c0f3.5\u500d\uff0c\u5373\u5927\u7ea6\u662f\u6e90\u6587\u4ef6\u5927\u5c0f\u768430%\u3002\u538b\u7f29\u540e\u6700\u597d\u8bd5\u542c\u4e00\u4e0b\u5931\u771f\u7684\u7a0b\u5ea6\uff08\u4e00\u822c\u542c\u4e0d\u51fa\uff09\u3002</p> <p>Vorbis\u662f\u6bd4ADPCM\u66f4\u597d\u7684\u538b\u7f29\u683c\u5f0f\uff0c\u7b97\u6cd5\u590d\u6742\uff0c\u540c\u7b49\u538b\u7f29\u5927\u5c0f\u4e0b\u7684\u97f3\u8d28\u66f4\u9ad8\uff0c\u540c\u7b49\u97f3\u8d28\u4e0b\u538b\u7f29\u7684\u66f4\u5c0f\uff0c\u4f46\u5f53play\u7684\u65f6\u5019\uff0c\u89e3\u538b\u4f1a\u5360\u7528\u5f88\u5927\u7684CPU\u3002</p> <p>MP3\u662f\u548cVorbis\u540c\u7b49\u7ea7\u7684\u4e00\u4e2a\u538b\u7f29\u683c\u5f0f\uff0c\u7b97\u6cd5\u4e5f\u5f88\u597d\uff0c\u4f46MP3 cannot loop seamlessly\uff0c\u6240\u4ee5\u4e3a\u4e86loop\u7684\u8854\u63a5\u97f3\u8d28\uff0c\u4e00\u822cprefer\u7528Vorbis\u3002</p> <p>---When to load audioclips to memory\uff1a</p> <p>\u3010Preload Audio Data\u3011 \u3010load in background\u3011</p> <p>[Y] [Y] \u53ea\u8981\u8be5AudioClip\u5728scene\u4e2d\u88abreference\u4e86\uff0c\u90a3\u4e48Unity\u4f1a\u5728load scene\u7684\u540c\u65f6load\u8fd9\u4e2aAudioClip\uff0c\u4f46load audio\u4e0d\u4f1ablock\u4e3b\u7ebf\u7a0b\u3002scene\u52a0\u8f7d\u597d\u4e86\u5c31\u4f1a\u8fdb\u5165play mode\uff0c\u5269\u4e0b\u8fd8\u6ca1\u52a0\u8f7d\u597d\u7684audio\u4f1a\u5728\u540e\u53f0\u52a0\u8f7d\u3002</p> <p>[Y] [N] \u53ea\u8981\u8be5AudioClip\u5728scene\u4e2d\u88abreference\u4e86\uff0c\u90a3\u4e48Unity\u4f1a\u5728load scene\u7684\u540c\u65f6load\u8fd9\u4e2aAudioClip\uff0c\u6ca1reference\u5219\u4e0d\u4f1aload. load\u4e0d\u4f1a\u5728\u540e\u53f0\u53d1\u751f\uff0c\u56e0\u6b64\u4f1ablock\u4e3b\u7ebf\u7a0b\uff0c\u53ea\u6709\u5f53audio\u4e5fload\u597d\u4e86\u4ee5\u540e\uff0cscene\u624d\u4f1a\u8fdb\u5165play mode\u3002\uff08\u6700\u597d\u7684\uff09</p> <p>[N] [Y] Unity\u53ea\u6709\u5728\u8be5audio\u88ab\u8c03\u7528\u5230(play)\u7684\u65f6\u5019\u624d\u4f1aload\uff0c\u54ea\u6015\u573a\u666f\u91cc\u6709reference\u5b83\u3002\u4f1a\u6d88\u8017CPU\uff0c\u4f46\u4e0d\u4f1ablock\u4e3b\u7ebf\u7a0b\uff0c\u6240\u4ee5\u97f3\u6548\u7684defer\u53ef\u80fd\u4f1a\u9020\u6210\u4e0d\u540c\u6b65\u3002</p> <p>[N] [N] Unity\u53ea\u6709\u5728\u8be5audio\u88ab\u8c03\u7528\u5230(play)\u7684\u65f6\u5019\u624d\u4f1aload\uff0c\u54ea\u6015\u573a\u666f\u91cc\u6709reference\u5b83\u3002\u4e0d\u4ec5\u6d88\u8017CPU\uff0c\u4e14\u4f1ablock\u4e3b\u7ebf\u7a0b\u6765load\uff0c\u6240\u4ee5\u867d\u7136\u4e0d\u4f1a\u9020\u6210\u97f3\u6548\u4e0d\u540c\u6b65\uff0c\u4f46\u53ef\u80fd\u4f1a\u51fa\u73b0\u5361\u5e27\uff08frame hitch or frame freeze\uff09\u3002</p> <p>\u66f4\u6362\u573a\u666f\u7684\u65f6\u5019\uff0cUnity\u4f1a\u81ea\u52a8\u5728garbage collect\u7684\u65f6\u5019unload\u4e4b\u524d\u7684audio\uff0c\u6e05\u7406\u5185\u5b58\u3002</p> <p>\u5bf9\u4e8e\u91cd\u8981\u7684SFX\uff0c\u90fd\u8981\u5728import\u7684\u65f6\u5019\u7ed9Preload Audio Data\u6253\u4e0a\u52fe\u3002loading\u53ea\u5360\u7528\u52a0\u8f7d\u573a\u666f\u7684\u65f6\u95f4\uff0c\u4e0d\u5f71\u54cdgameplay\uff0c\u6240\u4ee5\u591a\u7b49\u4e00\u4f1a\u513f\u6ca1\u4e8b\u513f\uff0c\u53ea\u8981\u5185\u5b58\u5360\u7528\u4e0d\u8fc7\u5206\u3002</p> <p>---How to load audioclips to memory\uff08Load Type\uff09\uff1a</p> <p>Decompress on Load\uff1aload\u97f3\u9891\u7684\u65f6\u5019\u5c31\u987a\u4fbf\u89e3\u538b\u6210\u76ee\u6807PCM\u683c\u5f0f\u5e76\u653e\u5165\u5185\u5b58\u4e2d\u4e86\uff0c\u5360\u7528\u66f4\u591a\u7684\u5185\u5b58\uff0c\u4f46\u4e0d\u518d\u6d88\u8017CPU\uff0c\u53ef\u4ee5\u968f\u65f6play\u3002\u9009\u4e86\u8fd9\u4e2a\u9009\u9879\uff0c\u97f3\u9891\u5728\u5185\u5b58\u4e2d\u7684\u5927\u5c0f\u5c31\u662foriginal size\u663e\u793a\u7684\u6570\u5b57\uff0c\u800c\u4e0d\u662fimported size\u3002\u9002\u7528\u4e8e\u53cd\u590d\u5730\u9891\u7e41\u4f7f\u7528\u7684\u8f83\u5c0f\u7684\u97f3\u9891\uff0c\u5982footsteps\uff0c\u653b\u51fb\u97f3\u6548\uff0cUI\u6309\u94ae\u97f3\u7b49\u7b49\u3002</p> <p>Compressed in Memory\uff1aload\u5230\u5185\u5b58\u7684\u65f6\u5019\uff0c\u5728\u5185\u5b58\u4e2d\u4f9d\u7136\u4fdd\u6301\u538b\u7f29\u7684\u72b6\u6001\uff0c\u76f4\u5230\u88abplay\u7684\u65f6\u5019\u624d\u4f1a\u89e3\u538b\u3002\u5360\u7528\u5185\u5b58\u8f83\u5c0f\uff0c\u4f46play\u65f6\u9700\u8981\u5148\u6d88\u8017CPU\u6765\u89e3\u538b\u3002play\u7ed3\u675f\u540e\uff0c\u89e3\u538b\u8fc7\u7684\u6570\u636e\u5c31\u4f1a\u6d88\u5931\uff0c\u4e0b\u6b21\u518dplay\u65f6\u8fd8\u8981\u91cd\u65b0\u6d88\u8017CPU\u6765\u89e3\u538b\u3002\u9002\u7528\u4e8e\u4e0d\u592a\u7ecf\u5e38\u4f1a\u88ab\u7528\u5230\u7684\uff0c\u5076\u5c14\u624d\u4f1aplay\u7684\u97f3\u9891\u3002</p> <p>---streaming</p> <p>\u97f3\u9891\u4e0d\u4f1a\u88abload\u5230\u5185\u5b58\uff0c\u53ea\u6709\u5728play\u7528\u5230\u7684\u65f6\u5019\u624d\u4f1a\u5f53\u573a\u4ece\u78c1\u76d8\u8bfb\u53d6\u6570\u636e\uff0c\u653e\u5165\u5185\u5b58\uff0c\u518d\u89e3\u538b\u3002\u56e0\u6b64\uff0c\u5e73\u65f6\u5b8c\u5168\u4e0d\u5360\u7528\u4e00\u70b9\u70b9\u5185\u5b58\uff0c\u4f46play\u65f6CPU\u4f1a\u77ac\u95f4\u98d9\u5347\u3002\u9002\u7528\u4e8esize\u6700\u5927\u7684\u4f8b\u5982BGM\u548c\u73af\u5883\u97f3\u8fd9\u79cd\u97f3\u9891\u6587\u4ef6\u3002</p> <p>\u4e00\u8a00\u4ee5\u853d\u4e4b\uff0c\u97f3\u9891\u7684\u95ee\u9898\u5c31\u662f\uff0c\u5728\u6587\u4ef6\u5927\u5c0f\uff08\u5360\u7528\u5185\u5b58\u5927\u5c0f\uff09\uff0cruntime CPU\u6d88\u8017\uff0c\u4ee5\u53ca\u97f3\u8d28\u4e09\u8005\u4e4b\u95f4\u5bfb\u627e\u5e73\u8861\u3002\u3002\u3002\u3002\u3002\u3002</p> <p>\u5173\u4e8ecoroutine\uff1a</p> <p>yield return null;  // wait until the next frame (temporarily return, then continue execution in the next update)</p> <p>yield return new WaitForSeconds(5f);  // wait for a period of time</p> <p>WaitForSeconds delay = new WaitForSeconds(3f);  // cache the WaitForSeconds object for repeating delays</p> <p>yield return delay;</p> <p>...</p> <p>yield return delay;</p> <p>yield return new WaitForSecondsRealtime(5);  // uses unscaled time</p> <p>yield return new WaitUntil(IsEmpty);  // pauses execution until a bool delegate/lambda function evaluates to true</p> <p>yield return new WaitWhile(() =&gt; fuel &gt; 0);  // waits for a bool delegate/lambda function to be false before proceeding</p> <p>yield return new WaitForEndOfFrame();  // waits until the frame is ready</p> <p>yield return StartCoroutine(OtherCoroutine());  // Wait for another Coroutine</p> <p>Coroutine co = StartCoroutine(MyCoroutine());  // don't use the string version, store it in a var if u wanna stop it later</p> <p>yield break;  // end from inside of a Coroutine</p> <p>StopCoroutine(co);  // end from outside of a Coroutine, don't use the string version</p> <p>StopAllCoroutines();  // stops all Coroutines started by this script, even if the Coroutines are in another script.</p> <pre><code>                  // e.g. if script A starts coroutines in script B, this must be called in A, but does not work in B.\n</code></pre> <p>Coroutines end themselves once they complete.</p> <p>Coroutines are tied to the Game Object that called them, so destroying/disabling the go will end any Coroutines that were called from it, even if they're in other scripts on other gos, but disabling the script won't stop it since the go still exists. If a Coroutine on go A was called by a script in go B, destroying/disabling go A won't end the Coroutine.</p> <p>Coroutines\u53ea\u662f\u4e00\u79cdmultitasking\u7684\u4fbf\u6377\u5904\u7406\u65b9\u5f0f\uff0c\u4f46\u5e76\u4e0d\u662f\u591a\u7ebf\u7a0b\uff0c\u5176\u5b9e\u8fd8\u662f\u5728\u5355\u7ebf\u7a0b\u91cc\u4ee5interleaving\u7684\u65b9\u5f0f\u8dd1\u7684\uff0c\u4e3b\u8981\u7528\u4e8e\u62c6\u5206\u903b\u8f91\uff0c\u9002\u7528\u4e8e\u8f7b\u91cf\u7684\u5c0f\u51fd\u6570\u3002Coroutines\u662fUnityEngine\u7279\u6709\u7684\u4e00\u4e2a\u5c01\u88c5\u7684\u51fd\u6570\uff0c\u6ca1\u6709\u8fd4\u56de\u503c\u3002</p> <p>Async/Await\u624d\u662f\u771f\u6b63\u7684\u591a\u7ebf\u7a0b\u5f02\u6b65\uff0c\u662fC#\u539f\u751f\u7684\u8bed\u6cd5\uff0c\u662fnon-blocking\u7684\uff0c\u9002\u7528\u4e8e\u91cd\u91cf\u7684\u8fd0\u884c\u65f6\u95f4\u957f\u7684routines\uff0c\u4e14\u53ef\u4ee5\u6709return values\u3002\u529f\u80fd\u66f4\u5f3a\u5927\uff0c\u652f\u6301\u4e00\u5207\u4ee3\u7801\uff0c\u4e14\u4e0d\u4f1a\u6709\u5185\u5b58leak\u7684\u95ee\u9898\uff0c\u96be\u70b9\u5728\u4e8e\u8981\u624b\u52a8\u5904\u7406concurrency\u907f\u514drace conditions\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0cCoroutines\u5982\u679c\u6302\u8f7d\u7684go\u88ab\u610f\u5916\u6216\u4e0d\u5f53\u5730destroy\uff0c\u4f1a\u6709\u5185\u5b58\u6cc4\u9732\u3002</p> <p>\u6e38\u620f\u5185\u7684\u5c0f\u903b\u8f91\uff0cfire-and-forget\u7684routines\u5c31\u7528Coroutines\u5904\u7406\u5c31\u591f\u4e86\uff0c\u589e\u52a0\u53ef\u8bfb\u6027\u3002\u4f46\u5bf9\u4e8e\u4f8b\u5982\u6570\u636eIO\u4f20\u8f93\u3001\u7f51\u7edc\u5c42\u901a\u8baf\u8fd9\u79cd\u91cd\u8981\u529f\u80fd\uff0c\u4e00\u5b9a\u8981\u7528Async/Await\u3002</p> <p>// invoke\u51fd\u6570\u4e5f\u53ef\u4ee5\u8fbe\u5230\u540c\u6837\u6548\u679c\uff0c\u4f46\u6027\u80fd\u548c\u7075\u6d3b\u5ea6\u4e0d\u5982coroutines\uff0c\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u3002</p> <p>// invoke\u7684\u5bf9\u8c61\u65b9\u6cd5\u53ea\u80fd\u63a5\u53d7\u6700\u591a\u4e00\u4e2a\u53c2\u6570\uff0c\u6709\u9650\u5236\u3002\u800cStartCoroutine(MyCoroutine(arg0, arg1, arg2, ...))\u968f\u4fbf\u6765\u51e0\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u3002</p> <p>Invoke()  // delay a function call</p> <p>InvokeRepeating()  // delay a function call and repeat it every x seconds</p> <p>Rider\u91cc\u5bf9\u4e8e\u5df2\u7ecfbuild\u8fc7\u7684\u811a\u672c\u6587\u4ef6\uff0c\u539f\u6765\u8fd8\u53ef\u4ee5\u67e5\u770bIL\uff08CIL\u4e2d\u95f4\u8bed\u8a00\uff09\u4ee3\u7801\uff0c\u76f8\u5f53\u4e8e\u6c47\u7f16\uff0c\u53ef\u4ee5\u7528\u9f20\u6807\u67e5\u770b\u6bcf\u4e2a\u547d\u4ee4\u7684\u542b\u4e49\u4ec0\u4e48\u7684\u7528\u4e8e\u8c03\u4f18\u3002</p> <p>You can multiply the Quaternion and the Vector3 and you'll get back a Vector3 that has been rotated by that Quaternion:</p> <p>Vector3 rotatedDirection = transform.rotation * direction;</p> <p>TransformPoint vs TransformDirection vs TransformVector</p> <p>https://answers.unity.com/questions/1021968/difference-between-transformtransformvector-and-tr.html</p> <p>When using coroutines for physics calculations be sure to use WaitForFixedUpdate NOT WaitForUpdate.</p> <p>Keep your game within 6000 units of the origin.</p> <p>Keep your forces below 10,000 Newtons.</p> <p>Keep your masses bellow 10000 kg and above .01 kg.</p> <p>Unity allows many objects to have the same name, but every object has a unique Instance ID.</p> <p>It is good practice to include an object's instance ID as well as its name in debug statements:</p> <p>Debug.Log(go.name + \":\" + go.GetInstanceID());</p> <p>Instance ID\u975e\u5e38\u5bb9\u6613\u83b7\u53d6\uff0c\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2ago\uff0c\u53ea\u8981\u70b9\u51fb\u5b83\u7684Inspector\u7684\u53f3\u4e0a\u89d2\uff08lock\u56fe\u6807\u65c1\u8fb9\uff09\uff0c\u5c06normal\u5207\u6362\u6210debug\u8fdb\u5165debug mode\uff0c\u90a3\u4e48Inspector\u5c31\u4f1a\u81ea\u52a8\u663e\u793a\u51fa\u6bcf\u4e2acomponent\u7684Instance ID\uff0c\u540c\u65f6\u8fd8\u4f1a\u663e\u793a\u51fa\u811a\u672c\u91cc\u7684private\u53d8\u91cf\uff08\u7070\u8272\u7684\uff0c\u53ea\u662f\u663e\u793a\uff0c\u4e0d\u80fd\u4fee\u6539\uff09\u7684\u6700\u65b0\u503c\u3002\u5728debug\u6a21\u5f0f\u4e0b\uff0c\u5982\u679c\u811a\u672c\u91cc\u7684\u67d0\u4e2a\u65b9\u6cd5\u524d\u9762\u6807\u6ce8\u4e86[ContextMenu(\"...\")]\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5right click\u90a3\u4e2a\u811a\u672ccomponent\uff0c\u5728\u83dc\u5355\u4e2d\u9009\u62e9\u90a3\u4e2a\u65b9\u6cd5\u7684\u540d\u5b57\uff0c\u4e8e\u662f\u8be5\u65b9\u6cd5\u5c31\u4f1a\u88ab\u624b\u52a8\u7684\u8c03\u7528\u4e00\u6b21\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u770b\u5230\u65b9\u6cd5\u662f\u4e0d\u662f\u8d77\u4f5c\u7528\u4e86\u3002</p> <p>Vector3.Distance(a,b) is the same as (a-b).magnitude\uff0c\u6027\u80fd\u4e0a\u51e0\u4e4e\u4e00\u6837\uff0c\u901a\u5e38\u4e0d\u7528\u7ea0\u7ed3\uff0c\u9664\u975e\u662f\u5faa\u73af\u505a\u51e0\u4e07\u6b21\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u5177\u4f53\u54ea\u4e2a\u5feb\u53d6\u51b3\u4e8eCPU\u7684FPU\uff08floating point coprocessor\uff09\uff0c\u8981\u5728\u4e0d\u540c\u7684\u8bbe\u5907\u4e0a\u8bd5\u4e00\u8bd5\u3002\u5982\u679c\u662f\u6bd4\u8f83\u4e24\u4e2a\u5411\u91cf\u7684\u957f\u5ea6\uff08\u6a21\uff09\uff0c\u4e0d\u8981\u7528magnitude\uff0c\u800c\u662f\u53bb\u6bd4\u8f83\u6a21\u7684\u5e73\u65b9\uff0c\u6bd4\u8f83Vector3.sqrMagnitude\uff0c\u8fd9\u6837\u51cf\u5c11\u4e86\u4e24\u4e2a\u5f00\u6839\u53f7\u7684\u64cd\u4f5c\u4f1a\u66f4\u5feb\uff0c\u56e0\u4e3aMathf.Sqrt\u662f\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u6bd4\u4e58\u6cd5\u6162\u5f88\u591a\u3002\u6bd4\u8f83\u65f6\u5343\u4e07\u4e0d\u8981\u7528==\u5224\u65ad\uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u662f\u6709\u7cbe\u5ea6\u95ee\u9898\u7684\uff0c\u8981\u7528Mathf.Abs(x,y) &lt; episilon\u3002</p> <p>\u98de\u884c\u65f6\u52a0\u4e0a\u7fc5\u8180\u3002\u8fd9\u4e2a\u5148\u4e0d\u505a\uff0c\u7b49\u628a\u73a9\u5bb6\u7684character\u66ff\u6362\u6210\u54e5\u7279\u841d\u8389\u4e86\u518d\u52a0\u4e0a\u3002\u7fc5\u8180\u5fc5\u987b\u662fhumanoid avatar\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u88ab\u5305\u542b\u5728\u98de\u884c\u7684animation clip\u4e2d\u3002\u5e73\u65f6\u7fc5\u8180\u5904\u4e8edisable\u72b6\u6001\uff0c\u6ca1\u6709collider\u3002\u5f53\u52a8\u753b\u8fdb\u5165flystate\u7684\u65f6\u5019\uff08\u800c\u4e0d\u662fkcc\u8fdb\u5165air mode\uff09\uff0c\u518d\u901a\u8fc7OnEnable\u548cOnDisable\u8fdb\u884c\u5f00\u5173\uff0c\u540c\u65f6\u5f00\u542fcollider\u3002 \u4e3a\u4e86\u6a21\u62df\u7fc5\u8180\u4ece\u540e\u80cc\u9010\u6e10\u957f\u51fa\u6765\u7684\u6548\u679c\uff0c\u4e0d\u8981\u76f4\u63a5\u8bbe\u7f6eenabled\u7684flag\uff0c\u800c\u662fstart\u4e00\u4e2acoroutine\uff0c\u4ece\u7fc5\u6839\u7684\u90e8\u4f4d\u628amesh\u7684\u900f\u660e\u5ea6\u4e00\u70b9\u70b9\u8bbe\u7f6e\u4e3a1\u3002\u540c\u65f6\uff0c\u7fc5\u8180\u81ea\u5e26\u4e00\u4e2atrail renderer\uff0c\u6700\u597d\u662f\u7528particle\u505a\u7684\uff0c\u7fc5\u8180\u5b8c\u5168\u4f38\u5c55\u5f00\u4e86\u4ee5\u540e\uff0c\u5f00\u542f\u7fc5\u8180go\u4e0a\u7684trail renderer\u7684\u5f00\u5173\uff08\u811a\u672c\u63a7\u5236emitting\u4e3atrue or false\uff09\u3002</p> <p>VRoid\u505a\u81ea\u5df1\u7684\u54e5\u7279\u841d\u8389\uff0c\u767d\u4e1d\uff0c\u9ed1\u8272\u5706\u5934\u841d\u8389\u76ae\u978b\uff0c\u9ed1\u8272\u8fde\u8863\u88d9\uff0c\u5948\u53f6\u5f0f\u6cd5\u6756\uff0c\u540d\u5b57\u53eb\uff1f\uff1f\uff1f\u3002retarget Satomi\u7684\u52a8\u753b\u5230\u5979\u8eab\u4e0a\u3002\u53e6\u4e00\u5957\u88c5\u675f\u662f\uff0c\u6c34\u84dd\u8272\u8fde\u8863\u88d9\uff0c\u767d\u4e1d\uff0c\u52a0\u4e00\u4e2a\u94f6\u8272\u7684\u811a\u73af\uff0c\u7ea2\u8272\u9ad8\u8ddf\u978b\u6216\u8005\u628ashirley\u653e\u5230blender\u91cc\u6539\u4e00\u4e0b\uff1f\u5b66\u4e60blender\u7684\u57fa\u7840\u505a\u6210texture\u53ef\u4ee5\u6362\u88c5\u7684\uff0cruntime\u66ff\u6362skinnedMeshRenderer\u3002</p> <p>\u4e3a\u4ec0\u4e48slope\u592a\u9017\u7684\u8bdd\uff0c\u4f1a\u4ecemove\u8fdb\u5165airborne\uff1f\uff1f\uff1f\u96bedebug\uff0c\u4ee5\u540e\u518d\u770b\u3002\u5b9e\u5728\u4e0d\u884c\u5c31\u628a\u592a\u9661\u7684slope\u8fb9\u6cbf\u524d\u9762\u52a0\u4e2abox collider\u3002</p> <p>walk up/down stairs\uff0c\u6ca1\u6709animation\uff0c\u6709\u4e86animation\u518d\u8865\u3002\u697c\u68af\u4e0a\u4e0d\u51c6run\u53ea\u80fdwalk\uff0c\u7ed9\u6bcf\u4e2a\u697c\u68af\u8bbe\u7f6e\u4e00\u4e2atrigger collider\uff0c\u5728KCC\u91cc\u5904\u7406\u3002 crouch\u7684\u52a8\u753bplay\u7684\u65f6\u5019\uff0c\u811a\u4f1a\u9677\u5165\u5730\u9762\uff0c\u8981\u4e48\u4fee\u6539animation\uff0c\u8981\u4e48\u7528IK\u89e3\u51b3\u3002</p> <p>TPS\u7684\u65f6\u5019\uff0ccrosshair\u7684rotation\u8981clamp\u5728\u4e00\u5b9a\u8303\u56f4\u5185\uff0c\u4fdd\u8bc1\u73a9\u5bb6\u7684look at ik\u52a8\u753b\u770b\u8d77\u6765\u6b63\u5e38\u3002 FPS\u7684\u65f6\u5019\uff0c\u73a9\u5bb6\u81ea\u52a8\u968f\u7740crosshair\u65cb\u8f6c\uff0c\u6240\u4ee5\u65e0\u6240\u8c13\u3002 \u505aIK\uff01\uff01\uff01\uff01\uff01\u53c2\u8003animancer\u7684\u4f8b\u5b50\u548c\u4e70\u7684\u7d20\u6750\u3002============================================================== https://forum.unity.com/threads/foot-ik-system-without-weight-curves.470853/ \u722c\u697c\u68af\u5c31\u7528\u666e\u901a\u7684walk\u52a8\u753b\uff0c\u4f46\u662f\u8981\u8ba1\u7b97\u597d\u811a\u843d\u5730\u7684\u4f4d\u7f6e\uff0c\u4e0d\u8981\u5728\u53f0\u9636\u7684ledge\u4e0a\u3002 \u4eba\u7269\u7684\u811a\u6b65\u58f0\uff0cjump\u58f0\uff0c\u5404\u79cd\u52a8\u753b\u97f3\u6548\u52a0\u4e0a\u3002\u7528animancer\u7684event\u5b9e\u73b0\u3002</p> <p>\u5230\u6b64\u3002base layer\u5168\u90e8\u641e\u5b9a\u3002</p> <p>combat layer\uff0c\u505a\u4e0a\u534a\u8eab\u7684\u7b80\u5355\u6b66\u5668\u52a8\u753b\uff0cmelee attack\u6709\u4e09\u4e2acombo\uff08\u5168\u8fde\u9700\u8981root motion\uff0c\u5728KCC\u91cc\u5df2\u7ecf\u5199\u597d\u4e86\uff0c\u76ee\u524d\u6ce8\u91ca\u6389\u4e86\uff09\uff0c\u6ca1\u6709block\u52a8\u4f5c\u3002 range attack\u5c31\u662f\u51e0\u4e2a\u7b80\u5355\u65bd\u6cd5\u52a8\u4f5c\uff0c\u52a0\u4e0acrosshair\uff08\u56fa\u5b9a\u8ddd\u79bb\uff09\u4ee5\u540e\uff0c\u4ee5crosshair\u4e3atarget\u505aaim ik\u3002\u6709\u9632\u5fa1\u9635\u9b54\u6cd5\u66ff\u4ee3block\u3002 (\u53c2\u8003Animancer\u7684layer example\u548cIK example\uff0c\u53ef\u80fd\u8fd8\u8981\u770b\u4e0bevent\u7684example)</p> <p>aim IK\u4ee5\u53ca\u8ba9\u624b\u81c2\u81ea\u7136\u7684\u53bbfollow\u6293\u4f4f\u9570\u5200\uff0c\u7528animation rigging\u5728editor\u91cc\u8bbe\u7f6e\u597d\uff0c\u518d\u914d\u5408OnAnimatorIK()\u53bb\u66f4\u65b0\u5904\u7406\u3002 foot IK\u53c2\u8003\u90a3\u4e2a\u7d20\u6750\uff0c\u91cd\u5199\u7d20\u6750\uff0c\u81ea\u5df1\u7528OnAnimatorIK()\u5904\u7406\u3002 Shirley\uff0c\u5e73\u65f6\u8d70\u8def\u4e0d\u5e26\u7fc5\u8180\u548c\u9570\u5200\uff0c\u8fdb\u5165\u98de\u884c\u72b6\u6001\u7684\u65f6\u5019\uff0c\u52a8\u753b\u5c55\u5f00\u7fc5\u8180\u5e76\u542f\u52a8\u9570\u5200\uff0c\u9570\u5200\u76f8\u5f53\u4e8e\u662f\u98de\u884c\u7684\u626b\u5e1a\u3002\u5982\u679c\u9700\u8981\u6218\u6597\uff0c\u5fc5\u987b\u5148\u6309\u952e\uff0c\u628a\u9570\u5200\u62ff\u51fa\u6765\uff0c\u5206\u4e24\u79cd\u6a21\u5f0f\uff0c\u8fd1\u6218\u628a\u9570\u5200\u52a8\u753b\u53d8\u5927\uff0c\u53ef\u4ee5\u6325\u821e\u9020\u6210\u7269\u7406\u4f24\u5bb3\uff0c\u4f46\u65e0\u6cd5\u4f7f\u7528\u9b54\u6cd5\uff0c\u4e5f\u6ca1\u6709\u51c6\u661f\u3002\u8fdc\u7a0b\u653b\u51fb\u7684\u8bdd\u8981\u628a\u9570\u5200\u52a8\u753b\u53d8\u6210\u624b\u53ef\u4ee5\u63e1\u4f4f\u7684\u9b54\u6756\u5927\u5c0f\uff0c\u7c89\u6c34\u6676\u7684\u90e8\u4f4d\u7528\u7c92\u5b50\u7cfb\u7edf\u6216\u8005shader graph\u505a\u4e2a\u52a8\u753b\u7279\u6548\uff0c\u7528\u4e8e\u84c4\u529b\u65bd\u6cd5\u7684\uff0c\u4f46\u8fdc\u7a0b\u72b6\u6001\u4e0b\u65e0\u6cd5\u7269\u7406\u653b\u51fb\u3002 \u98de\u884c\u6216\u6e38\u6cf3\u72b6\u6001\u4e0b\u5982\u679c\u9700\u8981\u6218\u6597\u7684\u8bdd\uff0c\u53ea\u5229\u7528\u7fc5\u8180\u8fdb\u884c\u98de\u884c\uff0c\u800c\u9570\u5200\u7528\u4e8e\u6218\u6597\u3002 \u8fd1\u6218\u6a21\u5f0f\u4e0b\uff0cTPS\u7684rotation\u8c03\u6210\u548cFPS\u4e00\u6837\uff0c\u4eba\u7269\u968f\u7740\u9f20\u6807\u7684\u8f6c\u52a8\u800c\u8f6c\u52a8\uff0c\u4e0d\u80fd\u671d\u5411\u76f8\u673a\u5f80\u540e\u8dd1\uff0c\u53ea\u80fd\u540e\u9000\uff0c\u6240\u4ee5\u8981\u6709\u4e2a\u540e\u9000\u7684\u52a8\u753b\u3002 \u8fdc\u7a0b\u6a21\u5f0f\u4e0b\uff0c\u505a\u4e2a\u51c6\u661f\uff0c\u51c6\u661f\u7528UI-gameobject\u6a21\u5f0f\u5b9e\u73b0\uff0c\u5e76\u8bbe\u7f6e\u4e3a\u4e0a\u534a\u8eabIK\u7684target\u3002\u540c\u65f6\uff0c\u5de6\u53f3\u952e\u6539\u6210\u5de6\u53f3\u7684strafe\u79fb\u52a8\uff0c\u800c\u4eba\u7269\u4e0d\u8f6c\u5411\u3002</p> <p>\u3010XXX\u3011\u7ee7\u7eed\u5237CatlikeCoding\u7684\u6559\u7a0b\u3002\u5148\u628a\u6240\u6709\u6559\u7a0b\u8fc7\u4e00\u904d\uff0c\u4e0d\u7528\u5b9e\u73b0\uff0c\u53ea\u7406\u89e3\u77e5\u8bc6\u5185\u5bb9\u3002\u540e\u9762\u80af\u5b9a\u8981\u56de\u6765\u8fc7\u7b2c\u4e8c\u904d\u7684\u3002\u8fc7\u5b8c\u4e86\u7b2c\u4e00\u904d\uff0c\u4f1a\u6709\u4e2a\u66f4\u5b8c\u6574\u7684\u5927\u5c40\u89c2\uff0c\u5bf9\u63a5\u4e0b\u6765\u7684\u5f00\u53d1\u4f1a\u6709\u63d0\u901f\u7684\u6548\u679c\u3002\u4e89\u53d6\u4e24\u5468\u4e4b\u5185\u5237\u5b8c\uff0c\u53ea\u8981\u9605\u8bfb\u548c\u5728atom\u91cc\u8bb0\u7b14\u8bb0\u5c31\u884c\u4e86\u3002</p> <p>\u3010XXX\u3011--------------\u505aQuantum Console\uff0c\u8fd9\u4e2a\u6539\u4e00\u4e0bdemo\u7d20\u6750\u5c31\u597d\u5e94\u8be5\u5f88\u5feb\u7684\uff01\uff01\uff01 \u3010XXX\u3011--------------\u662f\u65f6\u5019\u628a\u5730\u56fe\u6362\u6389\u4e86\uff0c\u5feb\u770b\u5410\u4e86\u3002\u5f00\u4e00\u4e2a\u65b0\u7684project\u628aHDRP\u8bd5\u4e00\u4e0b\uff0c\u4e0d\u5361\u7684\u8bdd\uff0c\u628aCrest Ocean\u7684\u6c34\u548ceasy road\u548cGaia\u7684demo scene\u5bfc\u5165\u4e24\u4e2a\u4e0d\u540c\u7684scene\uff0c\u7528HQ Portal\u5207\u6362\u573a\u666f\uff0c\u7136\u540e\u628askybox\u6362\u6210allsky\u7684\u7d20\u6750\uff0c\u7528\u4e00\u4e9b\u4e70\u7684mesh effects\u3002\u6216\u8005\u5148\u5b66\u4e00\u4e0bcatlikecoding\u7684SRP\u7ba1\u7ebf\u518d\u8bf4\uff0c\u770b\u80fd\u4e0d\u80fdcustom\u4e00\u4e9b\u4e1c\u897f\u3002\u4e0d\u8981\u7528URP\uff0cURP\u867d\u7136\u6027\u80fd\u5f88\u5feb\uff0c\u6bd4default\u8fd8\u5feb\uff0c\u4f46\u662f\u53ea\u9002\u5408mobile\u548c2D\u6e38\u620f\uff0c\u6211\u65e9\u665a\u90fd\u662f\u8981\u7528HDRP\u7684\u3002 \u4f20\u9001\u95e8\u7edf\u4e00\u7528\u84dd\u8272\u534a\u900f\u660e\uff0c\u9664\u975e\u662f\u7279\u6b8a\u5730\u56fe\u7684\u7279\u6b8a\u5165\u53e3\u3002\u4f20\u9001\u95e8\u6709\u4e2aabstract\u7c7b\u7684\u811a\u672c\uff0c\u5b9a\u4e49\u4f20\u9001\u95e8\u7684\u57fa\u672c\u529f\u80fd\uff0c\u5176\u4e2d\u5305\u62ec\u4e00\u4e2aproperty\u5b58\u50a8\u4f20\u9001\u76ee\u7684\u5730\uff08\u53ef\u4ee5\u4e3a\u591a\u9009\uff09\uff0c\u53e6\u4e00\u4e2aproperty CanTeleport\u5b9a\u4e49\u4f20\u9001\u662f\u5426\u662fallowed\u3002\u6bcf\u4e2a\u4f20\u9001\u95e8\u90fd\u6302\u4e00\u4e2a\u811a\u672c\u53bbimplement\u8fd9\u4e2a\u62bd\u8c61\u7c7b\uff0cCanTeleport\u53d6\u51b3\u4e8e\u73a9\u5bb6\u7684\u7b49\u7ea7\u3001\u6545\u4e8b\u7ebf\u89e6\u53d1\u7b49\u6761\u4ef6\u3002\u6bcf\u4e2a\u4f20\u9001\u95e8\u90fd\u6709\u4e2atrigger collider\uff0c\u5f53\u73a9\u5bb6\u8fdb\u5165\u8303\u56f4\u65f6\u89e6\u53d1OnTriggerEnter\uff0c\u5982\u679cCanTeleport\u4e3atrue\uff0c\u4f20\u9001\u95e8\u53d8\u4e3a\u7eff\u8272\uff0c\u5426\u5219\u53d8\u4e3a\u7ea2\u8272\u3002</p> <p>\u3010\u589e\u52a0feature\u3011\u5f53\u7ad9\u5728\u65cb\u8f6c\u7684\u5e73\u53f0\u4e0a\u65f6\uff0c\u4eba\u7269\u8981\u968f\u7740\u5e73\u53f0\u4e00\u8d77\u65cb\u8f6c\u548c\u79fb\u52a8\uff0cFPS\u65f6camera\u5e26\u52a8\u4eba\u7269\u65cb\u8f6c\uff0cTPS\u65f6camera\u4e0d\u65cb\u8f6c\u53eafollow\u3002\u5229\u7528\u65b0\u5199\u7684\u90a3\u4e2aMovingPlatform\u7684\u811a\u672c\u3002\u6d4b\u8bd5\u4e00\u4e0bmotor\u4e0a\u7684rigidbody interaction type\u7684\u9009\u9879\u3002----\u6682\u65f6\u53d6\u6d88\uff0c\u7b49\u65b0\u7684DOTS Strider CC\u51fa\u6765\u4e86\u91cd\u5199\uff0c\u65b0\u7684CC\u975e\u5e38\u5f3a\u5927\u3002 \u3010\u589e\u52a0feature\u3011\u5bfc\u5165car controller\uff0c\u5b9e\u73b0\u4eba\u7269\u5f00\u8f66\u7684\u529f\u80fd\uff0ccamera\u8981\u6839\u636e\u8f66\u5b50\u7684\u6643\u52a8\u800cshake\u3002 \u3010\u589e\u52a0feature\u3011\u7528KCC\u63a7\u5236AI\uff0c\u53c2\u8003example\u7684AI\u811a\u672c\u3002----\u6682\u65f6\u53d6\u6d88\uff0c\u7b49\u65b0\u7684DOTS Strider CC</p> <p>\u3010fix\u3011planet\u76ee\u524d\u7684\u903b\u8f91\u662f\u901a\u8fc7teleporter\u7684\u8fdb\u5165\u800c\u6539\u53d8gravity\u7684\uff0c\u628a\u8fd9\u4e2a\u6269\u5c55\u4e00\u4e0b\uff0c\u5f53\u73a9\u5bb6\u9760\u8fd1\u661f\u7403\u4e00\u5b9a\u8ddd\u79bb\u7684\u65f6\u5019\uff0cOnTriggerEnter\u5c31\u6539\u53d8gravity\u3002 \u3010\u589e\u52a0feature\u3011\u642d\u7b2c\u4e00\u7248\u7b80\u6613\u5730\u56fe\uff0c\u5bfc\u5165HDRP\u5305\u548c\u76f8\u5173\u7d20\u6750\uff0c\u642d\u5efa\u65cb\u8f6c\u7684planet(\u7528planet\u811a\u672c)\u4ee5\u53cateleporter\u3002</p> <p>\u3010\u5f00\u53d1UI\u7cfb\u7edf\u3011 \u5b66\u4e60Unity UI 1.0.0 \uff08UGUI\uff09\uff0c\u5b66\u4e60\u8d2d\u4e70\u7684MMO UI 11\u3002 \u6700\u65b0\u7684\u5b98\u65b9\u3010UI Toolkit\u3011\u8fd8\u5728\u5f00\u53d1preview\u9636\u6bb5\uff0c\u6682\u65f6\u89c2\u671b\u3002\u8fd1\u51e0\u5e74\u8fd8\u662f\u4ee5UGUI\u4e3a\u91cd\u5fc3\u3002</p> <p>\u3010fix\u3011refine loading screen\u7684loading bar\uff0c\u81ea\u5df1\u5199\u811a\u672c\u66ff\u4ee3\u6389UI\u81ea\u5e26\u7684\u90a3\u4e2a\u5f88\u4e11\u7684slider\uff0c\u7528MMO UI 11\u5305\u91cc\u73b0\u6210\u7684progress bar\u7d20\u6750\u3002 \u3010\u589e\u52a0feature\u3011\u5207\u5230UI\u754c\u9762\uff0c\u6216\u8005\u5f39\u51faUI\u83dc\u5355\u7684\u65f6\u5019\uff0c\u8981\u542f\u7528\u9f20\u6807cursor\u3002Cursor.visible = true; Cursor.lockState = CursorLockMode.Confined; \u3010\u589e\u52a0feature\u3011\u98de\u884c\u72b6\u6001\u65f6\uff0c\u505a\u4e2ameter\u7684radial\u8868\u76d8F3\u663e\u793a\u9ad8\u5ea6\u548c\u901f\u5ea6\uff0c\u6ca1\u627e\u5230\u7d20\u6750\uff0c\u7b49\u5b66\u4e86Photoshop\u518d\u770b\uff0c\u8868\u9488\u5212\u8fc7\u7684\u533a\u57df\u7528shader\u505a\u6210\u534a\u900f\u660e\u7684\u5f69\u8272\u72b6\u6001\u3002</p> <p>\u3010\u5f00\u53d1\u6218\u6597\u7cfb\u7edf\uff08\u52a8\u753b\u548cIK\u5df2\u7ecf\u505a\u5b8c\u4e86\uff09\u3011 \u5148\u5b66\u4e60\u89c6\u9891\uff0c\u786e\u5b9a\u597d\u67b6\u6784\u548c\u8bbe\u8ba1\uff01\uff01\uff01\uff01 https://www.youtube.com/watch?v=FGVkio4bnPQ   // \u5de5\u5382\u6a21\u5f0f https://www.youtube.com/watch?v=nqAHJmpWLBg   // \u57fa\u4e8ereflection\u7684\u6bd4\u8f83\u9ad8\u7ea7\u7684C# Architecture from Jason https://www.youtube.com/watch?v=G1bd75R10m4   // State Machine \u8fd9\u4e2aSO\u7684unite talk\u975e\u5e38\u4e13\u4e1a\uff0c\u82b1\u4e00\u5468\u65f6\u95f4\u7814\u7a76\u4e00\u4e0b\u600e\u4e48\u505aarchitecture\uff0c\u7528SO\u66ff\u4ee3\u6389\u4f20\u7edf\u7684singleton\u548cunity event\u3002 https://www.youtube.com/watch?v=raQ3iHhE_Kk melee combat\u7528\u7b2c\u4e09\u4eba\u79f0\uff0cranged combat\u7528\u7b2c\u4e00\u4eba\u79f0\u3002\u5c31\u7b97\u662fTPS\u89c6\u89d2\uff0c\u4e5f\u8981\u5728\u5c4f\u5e55\u4e2d\u95f4\u52a0\u4e00\u4e2a\u5f88\u6de1\u7684crosshair\uff08\u5f53\u9f20\u6807\u79fb\u5230\u653b\u51fb\u5bf9\u8c61\u8eab\u4e0a\u65f6\uff0c\u52a8\u6001\u9ad8\u4eae\uff09 \u7136\u540e\uff0c\u5f00\u59cb\u7814\u7a76\u8bbe\u8ba1\u600e\u4e48\u548c\u5e8f\u5217\u5316\u642d\u914d\uff01\uff01\uff01\uff01\u628aSAVE LOAD\u7684\u529f\u80fd\u548c\u5b58\u50a8\u6570\u636e\u7684\u65b9\u5f0f\uff08\u6570\u636e\u5e93\u6216\u7b80\u5355\u6587\u672c\u7b49\u7b49\uff09\u5b9e\u73b0\u51fa\u6765\uff01\uff01\uff01\uff01 \u7136\u540e\uff0c\u5f00\u59cb\u641e\u4ed3\u5e93\u7cfb\u7edf\uff01\uff01\uff01\u8bd5\u8bd5\u770bscriptable object\u3002 \u5b66\u4e60ScriptableObject Tutorial and Template: https://www.raywenderlich.com/2826197-scriptableobject-tutorial-getting-started https://www.youtube.com/watch?v=HQNl3Ff2Lpo https://www.youtube.com/watch?v=SmnjRCa_iO4&amp;t=71s https://www.youtube.com/watch?v=LdlKiKC6mr4 https://learn.unity.com/tutorial/introduction-to-scriptable-objects#5cf187b7edbc2a31a3b9b123 \u7b49\u73a9\u5bb6\u7684\u7cfb\u7edf\u505a\u597d\u4e86\uff0c\u4fee\u6539controller\uff0c\u8ba9\u73a9\u5bb6\u5728free\u6a21\u5f0f\u4e2d\u98de\u884c\u7684\u65f6\u5019\u6bcf\u79d2\u6d88\u8017\u4e00\u70b9\u9b54\u6cd5\u3002\u4e00\u65e6mana\u8017\u5c3d\uff0c\u5c31\u81ea\u52a8\u5207\u56dedefault\u72b6\u6001\uff0c\u53ef\u80fd\u4f1a\u6454\u6b7b\u3002 \u5728editor\u91cc\uff0c\u73a9\u5bb6\u7684hp mana\u8fd9\u4e9b\u5c5e\u6027\uff0c\u7528naughtyAttributes\u7684ProgressBar\u505a\uff0c\u770b\u4e0a\u53bb\u66f4\u76f4\u89c2\u3002</p> <p>\u3010\u589e\u52a0feature\u3011\u6218\u6597\u65f6\u53ef\u4ee5\u6309Q\uff0c\u5f39\u51fa\u4e00\u4e2aradial\u7684\u5706\u5f62UI\u83dc\u5355\uff0c\u4f9b\u73a9\u5bb6\u5207\u6362\u6b66\u5668\u3002</p> <p>\u3010save load\u7cfb\u7edf\u3011json\u5e8f\u5217\u5316 https://www.youtube.com/watch?v=4h2CvULKqic</p> <p>\u3010\u5347\u7ea7\u52302020 LTS\u7248\u672c\uff0c\u6625\u5b63\u53d1\u5e03\u3011 \u3010fix\u3011\u628a\u6807\u6ce8\u4e86\u3010C# 8.0 feature not yet supported\u3011\u7684\u6ce8\u91ca\u5168\u90e8\u62ff\u6389\uff0c\u66ff\u6362\u4e4b\u524d\u7684\u975eswitch expression\u8bed\u6cd5\u7248\u672c\u3002</p> <p>\u6210\u5c31\u7cfb\u7edf\uff1a Observer pattern\u5b9e\u73b0\u6e38\u620f\u5185\u7684\u6210\u5c31system\uff0c\u5f53\u73a9\u5bb6\u5b8c\u6210\u4e00\u5b9a\u6570\u91cf\u7684kill\u6216\u4ec0\u4e48\u7684\uff0c\u7ed9\u4e88manacoin\u7684\u5956\u52b1\u4ec0\u4e48\u7684\uff0c\u6216\u8005\u89e3\u9501\u67d0\u4e9b\u529f\u80fd\uff0c\u901a\u8fc7UI\u63d0\u793a\u6765\u53cd\u5e94\u3002 https://www.youtube.com/watch?v=Yy7Dt2usGy0</p> <p>----------------------------------------------\u9065\u9065\u65e0\u671f---------------------------------------------- \u3010\u589e\u52a0feature\u3011\u5b66\u4e60\u65b0\u7684Input System\u5305\uff0c\u521b\u5efaInputAction asset\uff0c\u7136\u540e\u7528\u65b0\u7684input\u7cfb\u7edf\u628a\u52a8\u753b\u548cKCC\u811a\u672c\u4ee5\u53ca\u76f8\u673a\u6574\u5408\u5728\u4e00\u8d77\u3002\u6700\u597d\u7b49DOTS Strider\u51fa\u6765\u518d\u8bf4\u3002</p> <p>\u3010Strider\u53d1\u5e03\u3011\u628a\u73b0\u6709\u7684KCC\u6362\u6210\u65b0\u7684DOTS Strider controller\uff0c\u5e76\u628adefault/auto/climb/swim/air\u51e0\u79cd\u6a21\u5f0f\u7684\u67b6\u6784\u6539\u6389\u3002\u73b0\u6709\u7684controller\u662f\u4e00\u4e2a\u5dee\u4e0d\u591a1000\u884c\u4ee3\u7801\u7684\u5355\u4e2a\u811a\u672c\uff0c\u6240\u6709\u7684controlMode\u90fd\u96c6\u4e2d\u5728\u4e00\u8d77\uff0c\u7528\u4e00\u5806switch-case\u5207\u6362\uff0c\u867d\u7136\u4e0d\u5f71\u54cdperformance\uff0c\u4f46\u662fdesign\u975e\u5e38bad\uff0c\u53ef\u8bfb\u6027\u8f83\u5dee\uff0c\u4e14\u6539\u8d77\u6765\u6ca1\u90a3\u4e48\u65b9\u4fbf\u3002\u6709\u4e86Strider\u4ee5\u540e\uff0c\u628a\u6bcf\u4e2acontrolMode\u653e\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u811a\u672c\u91cc\uff0c\u6bcf\u4e2acontrolMode\u90fd\u662f\u6709\u9650\u72b6\u6001\u673a\u91cc\u7684\u4e00\u4e2astate\uff0c\u7136\u540e\u6709\u4e00\u4e2a\u201cbrain\u201d\u811a\u672c\u53bb\u7ba1\u7406\u6240\u6709\u7684state\u4ee5\u53castate\u4e4b\u95f4\u7684transition\u3002\u8fd9\u6837\u7684\u8bdd\u6211\u7684character controller\u5c31\u5206\u6210\u591a\u4e2a\u811a\u672c\uff0c\u53ef\u8bfb\u6027\u5f88\u597d\uff0c\u6bcf\u6b21\u6539\u53ea\u8981\u6539\u4e00\u4e2acontrolMode\u6240\u5bf9\u5e94\u7684state\u5c31\u53ef\u4ee5\u4e86\u3002 \u3010DOTS\u53d1\u5e03\u3011 \u628a\u6574\u4e2a\u9879\u76eemigrate\u5230DOTS\u7248\u672c\uff0c\u6452\u5f03\u4f20\u7edf\u7684OOP\u548cmonobehavior\uff0c\u91c7\u7528ECS\u7684data/code\u9694\u79bb\u7684\u65b9\u5f0frefactor\u4ee3\u7801\u3002 \u73b0\u9636\u6bb5Burst\u7f16\u8bd1\u5668\u548cECS\u5305\u8fd8\u6709\u5f88\u591abug\uff0c\u4ee5\u53ca\u975e\u5e38\u591a\u672a\u5b8c\u6210\u7684feature\u3002</p> <p>\u3010\u672a\u6765\u6269\u5c55\u3011\u7528\u811a\u672c\u63a7\u5236Shirley\u7684\u8868\u60c5\uff0c\u6bd4\u5982\u6309F2\u65f6\u4ece\u9ed8\u8ba4\u9010\u6e10blend\u5230\u751f\u6c14\uff0chttps://docs.unity3d.com/Manual/BlendShapes.html \u3010\u672a\u6765\u6269\u5c55\u3011\u7528animation rigging\uff0c\u53c2\u8003Brackeys\u89c6\u9891\u52a0\u4e0aheadAim rig\uff0c\u4f7f\u5f97FPS\u7684\u5934\u90e8\u968f\u7740\u76f8\u673a\u8f6c\u52a8\uff0c\u6c34\u5e73\u6b63\u8d1f100\u5ea6\u4e4b\u5185\uff0c\u5782\u76f4\u6b63\u8d1f90\u5ea6\u3002TPS\u4e0d\u8f6c\u52a8\u3002 \u3010\u672a\u6765\u6269\u5c55\u3011\u5b9e\u73b0\u52a8\u753b\u7684IK\uff0c\u4ee5\u53ca\u4eba\u7269\u6362\u88c5\uff0c\u4ee5\u53caTarget Matching\u3010https://docs.unity3d.com/Manual/TargetMatching.html\u3011\u8fd9\u51e0\u4e2a\u529f\u80fd\u6bd4\u8f83\u96be\uff0c\u5f88\u5927\uff0c\u76ee\u524d\u9636\u6bb5\u4e0d\u597d\u5b66\uff0c\u592a\u5360\u7528\u65f6\u95f4\u4e86\uff0c\u800c\u4e14\u53ea\u662f\u5fae\u8c03\u7684\u7cbe\u7ec6\u5c0f\u529f\u80fd\uff0c\u4e0d\u503c\u5f97\u73b0\u5728\u82b1\u592a\u591a\u65f6\u95f4\u3002</p> <p>\u7f51\u7edc\u90e8\u5206\u592a\u9ebb\u70e6\u4e86\uff0c\u4ee5\u540e\u518d\u8bf4\uff1a \u7814\u7a76\u4e00\u4e0bkinematicCharacterController\u4e2d\u7684network\u90e8\u5206\uff0c\u770b\u4e00\u4e0b\u5982\u4f55\u624b\u52a8\u63a7\u5236simulation\u548csetTick\uff0c\u5904\u7406\u7f51\u7edc\u7684\u5ef6\u8fdf\u6a21\u62df</p> <p>addressable\u592a\u96be\u4e86\uff0c\u5148\u8df3\u8fc7\u5427\uff0c\u4f30\u8ba1\u8981\u82b1\u4e24\u5468\u65f6\u95f4\u5543\u4e0b\u6765\u3002\u3002\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u6559\u7a0b\u94fe\u63a5\u3002\u91cd\u70b9\u8fc7\u4e00\u904dgithub\u90a3\u4e2a\u4ed3\u5e93\u7684sample\uff0c\u7406\u89e3\u4ee3\u7801\uff0c\u7136\u540e\u518d\u770b\u89c6\u9891\u3002 https://github.com/Unity-Technologies/Addressables-Sample/tree/master/Basic https://www.youtube.com/watch?v=6IlIA2eLk0I https://www.youtube.com/watch?v=U8-yh5nC1Mg https://www.youtube.com/watch?v=uNpBS0LPhaU&amp;t=432s https://gamedev.stackexchange.com/questions/169977/what-am-i-suppose-to-use-instead-of-unity-resources-if-i-have-to-load-and-unload</p> <p>\u5229\u7528cinemachine\u548ctimeline\u5236\u4f5c\u5e76\u6d4b\u8bd5\u4e00\u4e0b\u73a9\u5bb6\u7684cutscene\uff0c\u5229\u7528default\u5230Charging state\u7684\u8f6c\u6362\u3002</p>"},{"location":"opensdk/materialx/","title":"MaterialX","text":"<ul> <li>MaterialX</li> </ul>"},{"location":"opensdk/ocio/","title":"OpenColorIO","text":"<ul> <li>Source Code</li> <li>Documentation</li> <li>Configuration for ACES</li> </ul>"},{"location":"opensdk/ocio/#color-science-basics","title":"Color Science Basics","text":"<ul> <li>Color is the visual byproduct of the spectrum of light as it is either transmitted through a transparent medium, or absorbed and reflected off a surface.</li> <li>Complementary colors (aka opposite colors) are pairs of colors which, when combined or mixed, cancel each other out by producing a grayscale color like white or black. When placed next to each other, they create the strongest contrast for those two colors. Complementary color pairs include red\u2013cyan, green\u2013magenta and blue\u2013yellow, or any pairs that sit opposite to each other on the color wheel.</li> <li>In the HSV color model, hue is measured in degrees from 0~360, saturation and value are expressed in 0-100% percents. Complementary colors must have a 180 degrees difference in hues.</li> <li>Lift, Gamma and Gain is a set of controls designed for primary color correction. They allow colorists to manipulate shadows (Lift), midtones (Gamma), and highlights (Gain) to achieve the desired look for an image. Offset is another control used to adjust the overall brightness and color balance across the entire image. More granular control on specific parts of the image can be achieved by using mattes or masks.</li> <li>Luminance measures the amount of light that is emitted, passed through or reflected from a surface from a solid angle, in candela per square meter (cd/m\u00b2), also known as nits. Illuminance measures the total amount of light falling onto and spreading over a given surface area, in lux (lx) or lumens per square meter (lm/m\u00b2). Luminance and illuminance are photometric quantities, they are the equivalents of radiometric quantities radiance and irradiance.</li> </ul> <ul> <li>A typical human eye will respond to wavelengths from ~ 380 to 750 nanometers.(1)This visible band sits between the infrared (with longer wavelengths) and the ultraviolet (with shorter wavelengths), collectively known as optical radiation.</li> <li>The human eye can detect a luminance from 10<sup>\u22126</sup> to 10<sup>8</sup> nits(2), or 14 stops, but can only adapt to about 2-3 orders of magnitude at a time via the iris. This means that, at any given time, the eye can only sense a contrast ratio of 1,000. Larger ranges take time and require neural adaptation. The eye takes ~20\u201330 minutes to fully adapt from bright sunlight to complete darkness and becomes 10<sup>4</sup> to 10<sup>6</sup> times more sensitive than at full daylight. It takes ~5 minutes to adapt from darkness to bright sunlight.</li> <li>Humans have three types of cones (S, M and L), each sensitive to different wavelengths of light (blue, green and red).</li> <li>The Weber\u2013Fechner law states that human perception is logarithmic, the perceived intensity is proportional to the logarithm of the stimulus intensity, so we perceive things by the relative change (e.g. in brightness), not the actual change.(3)</li> <li>Metamers are colors with different spectral power distributions (SPDs) but have the same visual appearance. This is possible because different SPDs can map into the same tristimulus values and hence look identical. However, when the lighting conditions change, the two colors may no longer match since different SPDs reflect different wavelengths of light. This phenomenon is known as metamerism.</li> </ul> <ol> <li>Spectral Colors</li> <li>Luminances grouped by order of magnitude</li> <li> <ul> <li>The human eye can perceive a range of light intensities on a logarithmic scale. This allows us to see objects and details in both dark shade and bright sunlit areas.</li> <li>The human ear has a logarithmic response to sound levels. We can hear very soft noises and tolerate very loud ones.</li> <li>The perceived reduction of the length of a fixed period as we age suggests a logarithmic scale to time.</li> </ul> </li> </ol>"},{"location":"opensdk/ocio/#color-space","title":"Color Space","text":"<p>The CIE 1931 color space is the standardized reference color space used to describe all other color spaces. The 2D horseshoe shape is the \"CIE 1931 color space chromaticity diagram\", with luminance (the third dimension) factored out. Note that the CIE XYZ primaries are not physically realizable.</p> <ul> <li>The outer curved boundary of the diagram is called the spectral locus. It represents the chromaticity of monochromatic light (pure colors) with wavelengths from 380~700 nm. Each point on the locus corresponds to a specific wavelength of light.</li> <li>The color temperature curve, aka the black body curve/locus, is a downward curve in the middle that represents the trajectory of a blackbody's color as its temperature increases. Each point on the curve corresponds to a color temperature.</li> <li>The interior of the diagram can be divided into 20 color zones, each with an average dominant wavelength.</li> <li>Within this diagram, it's natural and intuitive to encode colors in HSV, where hue (H) corresponds to the dominant wavelength, saturation (S) = distance from white point, and value (V) = height out of plane.</li> </ul> Color Spaces <p>This table lists some of the most common color spaces, ordered from smaller to larger in terms of gamut size. Note that ProPhoto RGB covers nearly all perceivable colors, but ACES has even wider gamuts. ProPhoto RGB is more focused on photography and print, while ACES is tailored for film and television production.</p> Color Space Description White Point sRGB Standard for web and many consumer devices D65 Rec.709 Standard for HDTV D65 Adobe RGB Developed for professional photography and print D65 DCI-P3 Used in digital cinema and high-end displays D63 Rec.2020 Standard for UHDTV and HDR content D65 ProPhoto RGB Used in high-end photography and imaging D50 ACES Used in VFX for HDR and wide gamut ACES White <p>Rec.709/sRGB DCI-P3 specifications are designed for viewing in a fully darkened theater environment. Rec.2100</p> <p>Gamut is the range of colors (hues and saturations) that can be represented within a particular color space. When people refer to gamut in the CIE 1931 chromaticity diagram, it is a triangle subset of this diagram. Note that color gamut does not have to be a triangle. Monitor's gamut is triangular only because additive colors (light) follow Grassman's laws where color matching is linear.</p> <p>Gamut is often defined by three primary colors (red, green and blue) which are called color primaries, they are used to create all other colors within the same color space. Each primary is a specific point <code>(x,y)</code> on the CIE 1931 chromaticity diagram. These coordinates determine the exact hue and saturation of each primary color. Since different color spaces define different primaries, the same RGB triplet is not the same color. For instance, <code>rgb(255,0,0)</code> in color space A and in color space B are different colors. If B is a larger color space, it will give us a redder red, which is \"out-of-gamut\" in color space A. The process of converting colors from one color space to anothre is called gamut mapping.</p> <p>Note that RGB is not the only set of color primaries, there are other sets of primaries. These refer to the concept of color (encoding) models. For example, there's also the CMY, YUV, LAB and HSL color models. The CIE 1931 reference color space itself uses the XYZ color model, where the three primaries X, Y, Z are hypothetical but good for mathematical color representation.</p> <p>The white point is a reference point in a color space that defines what is considered \"white\" under specific lighting conditions. It sits on the black body curve and is associated with a color temperature (e.g. 3200K), measured in Kelvin (K), which describes the hue of the white light.</p> White Point White Point Color Temperature Usage and Scenario D65 ~6500K Represents average daylight D63 ~6300K Used in digital cinema and high-end displays. D50 ~5000K Common in printing and graphic arts, represents warmer daylight D55 ~5500K Used in photography and film for slightly warmer daylight conditions D75 ~7500K Represents cooler, bluer daylight, less commonly used Illuminant A ~2856K Represents typical incandescent lighting ACES White N/A Unique to ACES, designed for wide range of lighting in film production <p>Gamma refers to the exponent in a power-law relationship that describes how the brightness of a pixel is encoded in a digital image. Standard gamma values are 2.2 and 2.4. The gamma curve is a transfer function used to correct for the nonlinear response of display devices and the human eye. However, it is not the only transfer function, there are linear, logarithmic and other transfer functions. For example, PQ (Perceptual Quantizer) and HLG (Hybrid Log-Gamma) are both transfer functions specifically designed for HDR content and displays.</p> <p>Note</p> <p>Transfer function is not an inherent part of a color space, it is a separate concept that deals with encoding and decoding color values. A color space often provides a transfer function for convenience, but it is not a defining characteristic. For instance, linear-sRGB color space uses the sRGB color gamut, but doesn't have a transfer function since color values are in scene-linear.</p> <p>At the bare minimum, these are the things to bake into your brain:</p> <ul> <li>Color space = Gamut + White point, and it  (although not a defining characteristic)</li> <li>Color management often involves 3 color spaces<ul> <li>source (capture) color space</li> <li>intermediate (working) color space (1)</li> <li>destination (delivery) color space</li> </ul> </li> <li>from source color space \u2192 intermediate color space, we need the input transform (IDT).</li> <li>from intermediate color space \u2192 delivery color space, we need the output transform (ODT).</li> </ul> <ol> <li>ACES is often used as the intermediate color space since it encompasses a very wide color gamut.</li> </ol> <p>Further readings:</p> <ul> <li>A Beginner's Guide to (CIE) Colorimetry</li> </ul>"},{"location":"opensdk/ocio/#scene-referred-vs-display-referred","title":"Scene-referred vs Display-referred","text":"<p>Color spaces can be categorized by the image state they are associated with.</p> Scene-referredDisplay-referred <p>Color spaces defined in relation to input devices (e.g. scenes captured by a camera or created by a renderer) are scene-referred. It means that the pixel values correspond to the actual physical luminance and color values of the scene. The data is linear and directly proportional to the light intensity in the real world. In other words, if you double the light intensity in the scene, the pixel value also doubles. This linear property is often referred to as scene-linear.</p> <p>Lighting, shading and rendering are typically done in scene-referred color spaces. This scene-linear property not only makes it easier to work with physically based calculations, but is also crucial for accurate image operations such as compositing, blending and certain types of color correction and anti-aliasing. Since scene-linear data does not have any nonlinear correction applied, it is not directly suitable for human perception or display.</p> <p>Warning</p> <p>Not all scene-referred data is necessarily scene-linear. Scene-referred data could be encoded in a non-linear fashion (e.g. log) for specific purposes (e.g. debugging and diagnostics).</p> <p>Color spaces defined in relation to output devices (e.g. monitors, television or projectors) are display-referred. It means that the pixel values are encoded for display on a physical device. The data is optimized for human perception by taking into account the display's limitations and characteristics. This is sometimes also referred to as output-referred.</p> <p>Warning</p> <p>Modifying an image in the display-referred color space limits the result to looking appropriate only on a specific display. The image can look very different on another display with different characteristics.</p>"},{"location":"opensdk/ocio/#tone-mapping","title":"Tone Mapping","text":"<p>In practice, tone mapping is the combination of these two since the HDR content's dynamic range will (almost) never match the display's color space. It does some color enhancement in the context of the display's capabilities, and then convert the working color space to the delivery color space (so that your working red can map to another red on the monitor).</p> <p>today's goal of tone mapping: - To reduce excessive dynamic range - To customize the look (colour grading) - To simulate human vision - To adapt displayed images to a display and viewing conditions - To make rendered images look more realistic</p> <p>While the legacy tone map only intends to preserve limited details and contrast so that it doesn't look washed out on the SDR display, a photographic tone map aims to enhance details and contrast to take full advantage of the display's capabilities. There is a collection of techniques that determine the scene brightness in the previous frame and slowly adapt the exposure parameter. They mimick how the human eye adapts to different lighting conditions, such that the scene gets brighter in dark areas (using a higher exposure) and darker in bright areas (using a lower exposure). Advanced techniques even leverage the power of machine learning to produce better cinematic HDR content. Think of it as a way to enhance visual fidelity, rather than just a color convertion step using a single mathematical function.</p> <p>dynamic tone mapping happens inside the view transform?</p> <p>even the best displays come nowhere close to the range of luminances in the real world, there still needs to be a tone mapping step to compress and convert from scene referred to output referred on HDR displays.</p> <p>In the future, when consumer monitors become more capable, the same films will look better as they require less tone-mapping and the original intent can be more accurately rendered.</p>"},{"location":"opensdk/ocio/#transfer-function","title":"Transfer Function","text":"<ul> <li>OETF (opto-electronic transfer function) converts scene-linear luminance values to non-linear electrical signals. It involves a quantization process that restricts the signal to a certain bit depth. This ensures that the image data can be efficiently stored and transmitted through the HDMI or DP cable.</li> <li>EOTF (electro-optical transfer function) converts non-linear electrical signals to visible light emitted by the display. It describes how digital signal values are converted into visible light by the display device. EOTF is typically implemented on the display side so we have no direct control over it a user or content creator.</li> <li>OETF and EOTF are both non-linear functions, but they are independent. EOTF is not a simple inversion of OETF.</li> <li>OETF is about capturing and encoding, EOTF is about decoding and displaying.</li> <li>OOTF (opto-optical transfer function) describes the overall transformation, OOTF = OETF + EOTF.</li> <li>OOTF ensures that the final displayed image maintains the intended appearance on the target display.</li> </ul> <p>Electrical Signals</p> <p>In the context of display technology, electrical signals are often normalized to the range [0,1] to represent the intensity of light emitted by a display, but the interpretation of these values can vary depending on the type of display. For example, a signal value of 0.5 might correspond to 50~150 nits on SDR displays but 300~500 nits on HDR displays.</p> <p>Note</p> <p>A tone mapper is a function that simply maps a range of values to another range of values, but a transfer function is also concerned with physically changing the state of the data from optical to electrical and vice versa (although it is not done by the transfer function itself), so they are totally different things!</p> <ul> <li>Tone mapping is generally used to apply a \"look\", such as the popular filmic S-curve. It adds some contrast in the shadows and a nice roll-off that gradually brings luminance level to 100%. Think of it as a post-processing step just like applying a filter over an image. The post-processing effects should be computed in linear space so it must be done before the transfer function or color space conversion.</li> <li>A transfer function changes the form of the data, hence the name \"transfer\". It is not a post-processing step used to apply a custom look. While a transfer function also redistributes a range of values to another, it's for a different purpose. When we send our image to the display or save it to a file on disk, OETF remaps the values in order to use the storage more efficiently, that is, with a limited amount of bits, we want to use more bits for the darker areas and less on the brighter areas. When a monitor sends electrical signals to the actual pixels on the screen, EOTF remaps the values to take advantage of the display's capabilities.</li> <li>Tone mapping operates on 16 or 32-bit floats to maintain precision during the process, it does not change the data format so the output is still floating-point. Transfer functions often involve a change in data format, it needs to convert floating-point values to 10 or 12-bit integer values when encoding image data for storage or transmission. This is necessary to reduce data size and match the capabilities of the storage medium or transmission channel.</li> <li>Transfer functions are always applied as part of the standard process. Since EOTF is built into the display's design and operation, OETF must be applied when sending images to the display. In contrast, tone mapping is just an optional tool used to adapt the content to a creative look. You don't have to apply a tone mapper, only if you want to.</li> </ul>"},{"location":"opensdk/ocio/#transfer-function-in-sdr-workflows","title":"Transfer Function in SDR Workflows","text":"<p>Traditionally, EOTF used for CRT displays was a standard 2.2 gamma curve. This is because the non-linear relationship between the applied voltage and electron output in a CRT picture tube follows such a standard gamma curve. To compensate for that non-linear response of CRTs, image data is gamma encoded (OETF applies an inverse gamma curve) before getting sent to the display. The combined OOTF results in a linear correspondence between the original luminance and the displayed light intensity. In summary, both OETF and EOTF are standard gamma curves, a world of simplicity!</p>"},{"location":"opensdk/ocio/#transfer-function-in-hdr-workflows","title":"Transfer Function in HDR Workflows","text":"<p>With modern HDR, 4K and 8K displays, the idea is kind of similar, but it's a very complex topic filled with nuances.</p> <p>Today, Rec.2100 recommends two standard HDR transfer functions, PQ (Perceptual Quantization) and HLG (Hybrid-Log-Gamma).</p> HLG (Hybrid-Log-Gamma)PQ (Perceptual Quantization) <ul> <li>HLG is designed for broadcast, streaming or scenarios where SDR compatibility is desired, so it is not our focus.</li> <li>The HLG transfer function is primarily an OETF. It is used to encode the light captured by cameras into a digital signal. The HLG curve was designed to be backward compatible with SDR displays. The lower half of the signal values use a gamma curve, and the upper half is logarithmic. HLG is also a standard HDR video format that uses the HLG transfer function, Rec.2020 color primaries and a 10-bit bit depth.</li> <li>HLG is a relative scene-referred signal, meaning that HLG-enabled displays automatically adjust light levels based on the content and their display capabilities. HLG does not require metadata to be transmitted with the video stream, as the same signal can be used for both SDR and HDR displays. For PQ, we need to manage metadata.</li> </ul> <ul> <li>PQ is designed for high-quality HDR displays where you have control over the viewing environment, which is well-suited for our needs.</li> <li>The PQ transfer function (standardized by SMPTE ST 2084) is primarily an EOTF. It aims for perceptually uniform quantization based on Barten's model to better align with human perception. A PQ-encoded signal can represent luminance levels from 0.0001 nits to 10,000 nits. The PQ curve is not backward compatible with the BT.1886 EOTF (i.e. the standard SDR gamma curve), so PQ-encoded content requires HDR-capable displays to be viewed correctly.</li> <li>PQ is an absolute display-referred signal, meaning that it is designed to map directly to the display's capabilities. This requires display devices to implement tone mapping to adapt the light levels. Display devices use metadata to interpret and display PQ-encoded content correctly. This metadata can be either static or dynamic, which includes information like the mastering display's color primaries and the content's min/max/avg luminance levels (e.g. MaxFALL and MaxCLL).</li> </ul> <p>Let's focus on HDR workflows using PQ. Here the focus is on converting scene-referred linear values (e.g. in ACES color space) to a display-referred format that the PQ EOTF can interpret. This involves encoding the content for HDR display using the PQ curve. This process is akin to an OETF, but it is not an OETF in the traditional sense as PQ is display-referred.(1)</p> <ol> <li> <p>The PQ curve is designed to be perceptually uniform, meaning it directly maps digital values to absolute luminance levels in a way that aligns with human perception. In this context, the traditional concept of OEFT as used in SDR workflows does not directly apply. In other words, we do not have or need an OEFT.</p> </li> <li> <p>Check your display's HDR standards (e.g. HDR10, Dolby Vision) to see if it supports PQ.</p> </li> <li>Adjust settings in the display's menu and use calibration software to ensure it is operating in the correct HDR mode that supports PQ.</li> <li>Encode the content (rendered output) for HDR display using the PQ curve, make sure to manage metadata.</li> </ol> <p>Do I need tone mapping?</p> <p>In the HDR workflow with PQ, both content-side and display-side tone mapping might be applied, which is called Dual tone mapping.</p> <ul> <li>Content-Side Tone Mapping is optional and used for creative control or specific target display adaptation.</li> <li>Display-Side Tone Mapping is automatically done by the display which adapts PQ-encoded content to its capabilities and limitations.</li> <li>So when do I need content-side tone mapping? or not?</li> </ul>"},{"location":"opensdk/ocio/#hdr-users-guide","title":"HDR Users Guide","text":"<p>VESA's DisplayHDR specifications are open standards that help consumers identify a monitor's HDR capabilities. Common tiers include 400/600/1000 and 1400, where the number indicates the peak brightness in nits. Certified displays have wider color gamuts, 10+ bit depth, higher luminance levels and contrast ratios. You can check the performance criteria details here. Other HDR standards also exist (e.g. HDR10, Dolby Vision) catering to various applications. Note that these standards can vary wildly in terms of peak brightness, color space and contrast ratios so the HDR experience differs significantly from one display to another.</p> <p>Note</p> <p>A typical SDR display is capable of emitting luminance between 50 and 300 nits. While HDR displays can emit 400 \u2192 2000 nits, the HDR standards allow for a maximum luminance of 10,000 nits.</p> <p>There is no standardized way to measure the contrast ratio, but it's often defined as the ratio of the max/min luminance that the display can produce. It is usually written as C:1 (e.g. 3000:1), but can also be expressed in stops by taking its base-2 logarithm where each stop doubles the amount of light. For example, a contrast ratio of 2 stops = 4 times as much light at the brightest pixel than at the darkest pixel. Dynamic range can also be measured this way, either as a ratio or in # of stops.</p> <p>We need several pieces working together to ensure HDR content is properly rendered and displayed.</p> HardwareSoftware <ul> <li>The display itself must support one or more HDR standards, and color calibration must be done properly.</li> <li>The connection between the graphics card and the display must support HDR. This means using HDMI 2.0+ or DisplayPort 1.4+ cables, which are capable of transmitting data (e.g. 12-bit color) for HDR content.</li> <li>The graphics card and drivers must support HDR processing and output (e.g. output 12-bit color)</li> </ul> <ul> <li>The operating system must support HDR and provide settings to enable it.</li> <li>The application, in our case the renderer, must be capable of rendering content in HDR. It needs to handle a wider range of brightness and color values during the rendering process.</li> </ul> <p>Fake HDR</p> <p>If the software does not natively render content in HDR but instead outputs on a HDR display by adjusting the brightness and contrast of the final rendered SDR image to fit a higher dynamic range, it is called fake HDR or pseudo-HDR that can lead to a degraded visual experience. This is because the process of stretching the dynamic range can distort colors. The conversion process can also introduce visual artifacts such as banding, where smooth gradients appear as distinct bands of color.</p> <p>Tip</p> <p>To enable HDR on desktop for games:</p> <ul> <li>Check your monitor's HDR standards and specs, learn the capabilities of your display.</li> <li>Physically tune your display settings, if there's a review on rtings that could be helpful.</li> <li>At the OS level, enable HDR in the display settings and run the HDR calibration. This will tell the OS what your display's capabilities are. Note that the Auto HDR option on Windows must be disabled.</li> <li>Open the NVIDIA Control Panel and select \"Use NVIDIA color settings\" under \"Change Resolution\", adjust the Output Color Format to use RGB and the Output Color Depth to use 10-bit or 12-bit. Depending on your hardware you may only have certain options available.</li> <li>Make sure your game supports HDR and has it enabled, then enable RTX HDR in the NVIDIA app and click Optimize. This often yields much better visual results compared to tweaking graphics settings yourself.</li> <li>For games that don't support HDR, the RTX HDR option will convert SDR content to HDR using your GPU driver, but of course this is a compromise.</li> </ul>"},{"location":"opensdk/ocio/#hdr-developers-guide","title":"HDR Developers Guide","text":"<p>HDR Formats include: HDR10, HDR10+, Dolby Vision, PQ10 and HLG.</p>"},{"location":"opensdk/ocio/#_1","title":"????","text":"<p>HDR at the OS level? OS does the tone mapping? or use OCIO? could it be applying twice if both are used ? While OS support for HDR is important for displaying HDR content directly on HDR-capable monitors, it is not a hard requirement, you can still create, process, and prepare HDR content within your software, even if the OS itself doesn't fully support HDR output.</p> <p>I'm not sure if glimpse or glimpseRealtime has tone mapping. I think to ensure that the dynamic range of the rendered content fits within the capabilities of our HDR display, we are just manually adjusting the scene setup (light sources, exposure settings, and material properties) to avoid extreme brightness or darkness?</p> <p>What is fractional scaling? there is no support for HDR, Fractional Scaling, Wide color gamut in Linux.</p> <p>Color checker</p>"},{"location":"opensdk/ocio/#color-management","title":"Color Management","text":"<p>Ask GPT: what is a complete color management system</p> <p>Historically, we only have SDR content and SDR monitors, where sRGB is the standard color space. In that context, tone mapping refers to the process of converting HDR values to LDR values, and gamma correction is used to encode/decode luminance values between linear and sRGB color space. A \"linear\" workflow typically looks like this:</p> <ul> <li>When reading textures and images, always assume the data is in sRGB and decode it to linear space.</li> <li>During lighting, shading and rendering, everything should work with linear values only.</li> <li>After rendering, apply tone mapping to compress the dynamic range to the limited [0,1] range.</li> <li>Finally, encode the data back to sRGB color space to better match human perception on the display.</li> </ul> <p>In today's world of HDR, this simplistic \"de-gamma and re-gamma\" workflow no longer applies. A complete color management system (CMS) is needed to manage color accurately throughout the pipeline, from capture to display, across devices and media.</p> <p>Here's an overview of what a complete color management system should include.</p> ascascascascascascascascascascascasc <p>A complete color management system should enable a linear workflow by properly converting colors for input, rendering, display and output, and we need a proper view transform that prepares color values from the rendering space for display, not just a gamma curve. The view transform should also involve a tone map with a photographic response.</p> <p>need to be in the same frame of reference</p> <p>Floating Point Render Target is enabled If you will be rendering images for further processing like compositing and grading, make sure that File Output Image format on the Common tab of the Render Settings window is set to a format that supports high-dynamic-range values, such as OpenEXR.</p> <p>Ideally, no color space conversions should be required during the execution of the render, as all input assets such as textures, plate re-projections, and skydomes, can be linearized beforehand.  Image viewing of scene-linear data is typically handled by converting to the color space being delivered to digital intermediate (commonly a log color space), and then applying the view transform suitable for the specified display. For convenience, these transforms are typically baked into a single 3D-LUT, though care must be taken to assure the LUT has suitable fidelity over an ppropriate HDR domain. As mentioned earlier, you must use a viewing transform when viewing HDR scene-linear data.</p> <p>Rendering and shading occurs in a scene-linear floating point space, typically named \u201cln\u201d. Half-float (16-bit) images are labeled lnh, full float images (32-bit) are labeled lnf. All image inputs should be converted to ln prior to render-time. Typically, this is done when textures are published. Renderer outputs are always floating-point. Color outputs are typically stored as lnh (16-bit half float). Data outputs (normals, depth data, etc) are stored as ncf (\u201cnot color\u201d data, 32-bit full float).</p> <p>https://acescentral.com/user-guides/</p> <p>user interfaces are generally authored in the output referred sRGB space. This means that some care needs to be taken in compositing them into the HDR scene. (You don\u2019t want to have your user squinting at a 1000 nit white dialog, so white sRGB content clearly doesn\u2019t mean maximum brightness).</p> <p>A good solution that we\u2019ve worked with for getting from scene referred to output referred is the Academy Color Encoding System (ACES).\u3000A central part of ACES is that it applies a filmic sigmoid curve in an extremely wide color space. The result is that the overly bright colors naturally desaturate to white.\u3000The sigmoidal curve is actually similar to how the eyes work. ACES color space is a high-dynamic range, scene-linear space, with middle gray pegged to 0.18, and a very wide color gamut.</p>"},{"location":"opensdk/ocio/#color-configuration","title":"Color Configuration","text":"<p>A color configuration (typically a YAML file) contains all the information that OCIO needs.</p> <ul> <li>It includes definitions for various color spaces available in a project, such as linear, sRGB, ACES and others, along with their associated transforms.</li> <li>It outlines the mathematical transformations required to convert images from one color space to another.</li> <li>It assigns roles to specific color spaces, which are used by applications to understand how to handle different types of color data (e.g. the \"scene_linear\" role for linear scene-referred data).</li> <li>It defines how images should be displayed on different devices, including any necessary view transforms to ensure consistent appearance.</li> </ul> Example Color Configuration <p>This <code>config.ocio</code> is an overly simplified color config file. In practice, this file can have 5k+ lines, it is often accompanied by a variety of other files, such as color space presets (<code>.csp</code> files), LUTs (<code>.spi1d</code>, <code>.spi3d</code>, <code>.cube</code> files) and ICC color profiles (<code>.icc</code> files).</p> <p>OpenColorIO Configuration for ACES provides a set of configuration files that enable OCIO to work seamlessly with the ACES color management framework. You can generate OCIO configurations for ACES using this package, or simply download the built-in configurations. The configuration includes a variety of color transformations that are necessary for working with ACES, such as converting between different color spaces, applying look modifications, and managing display outputs. While it provides a standardized framework, the configuration can be customized to meet the specific needs of a production.</p> <p>OpenImageIO depends on OpenColorIO, but it only allows applying color conversions to images. We would still need OCIO for pixels directly in framebuffers.</p>"},{"location":"opensdk/oiio/","title":"OpenImageIO","text":"<ul> <li>OpenImageIO</li> </ul>"},{"location":"opensdk/openexr/","title":"OpenEXR","text":"<ul> <li>OpenEXR</li> </ul>"},{"location":"opensdk/openpbr/","title":"OpenPBR","text":"<ul> <li>OpenPBR</li> </ul>"},{"location":"opensdk/openvdb/","title":"OpenVDB","text":"<ul> <li>OpenVDB</li> </ul>"},{"location":"opensdk/openxr/","title":"OpenXR","text":"<ul> <li>OpenXR</li> </ul>"},{"location":"opensdk/optix/","title":"NVIDIA OptiX","text":"<ul> <li>NVIDIA OptiX</li> </ul>"},{"location":"opensdk/osl/","title":"Open Shading Language","text":"<ul> <li> <p>OpenShadingLanguage</p> </li> <li> <p>Shader Art Coding</p> </li> </ul>"},{"location":"opensdk/otio/","title":"OpenTimelineIO","text":"<ul> <li>OpenTimelineIO</li> </ul>"},{"location":"opensdk/intel/","title":"Intel\u00ae Rendering Toolkit","text":"<ul> <li>Intel\u00ae Rendering Toolkit</li> </ul>"},{"location":"opensdk/intel/embree/","title":"Intel\u00ae Embree","text":"<ul> <li>Intel\u00ae Embree</li> </ul>"},{"location":"opensdk/intel/oidn/","title":"Intel\u00ae Open Image Denoise","text":"<ul> <li>Intel\u00ae Open Image Denoise</li> </ul>"},{"location":"opensdk/intel/openpgl/","title":"Intel\u00ae Open Path Guiding","text":"<ul> <li>Intel\u00ae Open Path Guiding</li> </ul>"},{"location":"opensdk/intel/openvkl/","title":"Intel\u00ae Open Volume Kernel Library","text":"<ul> <li>Intel\u00ae Open Volume Kernel Library</li> </ul>"},{"location":"opensdk/intel/ospray/","title":"Intel\u00ae OSPRay Studio","text":"<ul> <li>Intel\u00ae OSPRay Studio</li> </ul>"},{"location":"opensdk/openusd/","title":"OpenUSD","text":"DocumentationBooks &amp; GuidesOmniverse\u2122Asset CollectionCommunity <ul> <li>C++ API Documentation</li> <li>Pixar USD Home</li> <li>USD Source Code</li> </ul> <ul> <li>USD Basics (Solaris)</li> <li>Usd Survival Guide</li> <li>Book of USD</li> <li>OpenUSD with Omniverse</li> <li>USD Cookbook</li> </ul> <ul> <li>OpenUSD Overview</li> <li>OpenUSD for Developers</li> <li>Omniverse for Developers</li> <li>Omniverse Docs Hub</li> </ul> <ul> <li>NVIDIA Sample Assets Collection</li> <li>USD Assets Working Group</li> <li>Animal Logic ALab</li> <li>Animal Logic USD at Scale</li> <li>Activision Warzone\u2122 Caldera</li> </ul> <ul> <li>Alliance for OpenUSD</li> <li>ASWF USD WG</li> <li>Awesome OpenUSD</li> <li>Walt Disney Ptex</li> </ul>"},{"location":"opensdk/openusd/usd-basics/","title":"USD Basics in Python","text":""},{"location":"opensdk/openusd/usd-basics/#test","title":"Test","text":"<p>test</p>"},{"location":"resources/academic/","title":"Academic","text":""},{"location":"resources/academic/#opencourseware","title":"OpenCourseWare","text":"<ul> <li>CMU 15-213 CSAPP</li> <li>MIT 6.001 SICP</li> <li>UCB CS61A, SICP</li> <li>Stanford CS140, Operating Systems</li> <li>CMU 15-410, Operating System Design</li> <li>UIUC CS 241, System Programming</li> <li>Harvard CS61 SPMO</li> <li>CMU 15-445/645, Intro to Database Systems</li> <li>CMU CS15-441/641, Computer Networks</li> <li>CMU 15-618 Parallel Programming + internal videos</li> <li>CMU 15-462 Computer Graphics</li> </ul>"},{"location":"resources/academic/#coursera","title":"Coursera","text":"<ul> <li>Operating Systems</li> <li>Computer Architecture</li> </ul>"},{"location":"resources/cg-art/","title":"CG Art","text":"<ul> <li>Environment Production</li> <li>Advanced Environment Art</li> <li>Beyond Extent</li> </ul>"},{"location":"resources/cg-art/#blender","title":"Blender","text":""},{"location":"resources/unreal-engine/","title":"Unreal Engine","text":"<ul> <li>Unreal Engine Documentation</li> <li>Programming and Scripting</li> </ul>"},{"location":"resources/utility-vault/","title":"Utility Vault","text":"<ul> <li>excalidraw</li> <li>figma</li> </ul>"},{"location":"resources/utility-vault/#color-picker","title":"Color Picker","text":""},{"location":"resources/utility-vault/#emojis-icons-and-fonts","title":"Emojis, Icons and Fonts","text":"<p>https://materialui.co/htmlcolors</p>"},{"location":"resources/utility-vault/#random-number-generator","title":"Random Number Generator","text":""},{"location":"resources/utility-vault/#online-diff","title":"Online Diff","text":""},{"location":"resources/utility-vault/#misc","title":"Misc","text":"<ul> <li>Download Github Directories</li> <li>Dummy Image Generator</li> </ul>"},{"location":"resources/bit-foundry/","title":"All About Bits","text":""},{"location":"resources/bit-foundry/#in-depth-c","title":"In-depth C++","text":"BooksTutorialsEssentialsDiagnostic <ul> <li>Effective Modern C++</li> <li>Effective STL</li> <li>More Effective C++</li> <li>C++17 - The Complete Guide</li> <li>C++20 - The Complete Guide</li> <li>C++ Concurrency in Action</li> <li>C++ Core Guidelines</li> </ul> <ul> <li>Fluent C++</li> <li>C++ Weekly</li> <li>C++ Containers</li> <li>C++ Patterns</li> <li>CppCon</li> <li>CoreCppIL</li> </ul> <ul> <li>Intel TBB</li> <li>Taskflow</li> </ul> <ul> <li>Compiler Explorer</li> <li>Valgrind</li> <li>Google sanitizers</li> </ul>"},{"location":"resources/bit-foundry/#optimization","title":"Optimization","text":"<ul> <li>Low Level Optimization</li> <li>Assembly instructions</li> <li>Compiler Intrinsics</li> </ul>"},{"location":"resources/bit-foundry/cpp-notes/","title":"C/C++","text":""},{"location":"resources/bit-foundry/cpp-notes/#style-guide","title":"Style Guide","text":"<ul> <li>Code editor - MonoLisa font, line spacing 1.2</li> <li>Soft wrap at 120 characters</li> </ul>"},{"location":"resources/bit-foundry/cpp-notes/#preprocessor-directives","title":"Preprocessor directives","text":"<p>Include headers - user-defined headers should appear after C/C++ library headers.</p> <pre><code>#include &lt;cstdlib.h&gt;  // C library headers have the \".h\" extension, C++ library headers do not\n#include &lt;iomanip&gt;    // standard library or external headers typically use brackets\n#include \"class.h\"    // user-defined headers use double quotes\n</code></pre> <p>Use <code>SCREAMING_SNAKE_CASE</code> for macro names.</p> <pre><code>#define MAX_VALUE 100  // just an example, should use constants in practice\n#define CALC_SQUARE(x) ((x) * (x))\n</code></pre>"},{"location":"resources/bit-foundry/cpp-notes/#comments","title":"Comments","text":"<p>Avoid using block comments, they are dangerous!</p> <pre><code>/* the 2nd block comment will fail\nstd::cout &lt;&lt; \"Hello\";  /* the 1st block comment */\nstd::cout &lt;&lt; \"World\";\n*/\n</code></pre> <p>Prefer doc comments over block comments, some IDEs have special rendering for doc comments.</p> <pre><code>/// doc comment style 1\n//! doc comment style 2\n</code></pre> <p>However, do note that:</p> <ul> <li>Doc comments are not comments but documentation, they often apply to public modules, classes and functions, the target audience is the API user, it\u2019s about how to use the code.</li> <li>Comments describe how the code internally works, it\u2019s intended for the developer.</li> <li>Other than documentation, avoid writing comments as best as you can.</li> <li>Instead of writing comments, refactor your code so that the code itself clearly conveys the intention.</li> <li>Use good variable names and function names to make them obvious and self-explanatory.</li> <li>For complex conditions or block of statements, move them into a separate function that\u2019s clearly named.</li> </ul> <p>Write comments if:</p> <ul> <li>The code does something non-obvious for performance reasons.</li> <li>It\u2019s a tricky part in an algorithm that cannot be explained by the algorithm\u2019s function name.</li> <li>You are referencing to some math or algorithms online, also put links to the sources in your comment.</li> </ul> <p>Besides, a lot of info is already contained in the type so there\u2019s no need to write comments. For example, a shared or unique pointer implies the ownership so you must take the responsibility of destructing it properly, whereas a raw pointer implies that we should only use it to do simple checks or invoke a const member function that doesn\u2019t mutate the underlying object. Likewise, a std::optional return type indicates that we need to handle exceptions in case it doesn\u2019t return a value, etc.</p>"},{"location":"resources/bit-foundry/cpp-notes/#namespaces","title":"Namespaces","text":"<p>Namespace names should be all lower case, abbreviated to be short, and use <code>snake_case</code> if necessary.</p> <pre><code>namespace std {}\nnamespace mana {}\nnamespace core { namespace rdr {} }  // \"renderer\" abbreviated to \"rdr\" for cleanliness\n\nusing namespace pxr;\nusing namespace glm;\nusing namespace boost::math;\nusing namespace core::rdr;\n</code></pre> <p>Some external libraries do not follow this convention. In that case, use a macro to wrap it around.</p> <pre><code>#define imgui ImGui\n#define oiio OIIO  // OpenImageIO\n#define ocio OCIO  // OpenColorIO\n</code></pre> <p>Every top level namespace (unless anonymous) should have a list of corresponding macros for convenience. Within the <code>OPEN_SCOPE</code> and <code>CLOSE_SCOPE macros</code>, we can save an indentation level (4 spaces) on every line! This leaves us with a very clean indentation scheme overall.</p> <pre><code>#define MANA_NAMESPACE_OPEN_SCOPE namespace mana {\n#define MANA_NAMESPACE_CLOSE_SCOPE }\n#define MANA_NAMESPACE_USING_DIRECTIVE using namespace mana;\n\nMANA_NAMESPACE_OPEN_SCOPE\n...\nMANA_NAMESPACE_CLOSE_SCOPE\n</code></pre>"},{"location":"resources/bit-foundry/cpp-notes/#naming-things-is-hard","title":"Naming things is hard","text":"<p>For naming variables in general</p> <ul> <li>Do not use abbreviations unless they are well-known, use meaningful and descriptive English words.</li> <li>Using descriptive natural language words improves not only readability, but also auto code completion.</li> <li>Use camelCase for global and local variables. (static and extern variables? maybe)</li> <li>Use SCREAMING_SNAKE_CASE for constants.</li> <li>Do not use legacy Hungarian notation (putting types or properties into the variable name).</li> <li>Put units into variable names (e.g. timeoutInSeconds) unless the type already includes the units.</li> </ul> <p>For naming classes and structs</p> <ul> <li>Use PascalCase for all classes and structs.</li> <li>Use a generic name for the base class, don\u2019t add Base, e.g. class Truck instead of class BaseTruck.</li> <li>Use an over-specified name for the derived class, e.g. class TrailerTruck instead of class Truck.</li> <li>Class names can be adjectives, e.g. class Movable, class Hittable.</li> <li>Don\u2019t emphasize an interface or abstract class, e.g. class Hittable instead of class IHittable.</li> <li>Never create a utility/helper class or namespace, it\u2019s indicative of a bad design. Instead, think carefully where they really belong to and sort them into the right modules.</li> </ul> <p>For naming member variables in a class/struct</p> <ul> <li>In C++, any identifier beginning with an underscore _ is reserved to the implementation.</li> <li>Any identifier that contains a double underscore __ anywhere is reserved to the implementation.</li> <li>Therefore, you can never use any leading _ or use double __ anywhere in the code.</li> <li>Do not use the m_ prefix for member variables in a class or any other prefix like that (old school).</li> <li>Instead, suffix private and protected members with a trailing underscore _ (not leading _).</li> <li>From developer\u2019s point of view, there\u2019s no need to differentiate private and protected members.</li> <li>Public and static member variables do not need any prefix or suffix, just use normal naming convention, if you find it difficult to distinguish between them, you need a better IDE, not another naming style.</li> </ul> <p>For naming functions including member functions</p> <ul> <li>As mentioned, use any leading <code>_</code> or use double <code>__</code> anywhere in the code.</li> <li>Prefer camelCase over PascalCase, do not capitalized the initial character, like <code>main()</code>.</li> <li>No, let\u2019s follow what USD does, use PascalCase\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026..</li> <li>Getters (accessors) do not start with get, e.g. <code>settings()</code> instead of <code>getSettings()</code>.</li> <li>Setters must start with set, e.g. <code>setModel()</code>.</li> <li>For private and protected member functions, start the function name with do, e.g. <code>void doUpdateNode()</code>.</li> <li>Again, there\u2019s no need to differentiate private and protected member functions.</li> <li>C++ standard library uses the old <code>snake_case</code> convention for function names, like <code>emplace_back()</code>, this is not consistent with our style, but it\u2019s actually desired since we can tell which one is our own function.</li> <li>USD and Hydra uses PascalCase for function names which isn\u2019t consistent with our style either, but it\u2019s actually desired for the exact same reason.</li> </ul>"},{"location":"resources/bit-foundry/cpp-notes/#where-should-i-put-the-characters","title":"Where should I put the <code>*&amp;[]</code> characters?","text":"<p>Ampersand and asterisk should immediately follow the type, rather than preceding the variable name.</p> <pre><code>float* fptr;\nfloat&amp; fref;\nint* func(const void* vp) {}\nint&amp; func(const std::vector&lt;T&gt;&amp; vec) {}\n</code></pre> <p>Never declare two pointers on the same line, declare them on separate lines.</p> <pre><code>int *number1, *number2;  // nope, this breaks our rule\nconst int* number1;\nconst int* number2;\n</code></pre> <p>Square brackets should follow the array name, not the type.</p> <pre><code>float pixels[1920 * 1080];\nvec3 points[256];\n</code></pre>"},{"location":"resources/bit-foundry/cpp-notes/#where-should-i-put-the-curly-braces","title":"Where should I put the <code>{}</code> curly braces?","text":"<p>This is the formatting style that\u2019s totally up to your personal preference as well as the use case. Do not overemphasize \u201cconsistency\u201d here, that\u2019s absolutely bullshit. What really matters here is readability, cleanliness and clarity, it\u2019s not something like the naming convention that you need to pick one and consistently stick to it throughout the entire codebase.</p> <p>If you always put curly braces on a new line, the code will be super bloated. If you always put curly braces on the same line, it can be hard to read. So no one is better than the other. Instead do this:</p> <ul> <li>if you have many statements to enclose inside, curly braces should be on a new line.</li> <li>if there\u2019s only 1 or 2 lines, packing them closely together will look nicer.</li> </ul> <p>For example, braces at the namespace, class or function level are typically on a new line, but as for braces following an if-else statement, a loop or a catch block, it depends on the complexity of that code block.</p> <pre><code>enum class Color { Red, Green, Blue };  // clear enough on one line\n\nenum class Fruit\n{\n    Pineapple,\n    Orange,\n    Strawberry,\n    Grapefruit,\n    Banana\n};\n</code></pre> <pre><code>void DoWork(const Bar&amp; bar)\n{\n    for (unsigned int i = 0; i &lt; animation-&gt;numOfChannels; ++i)\n    {\n        aiNodeAnim* channel = animation-&gt;channels[i];\n        std::string bone = channel-&gt;nodeName.c_Str();\n\n        auto node = ranges::find_if(nodes, [&amp;bone_name](const Node&amp; node) {\n            return node.name == bone_name;\n        });\n\n        // open curly stays on the same line\n        if (node == nodes.end()) {\n            continue;\n        }\n\n        // open curly starts on a new line\n        if (node.isValid())\n        {\n            Channel&amp; channel = channels[node-&gt;bid];\n            CORE_ASERT(channel.bone_id &lt; 0, \"This channel is already filled, duplicate bone!\");\n            channel = std::move(Channel(ai_channel, bone_name, node-&gt;bid, duration));\n            nodes[node-&gt;nid].alive = true;\n            n_channels++;\n        }\n    }\n\n    try {\n        std::vector&lt;int&gt; vec{3, 4, 3, 1};\n        int i{vec.at(4)};\n    }\n    catch (const std::out_of_range &amp;e) {\n        std::cerr &lt;&lt; \"Accessing a non-existent element: \" &lt;&lt; e.what() &lt;&lt; '\\n';\n    }\n}\n</code></pre>"},{"location":"resources/bit-foundry/cpp-notes/#dont-be-a-nester","title":"Don\u2019t be a nester!","text":"<p>Using deeply nested functions is often a code smell and an indication of bad design.</p> <ul> <li>Do - limit the number of nested levels to 3 in a function.</li> <li>Don\u2019t - have an inner code block nested at level 4+.</li> </ul> <p>There are two ways you can de-nest your function.</p> <ul> <li>Extraction - pull out part of the function into its own function (can optionally mark as inline).</li> <li>Inversion - for if-else statements, flip the conditions and error checks into an early return.</li> </ul>"},{"location":"resources/bit-foundry/cpp-notes/#abstraction","title":"Abstraction","text":"<ul> <li>Do not overuse abstraction to avoid duplicating code. Abstraction also introduces coupling.</li> <li>We need to balance abstraction vs coupling, it\u2019s fine to have some duplication in our code.</li> <li>Do not abstract everything away to remove repetition, create a Mixin class if needed.</li> </ul>"},{"location":"resources/bit-foundry/cpp-notes/#basics-review","title":"Basics Review","text":"<p>Compile, link and run with GCC.</p> <pre><code>g++ -o executable.exe code1.cpp code2.cpp -std=c++11\n./executable.exe arg1 arg2 ...\n./executable.exe &lt; in &gt; out  # read data from \"in\" and redirect output to \"out\"\n</code></pre> <p>Exit status of a C++ executable = return value of the entry point function which is mostly <code>main()</code>.</p> <pre><code>g++ -o executable.exe main.cpp\n./executable.exe\necho $?  # 0/EXIT_SUCCESS for success, failure otherwise\n</code></pre> <p>The <code>main()</code> function:</p> <pre><code>int main(int argc, char** argv) {}\n// argc (arguments count) = number of arguments from the command line + 1 (path to the executable)\n// argv (arguments vector) stores all arguments as a vector of strings (the executable path is prepended to the vector)\n// int main() is the only special function that doens't need to return an int (returns 0 by default)\n\nint main(int argc, char* argv[]) {}\n// char* is a pointer to the (const) string literal\n// char** or char*[] is a vector of char*\n// char** and char*[] are equivalent, both represent vector of strings\n\nint main(int argc, char* argv[], char* envp[]) {}\n// envp is another optional argument which contains environment variables\n// do not use argv or envp in calls to system(), it is a huge security hole\n// for example, system(argv[2]) is bad, argv[2] could be rm -rf *\n</code></pre> <p>By default, command line arguments are divided by spaces. If we want an argument to include a space, it must be typed in double quotes.</p> <pre><code>./executable.exe \"hello world\" and -a -b -c\n// argc = 6\n// argv[0] = ./executable.exe\n// argv[1] = hello world\n// argv[2] = and\n// argv[3] = -a\n// argv[4] = -b\n// argv[5] = -c\n</code></pre>"},{"location":"resources/bit-foundry/cpp-notes/#compiled-vs-interpreted-languages","title":"Compiled vs Interpreted languages","text":"<p>Compiled languages such as C, C++, C#, Objective-C, Pascal, Scala, Swift, Erlang, Haskell, Rust, PL/SQL and Go, are compiled into machine code that can be executed directly on a computer's processor. A compiler will translate code into computer's \"native\" language upfront, well before the program is even run. This process can take many passes before it is optimized as machine code, but the output is always machine code that executes efficiently and natively on the platform.</p> <p>Interpreted languages such as Java, JavaScript, PHP, Perl, Python and Ruby, are not already in \"machine code\" prior to runtime. Unlike compiled languages, an interpreted language's translation doesn't happen beforehand. Translation occurs at the same time as the program is being executed. Interpreted languages have a major advantage: they are portable, which means they can run on different operating systems and platforms.</p>"},{"location":"resources/bit-foundry/cpp-notes/#primitive-types-pod-plain-old-data","title":"Primitive types (POD = plain old data)","text":"<pre><code>char x;  // 1 byte = 8 bits\nint x;   // 4 bytes = 32 bits\n\n// a type can be signed or unsigned\nchar a; unsigned int b;\n\n// for signed integers, all numbers with the most significant bit equal to 1 are negative, this encoding is called two's complement\n// e.g. binary (1011) = -(1 * 2^3) + (0 * 2^2) + (1 * 2^1) + (1 * 2^0) = -5 in decimal\n// to represent negative X, take the bits for X, flip them (turn 0s into 1s and 1s into 0s) and then add 1\n// e.g. number 5 (0101) -&gt; flip the bits (1010) -&gt; add 1 (1011) = -5\n\nshort int               // 2 bytes = 16 bits\nlong int                // 4 bytes or 8 bytes depending on the architecture\nlong long int           // 8 bytes = 64 bits, -(2^63) to (2^63)-1\nunsigned long long int  // the biggest int type in standard C++, hold numbers up to 18,446,744,073,709,551,615\n\n// using fixed width integer types, size of the data type is much clearer\nuint8_t\nint16_t\nuint32_t\nint64_t\nchar32_t  // utf-32\n...\n\n// boolean type is 1 byte even though we only need 1 bit for 0/1, other 7 bits are wasted\n// there are cool techniques to store 8 booleans in one byte though\nbool x = 1;  // 1 byte = 8 bits\n\n// floating point numbers are represented using scientific notion in base 2 (IEEE Standard)\n// the most significant bit is the sign bit, next 8 bits encode the exponent, lowest 23 bits encode the mantissa\n// the formula is: (-1)^s * m * 2^e, where m: mantissa or significand, e: exponent\n// when s = 1, the number is negative. when s = 0, the number is positive.\n// float only has single precision, they are approximate and imprecise so do not check == equality on it\nfloat x = 32.6f;  // 4 bytes\n\ndouble       // 8 bytes, double precision, there's no half float type in C++\nlong double  // 12 bytes = 96 bits\nwchar_t      // 2 or 4 bytes, 1 wide character\n\nsizeof(int)  // sizeof() returns the size (number of bytes) of a type/variable/expression\nsizeof(obj)  // result of sizeof() might differ depending on the compiler/platform (32-bit or 64-bit architecture)\n</code></pre>"},{"location":"resources/bit-foundry/cpp-notes/#c-vs-c-output","title":"C vs C++ output","text":"<pre><code>printf();        // C style\nsprintf();       // C style\nstd::cout &lt;&lt; 0;  // C++ style\nstd::format();   // the preferred way in C++20 and above\n\nstd::cout &lt;&lt; \"Hello\\n\";             // \\n only starts a new line but does not flush output\nstd::cout &lt;&lt; \"Hello\" &lt;&lt; std::endl;  // std::endl starts a new line and flushes the output\n</code></pre> <p>How to pause a program and wait for a keyboard input to continue?</p> <pre><code>system(\"pause\");  // BAD, platform-specific hack, unsafec\nstd::cin.get();   // GOOD\n</code></pre> <p>Infinite loops, use <code>Ctrl+C</code> to break</p> <pre><code>for (;;) {}\nwhile (true) {}\n</code></pre> <p>Pass a function as an argument of another function</p> <pre><code>float f(int x) {\n    return x + 1;\n}\n\nint g(float (*f)(int), int a) {  // the address of f() will be passed to g()\n    return (*f)(a);  // extract (*f) before calling f(a)\n}\n\nint main() {\n    g(f, 1);  // pass the function name, which is the same as the function address\n}\n</code></pre> <p>Caveat of deep copy - if a class has pointers or any runtime allocation of resources like a file handle, a network connection, etc, we must define our own copy constructor to make a deep copy, which means that pointers (or references) of copied object point to new memory locations.</p> <p>Why we should not use using <code>namespace std;</code>? because it can easily cause duplicate names.</p> <p>Array as a function argument:</p> <p>C++ does not allow passing an entire array as an argument to a function. However, You can pass a pointer to an array by specifying the array's name. When the function is called, array arguments are implicitly adjusted to pointer arguments, so <code>func(int a[])</code> is equivalent to <code>func(int* a)</code> as <code>int a[]</code> is adjusted to <code>int* a</code>. Note however that <code>int a[10]</code> is not equivalent to <code>int* a</code>. In fact, when we pass the array's name as an argument to the function, what's really being passed is the address of the array, and this call is similar to call by reference. As a result, if we have mutated the array inside the function's body, this change will also be applied to the real array outside the function.</p> <p>The address of the array is the address of its first element, which specifies the start position of the array, but not the length, that's why we always pass the array's length \"n\" as an extra argument. To ensure \"n\" is non-negative and large enough to hold a possibly very long array, use <code>size_t</code> as its type. <code>size_t</code> is an unsigned int with the right number of bits to describe the size or index of an array, it could be unsigned int or unsigned long depending on your compiler and OS platform.</p> <p>When using raw arrays in C++, we often need to maintain the size of the array ourselves, there\u2019s not a <code>size()</code> method as in other languages. Although there\u2019s a trick <code>sizeof(a) / sizeof(int)</code> for checking the size of an array, it is not reliable.</p> <pre><code>void func1(int a[10]) {  // sized, NOT equivalent to func1(int* a)\n    ...\n}\n\nvoid func2(int a[]) {  // unsized, equivalent to func2(int* a)\n    ...\n}\n\nvoid func3(int b[][4]) {  // 2-dimensional array\n    ....\n}\n\nint a[10];\nint b[3][4];\n\nfunc1(a);  // pass array's name directly to the function call\nfunc2(a);  // array's name can be used as a pointer (but not essentially a real pointer)\nfunc3(b);\n</code></pre> <p>if the array argument is unsized, C++ will not perform any boundary checks. In this case, we must pass the array size as a supplementary argument</p> <pre><code>void sort(int data[], int length) {}\ndouble average(int arr[], int size) {}\n</code></pre> <p>C style strings - arrays (mutable), memory address on the stack</p> <pre><code>char string[] = {'H','e','l','l','o','\\0'};  // essentially it's a char array\nchar string[] = \"Hello\";  // as a shorthand, we can write like this\nstring[0] = 'w';  // the string is mutable because arrays are mutable\n\nchar str[11]      // 1 string, length &lt;= 10 (we write 11 because there's an extra '\\0' character)\nchar arr[10][21]  // 10 strings, each has length &lt;= 20 (we write 21 because of the null terminator)\narr[0]  // the 1st string in the array\narr[9]  // the last string in the array\n\nchar str[3] = \"abc\";  // error, because maximum length is 2 but received 3\n</code></pre> <p>C style strings - pointers (immutable), memory address in literals pool</p> <pre><code>char* string = \"Hello\";  // a string literal in the memory pool, it's immutable\n\nstd::cout &lt;&lt; static_cast&lt;const void*&gt;(string) &lt;&lt; std::endl;  // address of string\nstd::cout &lt;&lt; &amp;\"Hello\" &lt;&lt; std::endl;  // address of \"Hello\" = address of string\n\nstring[0] = 'h';  // Segmentation Fault, the string value cannot be mutated\nconst char* string = \"Hello\";  // it's a good habit to write const char* since it's immutable\n</code></pre> <p>Summary of C style strings:</p> <p>In practice, we prefer to use arrays as C style strings because it's mutable, but this is dangerous and we have to make sure that the array has enough space. C++ does not check array boundaries, if it's out of bound, this will lead to the so-called segmentation fault (trying to access or modify memory that you do not own). On the other side, we also need to care about the caveats of using pointers as C style strings. Even though the <code>char*</code> string is immutable, the program still compiles when we attempt to mutate the string, and it is going to crash only at runtime. As a good programming habit, we should always use the <code>const</code> keyword before a <code>char*</code> string, so that the program will not compile when we try to mutate it.</p> <pre><code>char* string = \"Hello\";\nstring[2] = 'x';  // program will crash immediately at runtime\n\nconst char* string = \"Hello\";\nstring[2] = 'x';  // program won't compile, we will notice this error at compile time\n</code></pre> <p>C style strings manipulation - internally, every string ends with <code>\\0</code>, so <code>'S'</code> is not the same as <code>\"S\"</code>, which is actually <code>'S' + '\\0'</code>.</p> <pre><code>#include &lt;cstring&gt;\n\nstrlen(string);\nstrcpy(to, from);  // make sure string \"to\" is long enough to hold \"from\"\nstrcmp(s1, s2);    // returns a positve if s1 &gt; s2, a negative if s1 &lt; s2, and 0 if s1 == s2\nstrcat(s1, s2);    // concat s1 = s1 + s2, make sure s1 is long enough\n\n// must always use strcmp() to compare two strings to see if they are equal\n// the == operator only checks if two strings are pointing at the same place (pointer equality)\nchar str1[] = \"Hello\";\nchar str2[] = \"Hello\";\nstrcmp(str1, str2);  // returns 0\nstr1 == str2  // returns false because str1 and str2 have different addresses\nstrcasecmp(s1, s2);  // this function performs case-insensitive comparison (A == a)\n\nchar x;\ncin &gt;&gt; x;\nint ascii = static_cast&lt;int&gt;(x);  // every char has an ascii value\n\nif (ascii &gt;= 48 &amp;&amp; ascii &lt;= 57) { cout &lt;&lt; \"0-9 digit\" }\nif (ascii &gt;= 65 &amp;&amp; ascii &lt;= 90) { cout &lt;&lt; \"upper case letter\" }\nif (ascii &gt;= 97 &amp;&amp; ascii &lt;= 122) { cout &lt;&lt; \"lower case letter\" }\n</code></pre> <p>C++ style strings - the <code>std::string</code> class</p> <pre><code>#include &lt;string&gt;   // more convenient and safer than using char[]\n\nstd::string input;\ncin &gt;&gt; input;  // ok\nscanf(\"%s\", &amp;input);  // no, C++ style string does not work with scanf(\"%s\")\n\nstd::string str1 = \"Hello\";\nstd::string str2 = \"World\";\nstd::string str3;\n\nstr1[0]  // 'H'\nstr2[2]  // 'r'\nstr3 = str1;  // copy\nstr3 = str1 + str2;  // concat\nstd::cout &lt;&lt; (str1 &lt; str2) &lt;&lt; std::endl;  // compare\nstd::cout &lt;&lt; str3.length() &lt;&lt; std::endl;  // string length\nstd::cout &lt;&lt; str3.size() &lt;&lt; std::endl;  // string length\n\nstd::string sub = str1.substr(2,3);  // \"llo\", substr(pos, length)\nstr2.insert(5, \"Craft\");  // \"WorldCraft\", insert(pos, string)\n\nstd::string str4 = \"1234567890\";\nsize_t pos = str4.find('5');  // find\nif (pos != std::string::npos) {  // npos = -1\n    std::cout &lt;&lt; \"Found at position: \" &lt;&lt; pos &lt;&lt; std::endl;  // pos = 4\n}\nelse {\n    std::cout &lt;&lt; \"Not found!\" &lt;&lt; std::endl;\n}\n\nstr4.replace(0, 5, \"abcde\");  // \"abcde67890\", replace(pos, length_of_portion, string_to_replace)\n</code></pre> <p>C style input/output - <code>scanf()</code>, <code>printf()</code> could cause buffer overflow security problems, which makes your code vulnerable to attacks. However, they are very good at handling formatted input and output, and they are much faster than <code>cin</code>, <code>cout</code>. Note that some compilers and IDEs such as Visual Studio may not support <code>scanf()</code>, you have to add <code>#define _CRT_SECURE_NO_WARNINGS</code> at the beginning of the file to use it.</p> <pre><code>#include &lt;cstdio&gt;\n#define _CRT_SECURE_NO_WARNINGS\n\nint i, j;\nchar c;\nchar s[10];  // make sure scanf() will not overflow\nfloat f;\n\nscanf(\"%d\", &amp;i);\nscanf(\"%c\", &amp;c);\nscanf(\"%s\", &amp;s);  // \"%s\" format can only be stored in C style strings\nscanf(\"%f\", &amp;f);\nscanf(\"%d %d\", &amp;i, &amp;j);  // scan multiple user inputs in one line\nprintf(\"%.2f\", i);\n\nint year, month, day;\nscanf(\"%d-%d-%d\", &amp;year, &amp;month, &amp;day);  // must call by reference(address)\nprintf(\"%d-%d-%d\", year, month, day);\n\n//! if user input is too long to be held in string[10] -&gt; segmentation fault\nchar string[10];  // make sure the array is long enough\nscanf(\"%s\", &amp;string);\nscanf(\"%s\", string);  // this also works because array's name = array's address\n\n// printf() outputs directly to the console, sprintf() outputs to a string variable\nchar information[100];  // make sure the array is long enough, otherwise segmentation fault\nsprintf(information, \"%s is a %s. He is %d-year-old.\", name, gender, age);\ncout &lt;&lt; information &lt;&lt; endl;\n\n// printf() can be susceptible to security vulnerability, such as format string attacks:\n// https://en.wikipedia.org/wiki/Uncontrolled_format_string\nprintf(userInput);  // risky, what if userInput is \"select * from user_roles;\" or \"rm -rf *\" or contains (\"%d\", password)?\nprintf(\"%s\", userInput);  // safer\n\nfor (int i = 1; i &lt;= 10; i++) {\n    printf(\"%d \",i);\n    fflush(stdout);  // without fflush(), will not print to screen at once (saved in buffer)\n    sleep(1);\n}\n</code></pre> <p>C++ style input/output - unless you need to handle very complicated input/output formats, or you are concerned about speed and time limit, using <code>cin</code>, <code>cout</code> is always a better option because they are secure, robust and powerful. Note that <code>cin</code>, <code>cout</code> is often banned in algorithm competitions for their slowness, but that doesn\u2019t apply to normal C++ programs.</p> <pre><code>cin         // an object of type istream\ncout        // an object of type ostream\ncerr, clog  // the other two ostream objects\n\ncout &lt;&lt; endl;  // \"endl\" ends the current line and flushes the cout buffer\ncout &lt;&lt; '\\n';  // '\\n' also ends the line but does not flush the buffer, take care\ncout &lt;&lt; '\\a';  // beep or alarm\n\n// when you debug with \"cout\", always add \"endl\" to flush the stream\n// otherwise sth could be left in the buffer and mislead you\ncout &lt;&lt; var &lt;&lt; endl;  // debug mode\n\ncin &gt;&gt; v1 &gt;&gt; v2;  // chain\nwhile (cin &gt;&gt; value)  // test the state of the istream object cin (valid/invalid)\n\nstd::string line;\nwhile (getline(cin, line))  // read in a whole line, including spaces\n                            // press Enter to input a new line, press Ctrl + Z followed by Enter to finish input\n</code></pre> <p>Learn more about string streams and file streams in C++.</p> <p>Void pointer - can later be assigned the value of any other pointers</p> <pre><code>void* vp;\nint* p = &amp;\"123\";\nvp = p;  // it's ok to assign any pointer to vp\n\nvoid* vp;\nint* p = &amp;\"123\";\np = (int*) vp;  // when vp is assigned to other pointers, explicit type conversion is necessary in C++ (not in C)\n</code></pre> <p>Void pointer is a pointer to an unspecified type of data, it's used to write generic functions in C. However, <code>void*</code> is also dangerous, in C++, we prefer to use template <code>T</code> for generic functions.</p> <pre><code>int func(const void* vp) {\n    const int* p1 = (int*) vp;  // void* can be typcasted to any type\n    const char* p2 = (char*) vp;\n}\n\nint* x = (int*) malloc(sizeof(int) * n);  // malloc() returns void* which can be typecasted to any type\ndouble* x = (double*) malloc(sizeof(double) * n);\n</code></pre> <p>Null pointer - a pointer that points to nowhere but the type is already determined.</p> <pre><code>int* ptr = 0;\nint* ptr = NULL;     // same as above\nint* ptr = nullptr;  // better\ndouble* ptr = NULL;\n</code></pre> <p>Arrays and pointers - array's name can be used as a pointer which points to the first element in the array. Note however that array's name is not the same as a real pointer, it is just that C++ allows us to use it like a constant pointer.</p> <pre><code>int a[10];\ncout &lt;&lt; *(a) &lt;&lt; endl;      // a[0]\ncout &lt;&lt; *(a + 1) &lt;&lt; endl;  // a[1]\ncout &lt;&lt; a + 2 &lt;&lt; endl;     // &amp;a[2]\na = &amp;\"123\";  // no way\n</code></pre> <p>Function pointers - useful in functional programming, that is, pass a function type as an argument of another function</p> <pre><code>int myFunc(double x) {\n    return (x &gt; 0.0 ? 1 : -1);\n}\n</code></pre> <p>Declare a function pointer <code>fp</code> with <code>typedef</code> (recommended)</p> <pre><code>typedef int (*intDoubleFunction)(double);  // define a type, now intDoubleFunction is a pointer type of a specific function type\nintDoubleFunction fp;                      // declare fp, now fp is a concrete function pointer of that pointer type\nfp = myFunc;                               // assign a value (a concrete function address) to fp\nfp = &amp;myFunc;                              // function names are essentially the same as function addresses\nintDoubleFunction fp = myFunc;             // declare and define fp in one line\n</code></pre> <p>Declare a function pointer <code>fp</code> without ```cpp (not recommended)</p> <pre><code>int (*fp)(double);  // this looks concise but it's less straightforward, and the code is not reusable\nfp = myFunc;        // if we need to declare many function pointers fp1, fp2, ..., we have to repeat our code many times\n</code></pre> <p>Use a function pointer</p> <pre><code>fp = myFunc;\nfp(0.25);  // equivalent to myFunc(0.25)\n\nint f(int (*fp)(double), int x) {\n    return (*fp)(x);  // we can extract fp before making a call\n    return fp(x);     // this also works because both (*fp) and fp in essense represent the function address\n}\n\nf(someIntDoubleFunction, 10)\n</code></pre> <p>C style dynamic memory allocation - the return type of <code>malloc()</code> is <code>void*</code>, so we have to apply explicit type conversion to it before assigning it to other pointers. <code>malloc()</code> only allocates space but does not create instances. If we want to create object instances while sticking to the C style <code>malloc()</code>, then we must use the placement new operator, the syntax is <code>new(address) Object()</code>;</p> <pre><code>int* p = (int*) malloc(sizeof(int));  // explicit type conversion\nint* p = new int;  // C++ equivalent\n\nint* p = (int*) malloc(n * sizeof(int));  // explicit type conversion\nint* p = new int[n];  // C++ equivalent\n\nfree(p);  // free memory\ndelete p;  // C++ equivalent\ndelete[] p;  // C++ equivalent\n\nPoint* p = (Point*) malloc(sizeof(Point));  // allocate memory space\nnew(p) Point();  // placement new to create an instance\n\nPoint* p = new Point();  // C++ equivalent to the above 2 lines combined\n</code></pre> <p>C++ style dynamic memory allocation - new and delete must be paired, and vice versa. Never delete twice, never delete without new, otherwise undefined behavior. Memory allocated for a variable is on the stack, it cannot be freed using delete, memory allocated using new is on the heap (free store), and it's the programmer's responsibility to delete it after use in order to prevent memory leaks. For large piece of data, using new to allocate memory can help save memory because dynamic binding at runtime is better than static binding at compile time. The C style malloc can only allocate space, but C++ new can allocate space and create object instances at the same time.</p> <pre><code>int* pt = new int;     // allocate space for an int at runtime, not initialized\nint* pt = new int(2);  // initialize with int 2\nint* pt = new int();   // initialize with int 0\n\n*pt = 1001;    // store a value there\ndelete pt;     // free memory (clear data in that address), but pt still points to that address\npt = nullptr;  // reset to NULL pointer\n\nPoint* p = new Point(0,0);  // allocate space and create an instance\ndelete p;\n\nint tacos[10];  // static binding, size fixed at compile time\nint* pz = new int[size];  // dynamic binding, size set at run time\ndelete[] pz;\n</code></pre> <p>About memory leaks:</p> <p>A memory leak reduces the performance of the computer by reducing the amount of available memory. When you have memory leaks in your program, the program is effectively using more memory than it really needs to.</p> <p>A memory leak is simply memory that a process no longer has a reference to, and thus can no longer free. However, the OS still keeps track of all the memory allocated to a process, and will free it when that process terminates. It\u2019s not like that once you have a memory leak, it will not be freed up and reused until you reboot the machine, that\u2019s a common misunderstanding.</p> <p>Constant pointers and pointer constants</p> <pre><code>// 'const' before '*', this is a constant pointer\nint n = 10, m = 100;\nconst int* p = &amp;n;\nint const* p = &amp;n;\n\n// the value of the variable it points to cannot be changed via this pointer\n// but ofc it can be changed in other ways, and it can also points to other addresses\n*p = 5;  // not allowed\nn = 6;   // allowed\np = &amp;m;  // allowed\n\n// 'const' after '*', this is a pointer constant\nint* const p = &amp;n;\n\n// we cannot make it point to other addresses, but the value of the variable it points to can be changed via it\n*p = 8;  // allowed\np = &amp;m;  // not allowed\n\nconst int* const p = &amp;n;  // neither the address nor the value it points to can be changed\nn = 999;                  // but of course the value it points to can always be changed in other ways\n</code></pre> <p>About lambda expressions:</p> <p>the type of a lambda expression is not fixed, different lambda expressions may have different types</p> <p>for example, a lambda expr which takes in a double and returns an <code>int</code> has the type <code>std::function&lt;int(double)&gt;</code></p> <p>in the [capture list], we cannot capture global variables, they are always visible and can be modifed in lambda</p> <p>a lambda expression is essentially a function, but it behaves like a variable, a special type of variable</p> <p>when we define a function, there's no semicolon <code>;</code> at the end: <code>int f(int) {}</code></p> <p>when we define a lambda expr (variable), there must be a semicolon <code>;</code> at the end: <code>auto f = [](int){};</code></p> <p>if the lambda expr is not definitive, we often use template <code>U</code> to refer to its general type, which means [U]nknown</p> <p>if the lambda expr must be saved, we will explicitly write its type <code>std::function&lt;T&gt;</code> (must <code>#include &lt;functional&gt;</code>), otherwise we write its type as auto</p> <p>if a function returns a lambda expr, we can write its return type as <code>decltype(auto)</code> (C++14 only), auto asks the compiler to infer the type of a variable/argument for us, <code>decltype(auto)</code> asks the compiler to infer the return type of a function for us</p> <p>Uniform or brace initialization {} - https://stackoverflow.com/questions/24953658/what-are-the-differences-between-c-like-constructor-and-uniform-initialization</p> <pre><code>int arr[] = {1, 2, 3, 4};          // initialize an array\nint arr[] {1, 2, 3, 4};            // = is optional\nvector&lt;int&gt; v = {1, 2, 3, 4};      // initialize a vector\nvector&lt;int&gt; v {1, 2, 3, 4};        // = is optional\nPoint p[3] {{1,2}, {3,4}, {5,6}};  // initialize an array of 3 points (1,2), (3,4) and (5,6). (nested brace initialization)\n\nvector&lt;int&gt; v(100);  // creates a 100-element vector\nvector&lt;int&gt; v{100};  // creates a 1-element vector, holding the value 100.\n</code></pre> <p>when uniform initialization {} is used with auto, that creates a <code>std::initializer_list</code>.</p> <pre><code>auto var = {1, 2};  // creates a std::initializer_list, with var as its identifier\n</code></pre> <p>C++ input stream</p> <pre><code>while (std::cin &gt;&gt; word) {  // condition is true only if cin stream is valid (no failbit, badbit, eof...)\n    ...\n}\n\nwhile (std::cin &gt;&gt; v1 &gt;&gt; v2) {\n    ...\n}\n\nwhile (cin &gt;&gt; word, !cin.eof()) {  // comma operator \",\" returns the rightmost expression as the result\n    if (cin.bad()) {\n        throw runtime_error(\"IO stream corrupted\");\n    }\n    if (cin.fail()) {\n        cerr &lt;&lt; \"bad data, try again\";\n        cin.clear(istream::failbit);\n        continue;\n    }\n    ... // process word\n}\n\nistream::iostate old_state = cin.rdstate();  // remember current state of cin\ncin.clear();\n...  // process input\ncin.clear(old_state);  // restore cin to old state\n\nstream.setstate(ifstream::badbit | ifstream::failbit);  // set multiple bits at once using bitwise OR operation |\n</code></pre> <p>There are 3 ways to flush an output stream</p> <pre><code>std::cout &lt;&lt; \"Hello \" &lt;&lt; \"world!\" &lt;&lt; \"\\n\";        // this will NOT flush!\nstd::cout &lt;&lt; \"Hello \" &lt;&lt; \"world!\" &lt;&lt; std::flush;  // flushes the buffer; adds no data\nstd::cout &lt;&lt; \"Hello \" &lt;&lt; \"world!\" &lt;&lt; std::ends;   // inserts a \\0, then flushes the buffer\nstd::cout &lt;&lt; \"Hello \" &lt;&lt; \"world!\" &lt;&lt; std::endl;   // inserts a \\n, then flushes the buffer\n\n// besides, whenever \"cin &gt;&gt; value\" executes, cout is automatically flushed\n</code></pre> <p>How to flush after every <code>&lt;&lt;</code> operation (rarely used)</p> <pre><code>cout &lt;&lt; std::unitbuf &lt;&lt; \"1\" &lt;&lt; \" 2\" &lt;&lt; \" 3\" &lt;&lt; ... &lt;&lt; std::nounitbuf;  // is equivalent to\ncout &lt;&lt; \"1\" &lt;&lt; std::flush &lt;&lt; \" 2\" &lt;&lt; std::flush &lt;&lt; \" 3\" &lt;&lt; std::flush &lt;&lt; ... &lt;&lt; std::flush;\n</code></pre> <p>Basic file streams</p> <pre><code>ifstream input(\"foo.in\");  // create a file stream + open + bind in one line\nofstream output(\"bar.out\");\n\n// file open modes\nofstream outfile(\"file1\");                                   // by default truncates file named \"file1\"\nofstream outfile(\"file1\", ofstream::out | ofstream::trunc);  // same as above\nofstream outfile(\"file2\", ofstream::app);                    // append mode\n\nfstream file(\"foobar\", fstream::in | fstream::out);  // a fstream file is opened for both read and write (by default)\n</code></pre> <p>References vs pointers !!!</p> <pre><code>int x = 1024, y = 2048;\nint *p1 = &amp;x, *p2 = &amp;y;\np1 = p2;  // now both p1, p2 points to y\n\nint &amp;r1 = x, &amp;r2 = y;\nr1 = r2;  // assign y to x, x has changed\n</code></pre> <p>References do not occupy memory, it\u2019s just a symbol. Under the hood, references are just syntactic sugar around pointers. Pointers however is a real type, they are 8 bytes long on 64-bit systems (or 4 bytes long on 32-bit systems).</p> <p><pre><code>int* ip[4];    // array of pointers to int\nint (*ip)[4];  // pointer to an array of 4 ints, no practical use\n</code></pre> Confusion about the <code>static</code> keyword:</p> <p>static within a class/struct - only one copy across all class/struct instances, shared memory address</p> <p>static within a function/file - internal linkage, keeps only one copy of the variable, private to a single source file, not visible to others, not global</p> <p>Every container has the default ctor without parameters to make an empty container - <code>container&lt;T&gt; c</code>;</p> <p>vector elements are stored in contiguous memory, <code>insert()</code> and <code>erase()</code> are expensive, accessing elements is fast.</p> <p>list elements are not stored in contiguous memory, <code>insert()</code> and <code>erase()</code> are fast, accessing elements is expensive.</p> <p>deque is double-ended, <code>insert()</code> and <code>erase()</code> are fast on both ends but slow in the middle, accessing elements is fast.</p> <p>Classes in C++:</p> <p>a typedef inside a class is only local to this class, not visible to others.</p> <p>use initializer's list to initialize members in constructor.</p> <p>the order that members get initialized is the order that they are declared in the class, not the order that they are given in the initializer's list.</p> <p>if members' initialized values are dependent on each other, it\u2019s important to declare them in the right order.</p> <p><code>Foo:Foo(): i(10), j(sqrt(i) + 3*i + 999) {}</code>  - an initializer's list can have any complicated expression.</p> <p>Pass by references vs pointers: use references whenever you can (preferred), and pointers when you have to.</p>"},{"location":"resources/bit-foundry/cpp-notes/#silver-review","title":"Silver Review","text":"<p><code>memmove</code> vs <code>memcpy</code> (both are C library functions)</p> <p><code>memcpy</code> stands for \"memory copy.\" It is used to copy a specified number of bytes from a source memory location to a destination memory location. It doesn't check for overlapping memory regions. If the source and destination regions overlap, the behavior is undefined, and it can lead to unexpected results.</p> <p><code>memmove</code> stands for \"memory move.\" It is used to copy a specified number of bytes from a source memory location to a destination memory location, even if the source and destination regions overlap. memmove performs additional checks to handle overlapping memory regions. If there's an overlap, it ensures that the copying process is done in a way that preserves the integrity of the data.</p> <p>Because of the overlap checks and potentially more complex copying logic, <code>memmove</code> is slightly slower than <code>memcpy</code>. Generally, <code>memcpy</code> is faster.</p> <p>the \"M&amp;M Rule\", mutable and mutexes (and atomics) go together (https://herbsutter.com/2013/05/24/gotw-6a-const-correctness-part-1-3)</p> <p><code>__forceinline</code></p> <p>RVO, NRVO</p> <ul> <li>https://en.wikipedia.org/wiki/Copy_elision#RVO</li> </ul> <p>Can I have default arguments in a virtual/override function?</p> <p>Yes, the C++ Standards allows this, but there are some caveats in the context of inheritance and polymorphism. While you can have default arguments in a virtual/override function, the defaults in the base class are not inherited by derived classes. They are part of a function\u2019s signature, meaning that you can have different default values in the base class vs the derived class.</p> <p>In terms of which default value will be used - it is determined by the static type of the pointer or reference denoting the object. If you call through a base class object, pointer or reference, the default denoted in the base class is used. Conversely, if you call through a derived class object, pointer or reference, the default denoted in the derived class is used. The takeaway is that, while a virtual function is called on the dynamic type of the object, the default parameter values are always based on the static type. This can lead to unexpected results, for example, what would happen if you call a virtual function that\u2019s overridden in a derived class but you are calling it through a base class pointer? Well, obviously the function in the derived class will be called, but the default value is coming from the base class.</p> <p>The bottom line is, don\u2019t do that! It\u2019s OK if you want to have default arguments in a virtual/override function, but you need to ensure that the default values match in every class throughout the inheritance hierarchy.</p> <p>You must never call virtual functions within a constructor.</p> <ul> <li>https://stackoverflow.com/a/9529188/10677643</li> </ul> <p>What is the default value of a raw pointer?</p> <p>With smart pointers we don\u2019t have to do explicit initialization as they default to nullptr, but in the case of a raw pointer, it will not be initialized unless a value is assigned to it, otherwise it will just point to some indeterminate garbage address in memory by default. As such, every time we declare a raw pointer (either as a variable or a class member) we must initialize it properly (direct assignment or initialize in your class constructor\u2019s initializer list), some compilers do assign nullptr for raw pointers by default but it\u2019s not a standard feature that we can rely on.</p> <p>If you fail to initialize a raw pointer correctly, it is essentially the same as a dangling pointer so calling any member function on it could lead to undefined behavior. Using a debugger or memory view, you might see an error message saying that \u201ccannot access the specified memory address\u201d or something similar, often times we will also get a <code>SIGSEV</code>, <code>SIGEMT</code> or <code>SIGBUS</code> in the meantime, after all the address is invalid so it might not even belong to our program's assigned memory space.</p> <p>Tips: 90% of the time we get a segmentation fault, it\u2019s caused by some uninitialized value!</p> <p>Sometimes we have a pointer that is not properly initialized (holding an invalid memory address)</p> <p>Sometimes we have a variable that\u2019s default-constructible but the default constructor fails to initialize all values correctly.</p> <p>Either way, your program would compile just fine but then segfaults at runtime.</p> <p>These are the first things to check when you have a <code>SIGSEV</code> thrown at runtime.</p> <p>Speaking of the best practice, we should avoid using raw pointers unless there\u2019s really a need for it. Often times we would use a smart pointer to manage some kind of object or resources, and whatever we do should mostly be done through this smart pointer. In case you are using the <code>get()</code> function to retrieve the underlying raw pointer from a smart pointer for the purpose of doing some trivial checks/tasks, remember to store it in a <code>const T*</code> variable to ensure const-correctness at all times. Except in some rare circumstances, we would almost never want to call a non-const member function through the raw pointer as that should be done through the smart pointer who truly owns the object.</p> <p>If the <code>const T*</code> variable is a member of a class, make sure to initialize it to nullptr in the constructor as we don\u2019t want to shoot ourselves in the foot when an instance of the class gets instantiated, also don\u2019t forget to check it against nullptr before using it at any point. Above all, keep in mind that its scope safety is not guaranteed so we should only use it within a narrow context. Once the smart pointer gets destroyed, it will become a dangling pointer because it\u2019s still holding the old address value which is no longer valid.</p> <p>General rule: don\u2019t pass <code>std::shared_ptr&lt;T&gt;</code> around, pass the raw pointer instead.</p> <p>if you pass it by value, reference count will increment</p> <p>if you pass it by reference, a temporary object needs to be created?</p> <p>Same thing for <code>std::unique_ptr&lt;T&gt;</code>, in general just don\u2019t pass smart pointers around.</p> <p><code>std::endl</code> is equivalent to <code>'\\n' &lt;&lt; std::flush</code>, that flush can cost you at least 9x overhead in your IO, so avoid using <code>std::endl</code> and just use <code>'\\n'</code> instead.</p> <p>What is IIFE?</p> <p>Make sure the obey the Rule of 0</p> <p>Remember that every time you declare a virtual destructor in your class, you are essentially preventing the compiler from generating the move operations so you lose all the movability. To fix this, add the declaration of them using <code>= default</code> in your base class, and derived classes don\u2019t need a virtual destructor because they will inherit the base one by default.</p> <p>Const methods should be made thread-safe?</p> <p>It\u2019s not always the best to pass a string as <code>const std::string&amp;</code>. If you know it\u2019s going to be totally consumed by your function, you can declare it as passing by value and then move it.</p> <p>Find a post on stackoverflow on this.</p> <p>Always prefer <code>std::array</code>, then <code>std::vector</code>, then only differ you need specific behavior.</p> <p>Performance wise, <code>std::array</code> is the best of all with literally 0 overhead, don\u2019t use expensive containers like <code>std::list</code> unless you really have to (for a good reason).</p> <p>In Python we would use <code>from functools import partial</code> to create partial functions.</p> <p>In C++, we should use lambda functions to achieve that, it has 0 overhead compared to a direct function call. In this case, please avoid <code>std::function</code> and never use <code>std::bind</code>, these two also work but are 2~3 times slower.</p> <p>In a performance sensitive function, all data needs to be local to that function, avoid non-local data as much as possible unless you really have a good reason. Note that static data actually has a hidden cost associated, it\u2019s not as fast as local data. Based on the C++11 rules static data must be thread-safe, so it actually needs some kind of mutex protection under the hood and that has an overhead.</p> <p>If you know that a class or method will be the final version, mark it as such. Proper use of <code>final</code> can help the compiler optimize virtual function calls (e.g. make them inline).</p> <p>General performance tips?</p> <p>Avoid making unnecessary copies, utilize reference, pointer and move semantics wisely.</p> <p>Construct in place, placement new, usually not a big deal but can be crucial for complex objects.</p> <p>Allocate memory on the stack unless you really need the heap for large data size or longer lifespan.</p> <p>Understand what are commonly slow, e.g. excessive copying, reference counts, dynamic memory allocation, lookups in the vtable, I/O operations, recursion, branching, etc.</p> <p>Yet more importantly,</p> <p>Stop doing premature optimization! e.g. <code>i++</code> and <code>++i</code> makes no difference with <code>-O3</code> enabled.</p> <p>Do not overthink performance in the early development stage, until you really have to optimize.</p> <p>Most slowness can be solved by using the right data structure or optimizing it, this often leads to over 70% improvement in performance.</p> <p>Nothing obvious? Try using a profiler to find out the slow part, dissemble it and see what you can do.</p> <p>Otherwise, you would need to think about your program and make some guesses.</p> <p>Erase-Remove Idiom in C++</p> <ul> <li>https://www.geeksforgeeks.org/erase-remove-idiom-in-cpp/</li> <li>https://www.codeproject.com/Articles/1227392/Erase-remove-Idiom-Revisited</li> </ul> <p>Another way to do this, this solution has the upside of being able to do something with the element before removing it, and it works on containers like <code>std::map</code> and <code>std::unordered_map</code> as well, not just on <code>std::vector</code>.</p> <p>Notice that the expression that is executed after every iteration of the loop and before re-evaluating the condition is marked as <code>/* BLANK */</code>, instead, the iterator it is manually modified in all execution paths in the body of the for loop, that\u2019s how it works.</p> <p>an abstract interface class in C++ always has a <code>virtual ~dtor() = default</code>, \u4f46\u662f\u8fd9\u4e2aabstract class\u4e0d\u9700\u8981\u6709ctor\uff08\u901a\u5e38\u6ca1\u6709\uff09\uff0c\u53ea\u5b9a\u4e49\u4e00\u4e9b\u5173\u952e\u6027\u7684method\u7684\u63a5\u53e3\u89c4\u8303\u3002\u8fd9\u6837derived class\u5c31\u53ef\u4ee5\u81ea\u884c\u5b9a\u4e49\u5b83\u4eec\u60f3\u8981\u7684ctor\u6784\u9020\u51fd\u6570\u4e86\uff0c\u6ca1\u5fc5\u8981\u5728abstract class\u91cc\u53bb\u9650\u5236ctor\u7684\u5f62\u5f0f\u3002\u6216\u8005\u4e00\u822c\u4e5f\u53ef\u4ee5\u628actor\u653e\u5728protected\u91cc\u9762\uff0c\u907f\u514d\u8fd9\u4e2aabstract interface class\u88ab\u76f4\u63a5instantiate\uff0cabstract interface class\u7684ctor\u4e0d\u9700\u8981\u6709\u53c2\u6570\uff0c\u76f4\u63a5 <code>protected: ctor() = default;</code> \u5c31\u884c\u4e86\uff0cderived class\u4f9d\u7136\u53ef\u4ee5\u53bb\u81ea\u7531\u7684\u5b9a\u4e49\u81ea\u5df1\u7684ctor\uff0c\u53ef\u4ee5\u6709\u81ea\u7531\u7684\u53c2\u6570\u5f62\u5f0f\u3002</p> <p>\u4e00\u4e2aC++ class\u91cc\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2amember\u4f60\u53ef\u4ee5\u6709\u4e24\u4e2a\u540c\u540d\u7684accessor\uff0c\u4e00\u4e2a\u8fd4\u56denon-const\u7684\u4e00\u4e2a\u8fd4\u56deconst\u7684\uff0c\u53ea\u662freturn type\u662f\u5426const\u7684\u5dee\u522b\u800c\u5df2\u3002\u8fd9\u6837\u7684\u8bdd\uff0ccompiler\u4f1a\u5728\u4e0d\u540c\u7684callsite\u81ea\u52a8\u5224\u65ad\u51facaller\u662f\u5426\u6709\u6539\u52a8\u8be5member\uff0c\u6ca1\u6709\u7684\u8bdd\u5b83\u5c31\u4f1a\u81ea\u52a8\u53bbcall\u90a3\u4e2aconst\u7684\u7248\u672c\uff0c\u907f\u514d\u610f\u5916\u7684change\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5df1explicit\u5199\u660ereturn type\u6765\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u7248\u672c\u3002</p> <p>\u5728\u4e00\u4e2aSTL\u5bb9\u5668\u4e0a\u505afor\u5faa\u73af\u7684\u4ee3\u7801\u6ca1\u95ee\u9898\uff0c\u4e0d\u8fc7\u8fd8\u6709\u5f88\u591a\u65f6\u5019\u6211\u4eec\u66f4\u591a\u7684\u662f\u7528 <code>std::transform</code> <code>std::copy</code> <code>std::remove_if</code> \u4e4b\u7c7b\u7684\u5404\u79cdstd\u7684algorithm\u91cc\u9762\u7684\u51fd\u6570\uff0c\u540e\u671f\u8fd8\u4f1a\u7528\u66f4\u591aranges library\u91cc\u9762\u7684\u51fd\u6570\u3002\u81ea\u5df1\u5199for\u5faa\u73af\u4e00\u822c\u90fd\u662f\u505a\u6bd4\u8f83\u7b80\u5355\u7684\u64cd\u4f5c\uff0c\u800c\u7528algorithm/ranges\u91cc\u9762\u7684\u51fd\u6570\u66f4\u9002\u5408\u505a\u5404\u79cd\u7279\u5b9a\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u51fd\u6570\u662f\u88ab\u4f18\u5316\u8fc7\u7684\uff0c\u5f88\u53ef\u80fd\u6bd4\u81ea\u5df1\u5199\u7684\u8dd1\u5f97\u5feb\u3002</p> <p>jemalloc\u662f\u5565\uff1f\u628a\u5b83\u62c6\u5f00\u6765\uff0c\u5c31\u662fje + malloc\uff0c\u5b83\u662f\u4e00\u79cdmalloc\u7684variant\uff0cjemalloc is a general purpose malloc implementation that emphasizes fragmentation avoidance and scalable concurrency support. \u8bf4\u767d\u4e86\uff0c\u5b83\u5c31\u662fmalloc\u7528\u6765\u5206\u914d\u5185\u5b58\u7684\uff0c\u53ea\u4e0d\u8fc7\u7740\u91cd\u5f3a\u8c03\u4e86\u9c81\u68d2\u6027\u6765\u964d\u4f4ememory fragmentation\u548cconcurrency scalability\u3002\u8fd8\u8bb0\u5f97\u5417\uff1fmemory fragmentation\u5728skybox\u4e8c\u9762\u7684\u65f6\u5019\u88ab\u95ee\u5230\u8fc7\uff0c\u5c31\u662f\u4f60\u67092G\u7684\u53ef\u7528\u5185\u5b58\uff0c\u4f46\u5b83\u4eec\u4e0d\u662f\u8fde\u7eed\u7684\u5185\u5b58\u5730\u5740\uff0c\u90a3\u4f60\u5c31\u6ca1\u6cd5\u628a\u5b83\u5206\u914d\u7ed9\u4e00\u4e2a2G\u7684std::vector\uff0c\u56e0\u4e3avector\u8981\u6c42\u5728\u5185\u5b58\u4e2d\u5fc5\u987b\u662fadjacent\u8fde\u7eed\u7684\uff0c\u4f60\u5206\u914d\u4e86\u5c31\u4f1a\u51fa\u73b0memory fragmentation\u7684\u9519\u8bef\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u6709100G\u7684\u5185\u5b58\u5e76\u4e0d\u4ee3\u8868\u4f60\u53ef\u4ee5\u968f\u610f\u5206\u914d\u4f7f\u7528\u8fd9100\u4e2aG\uff0c\u8fd8\u8981\u770b\u4f60\u7684\u6570\u636e\u7ed3\u6784\u662f\u4ec0\u4e48\uff0c\u5047\u5982\u662flinked list\uff0c\u5219\u4e0d\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u94fe\u8868\u6ca1\u6cd5\u9884\u5206\u914d\u4e00\u5b9a\u91cf\u7684\u5185\u5b58\uff0c\u4f60\u52a0\u4e00\u4e2a\u8282\u70b9\u5b83\u624d\u591a\u5206\u914d\u70b9\u5185\u5b58\uff0c\u4e14\u5b83\u5728\u5185\u5b58\u4e0a\u7684\u5b58\u50a8\u4e0d\u662f\u8fde\u7eed\u7684\u3002</p> <p>\u4e0d\u8981\u5bf9\u4ee3\u7801\u60f3\u5f53\u7136\u7684\u505a\u5047\u8bbe\u7136\u540e\u76f2\u76ee\u53bb\u627e\uff0c\u800c\u662f\u8981\u5c3d\u53ef\u80fd\u591a\u52a8\u624b\u5b9e\u8df5\uff0c\u65e0\u8bba\u662f\u4ec0\u4e48case\u60c5\u51b5\uff0c\u4ec0\u4e48\u573a\u666f\uff0c\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f60\u90fd\u81f3\u5c11\u80fd\u786e\u5b9a\u4e00\u5230\u4e24\u4e2a\u5730\u65b9\u662f\u4ee3\u7801100%\u4e00\u5b9a\u4f1a\u8dd1\u5230\u7684\uff0c\u90a3\u5c31\u53bb\u90a3\u4e24\u4e2a\u5730\u65b9\u6253\u65ad\u70b9\uff0c\u7b49\u65ad\u70b9\u505c\u4e0b\u6765\u4e86\uff0c\u56de\u5934\u518d\u53bb\u770bstack trace\u770b\u4ee3\u7801\u662f\u600e\u4e48\u88ab\u8c03\u7528\u8fc7\u6765\u7684\u3002</p> <p>\u5728C++\u91cc\u60f3\u5728\u4e00\u4e2acpp\u6587\u4ef6\u4e2d\u5b9a\u4e49internal linkage\u7684private\u5168\u5c40\u53d8\u91cf\uff0c\u53ef\u4ee5\u7528<code>static</code>\u5173\u952e\u5b57\u4e5f\u53ef\u4ee5\u7528\u533f\u540d\u7684namespace\uff0c\u4f46\u66f4\u597d\u7684\u505a\u6cd5\u662f\u90fd\u7528\uff0c\u5728anonymous namespaces\u91cc\u5b9a\u4e49static\u53d8\u91cf\uff1a <code>namespace { static int x = 1; }</code>. anonymous namespaces\u91cc\u9762\u8fd8\u53ef\u4ee5\u5b9a\u4e49internal linkage\u7684<code>typedef</code>\u5565\u7684\uff0c\u8fd9\u4e9b\u4e1c\u897f\u90fd\u53ea\u5bf9\u5f53\u524dtranslation unit\u53ef\u89c1\u3002</p> <p>undefined macros are automatically assigned with the value of 0 when used in a preprocessor expression. \u5c31\u662f\u8bf4\uff0c\u5f53\u4f60\u7528preprocessor\u8868\u8fbe\u5f0f <code>#if</code> \u53bb\u5224\u65ad\u4e00\u4e2amacro\u7684\u65f6\u5019\uff0c\u5982\u679c\u8fd9\u4e2a\u5b8f\u672a\u5b9a\u4e49\uff0c\u5219\u9ed8\u8ba4\u5b83\u503c\u4e3a0\uff08\u5373false\uff09\uff0c\u800c\u4e0d\u4f1a\u62a5\u9519\u3002</p> <p>\u600e\u4e48\u53bb\u770bmemory view\u4e2d\u7684data\uff1f\u5047\u5982\u4f60\u73b0\u5728\u5728 <code>0x00007f08631c90b0</code> \u8fd9\u4e2aaddress\u8fd9\u884c\u4e0a\uff0c\u540e\u9762\u8ddf\u7740\u7684data\u662f <code>01 00 00 00 ff ff 2c 2c 8e 8e fd fd 00 00 00 00</code>\uff0c\u5149\u6807\u95ea\u70c1\u5728<code>01</code>\u540e\u9762\u7684<code>00</code>\u4e0a\uff0c\u90a3\u4e48\u8be5\u53d8\u91cf\u7684\u503c\u5c31\u662f0\u3002\u8bfb\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u77e5\u9053\u8fd9\u91cc\u7684data\u662f\u7528hexadecimal\u5341\u516d\u8fdb\u5236\u8868\u793a\u7684\u5c31\u53ef\u4ee5\u4e86\uff0c\u5728\u5341\u516d\u8fdb\u5236\u4e0b\uff0c\u6bcf\u4e2a\u4e24\u4f4d\u6570\u4ee3\u8868\u4e00\u4e2abyte\u5b57\u8282\uff0c\u6240\u4ee5 <code>ff</code> \u5c31\u76f8\u5f53\u4e8e\u662f\u4e8c\u8fdb\u5236\u7684 <code>11111111</code> \u4e5f\u5c31\u662f\u963f\u62c9\u4f2f\u6570\u5b57255\uff0c\u6240\u4ee5\u4f60\u4f1a\u770b\u5230IDE\u5e2e\u4f60\u6bcf\u4e24\u4f4d\u7a7a\u683c\u4e86\u4e00\u4e0b\u3002\u56db\u4e2a\u8fde\u7eed\u7684\u4e24\u4f4d\u6570\u5462\uff0c\u6bd4\u5982 <code>01 00 00 00</code>\uff0c\u4e5f\u53ef\u4ee5\u4ee3\u8868\u4e00\u4e2a4-byte integer\uff0c\u6211\u4eec\u77e5\u9053\u6807\u51c6\u7684int\u7c7b\u578b\u5c31\u662f4\u4e2a\u5b57\u828232\u4f4d\u7684integer\uff0c\u5927\u90e8\u5206POD\u7c7b\u578b\u90fd\u662f4-byte\u7684\uff0c\u6240\u4ee5IDE\u53c8\u5e2e\u6211\u4eec\u6bcf\u56db\u4e2a\u4e24\u4f4d\u6570\u5927\u5927\u7684\u7a7a\u683c\u4e86\u51e0\u4e0b\u3002\u8bb0\u5f97\uff0cthe standard network endianness is actually big-endian\uff0c\u800c\u4e2a\u4eba\u7535\u8111\u4e0a\u5219\u662f\u4ee5little-endian\u4e3a\u4e3b\u3002\u4f46\u662f\u5728\u8bfbhex number\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4ece\u6765\u4e0d\u9700\u8981\u53bb\u5173\u5fc3endianness\uff0c\u56e0\u4e3a\u6211\u4eec\u80fd\u770b\u5230\u7684hex\u6570\u5b57\u4e00\u5b9a\u90fd\u662f\u7b26\u5408common sense\u548c\u6240\u6709\u4eba\u7684\u4e60\u60ef\u6765\u7684\uff0c\u5de6\u8fb9\u7684\u90a3\u4f4d\u4e00\u5b9a\u662f\u9ad8\u4f4d\uff0c\u53f3\u8fb9\u7684\u90a3\u4f4d\u4e00\u5b9a\u662f\u4f4e\u4f4d\uff0c\u6bd4\u598211\u4e00\u5b9a\u662f\u7b49\u4e8e<code>1 * 16 + 1 = 17</code>\uff0c\u5de6\u8fb9\u76841\u4ee3\u88681\u4e2a16\uff0c\u518d\u6bd4\u598281\u4e00\u5b9a\u662f\u7b49\u4e8e<code>8 * 16 + 1 = 129</code>\uff0c\u5de6\u8fb9\u76848\u4ee3\u88688\u4e2a16\uff0c\u7b49\u7b49\u3002\u901a\u5e38IDE\u8fd8\u4f1a\u5e2e\u6211\u4eec\u628a\u5f53\u524d\u53d8\u91cf\u5305\u542b\u7684\u90a3\u4e9b\u6570\u5b57\u90fd\u9ad8\u4eae\uff0c\u6bd4\u5982\u4e00\u4e2along type\u7684\u53d8\u91cf\uff0c\u4f1a\u81ea\u52a8\u9ad8\u4eae\u5b83\u5bf9\u5e94\u7684\u90a38\u4e2a\u4e8c\u4f4d\u6570\uff0c\u6240\u4ee5\u4f60\u4e0d\u7528\u53bbcheck\u53d8\u91cf\u7684\u7c7b\u578b\u3002\u5728memory view\u91cc\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f93\u5165\u4e00\u4e2a\u5185\u5b58\u5730\u5740\u7136\u540e\u70b9View\u5237\u65b0\u67e5\u770b\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8f93\u5165\u4e00\u4e2a\u6307\u9488\uff0c\u5bf9\u4e8e\u666e\u901a\u53d8\u91cf\uff0c\u5219\u9700\u8981\u7528&amp;\u7b26\u53f7\u6765\u83b7\u53d6\u5b83\u4eec\u7684\u5730\u5740\uff0c\u6bd4\u5982\u4f60\u53ef\u4ee5\u8f93\u5165<code>&amp;foo</code>\u6765\u67e5\u770bfoo\u53d8\u91cf\u7684\u5185\u5b58\uff0c\u7136\u800c\u8981\u6ce8\u610f\uff0c\u5f88\u591a\u65f6\u5019\u6211\u4eec\u9762\u5bf9\u7684\u662f\u4e00\u4e2a\u7c7b\u548c\u5bf9\u8c61\u91cc\u7684\u6210\u5458\u53d8\u91cf\uff0c\u90a3\u4e48\u5fc5\u987b\u8981\u52a0\u4e0a<code>this</code>\uff0c\u628ascope\u5199\u6e05\u695a\uff0c\u6bd4\u5982\u4f60\u53ef\u4ee5\u901a\u8fc7 <code>&amp;this-&gt;m_displayFilter</code> \u6765\u8bbf\u95ee <code>m_displayFilter</code> \u6210\u5458\u53d8\u91cf\u7684\u5185\u5b58\uff0c\u4f46\u4f60\u4e0d\u80fd\u76f4\u63a5\u8f93\u5165 <code>m_displayFilter</code> \u6216\u8005 <code>&amp;m_displayFilter</code>\uff0c\u5047\u5982\u6210\u5458\u53d8\u91cf\u662f\u4e2apointer\uff0c\u90a3\u5c31\u7528 <code>this-&gt;m_myPointer</code>\u3002</p> <p>\u5199C++\u7684\u65f6\u5019\u6c38\u8fdc\u8981\u6ce8\u610f\uff0c\u5f53\u4f60\u8981\u4f7f\u7528\u4e00\u4e2a\u4ecesmart pointer\u6240get\u5230\u7684raw pointer\u65f6\uff0craw pointer\u7684type\u5fc5\u987b\u8981\u4e3a <code>const T*</code>\uff0c\u5fc5\u987b\u5e26const\u624d\u80fd\u4fdd\u8bc1const-correctness\uff0c\u800c\u4e14\u8981\u6ce8\u610f\u4f60\u53ea\u80fd\u5728\u9644\u8fd1\u7684\u5f88narrow\u7684\u4e0a\u4e0b\u6587\u4e2d\u53bb\u4f7f\u7528\u8fd9\u4e2araw pointer\uff0c\u5426\u5219\u7684\u8bdd\u5f88\u53ef\u80fd\u539f\u6765\u7684smart pointer\u5df2\u7ecf\u88abdestroyed\u4e86\uff0c\u4f60\u6ca1\u6cd5\u786e\u4fdd\u8fd9\u4e2araw pointer\u662f\u4e0d\u662fdangling\u7684\u3002\u4f60\u53ef\u4ee5\u7528\u8fd9\u4e2araw\u6307\u9488\u505a\u4e00\u4e9b\u7b80\u5355\u7684check\u4ec0\u4e48\u7684\uff0c\u4f46\u4e0d\u8981\u7528\u5b83\u53bb\u8c03\u7528non-const\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u5e26\u4e0aconst\u3002\u8c03\u7528non-const\u65b9\u6cd5\u4f1a\u6539\u53d8\u5b83\u6240\u6307\u5411\u7684object\u7684\u6570\u636e\uff0c\u8fd9\u4ef6\u4e8b\u663e\u7136\u5e94\u8be5\u901a\u8fc7\u539f\u6765\u7684smart pointer\u53bb\u505a\uff0c\u6bd5\u7adfsmart pointer\u624d\u638c\u7ba1\u7740ownership\uff0c\u5426\u5219\u7684\u8bdd\u4f60\u7684\u7a0b\u5e8f\u5c31\u4e71\u4e86\uff0c\u4e5f\u6839\u672c\u5931\u53bb\u4e86\u4f7f\u7528\u667a\u80fd\u6307\u9488\u7684\u610f\u4e49\u3002</p> <p>\u4e0b\u6b21\u518d\u9047\u5230segmentation fault\uff0c\u8bb0\u4f4f\u4e86\uff0c90%\u7684\u60c5\u51b5\u90fd\u662f\u7531\u4e8euinitialized value\u6240\u5bfc\u81f4\u7684\uff0c\u53d1\u751f\u6bb5\u9519\u8bef\uff0c\u4f60\u9996\u5148\u9700\u8981\u53bb\u68c0\u67e5\u7684\u5c31\u662f\uff0c\u770b\u6709\u6ca1\u6709\u54ea\u4e2a\u76f8\u5173\u7684\u6307\u9488\u6ca1\u6709\u5728ctor\u91cc\u6b63\u786e\u7684\u521d\u59cb\u5316\u503c\uff0c\u6216\u8005\u54ea\u4e2aclass\u7684ctor\u6f0f\u4e86\u4e00\u4e9b\u521d\u59cb\u5316\u3002\u5176\u6b21\u518d\u770b\u4e0b\u662f\u4e0d\u662f\u56e0\u4e3apython bindings\u548cC++\u4ee3\u7801\u4e0d\u5339\u914d\u5bfc\u81f4memory space\u65e0\u6cd5\u88ab\u6b63\u786e\u7684map\u8fc7\u53bb\u3002\u8fd9\u4e24\u4e2a\u68c0\u67e5\u57fa\u672c\u4e0a\u90fd\u641e\u5b9a90%\u7684\u6bb5\u9519\u8bef\u3002</p> <pre><code>static_assert(std::is_trivially_destructible&lt;T&gt;::value, \"T must be trivially destructible.\");\n</code></pre> <p>In C++, a type is considered \"trivially destructible\" if its destructor is trivial, meaning it doesn't have to perform any special cleanup or deallocation of resources. A type is considered trivially destructible if it\u2019s:</p> <p>A built-in type like int, char, or a pointer type.</p> <p>A struct or class with no user-defined destructor and no non-static data members with non-trivial destructors. (if the struct/class has a non-static member that is not trivially destructible, there\u2019s no way the the struct/class itself can be trivially destructible).</p> <p>A class that has a user-defined destructor, but the destructor is explicitly defined as trivial using the <code>= default</code> syntax in C++11 or later. For example: <code>struct X { ~X() = default; };</code></p> <p>In particular, a class with a base class that has a virtual destructor is not considered trivially destructible. In C++, when a class has a virtual destructor, it means that it participates in polymorphism and dynamic dispatch (v-table lookups). This results in the compiler generating code to handle the destruction of objects properly, including calling destructors of derived classes through the virtual destructor of the base class, which makes the class non-trivially destructible.</p> <p>The default constructor can also be explicitly deleted, true of false?</p> <p>True, deleting the default constructor can be useful when you want to make a class non-instantiable without providing specific data to initialize it, enforcing that instances are constructed with specific parameters.</p> <pre><code>class X {\n  public:\n    X() = delete;  // deleting the default constructor\n    X(int value) {}  // constructor that takes an argument\n};\n\nX x;      // This would result in a compilation error\nX x(42);  // This is allowed\n</code></pre> <p>\u4e00\u822c\u6211\u4eec\u5199 <code>X() = delete;</code> \u7684\u65f6\u5019\uff0c\u4e0d\u53ea\u662f\u4e3a\u4e86enforcing that instances are constructed with specific parameters\u3002\u4e00\u4e2a\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\u662f\uff0c\u6211\u4eec\u8981\u5199\u4e00\u4e2aclass\uff0c\u8fd9\u4e2aclass\u8981\u7ba1\u7406\u7740\u67d0\u4e9bdata resources\uff0c\u6bd4\u5982Image class\u4f1a\u88ab\u7528\u6765load an image from disk\u7136\u540e\u628apixel data\u4fdd\u5b58\u5728class\u91cc\u9762\uff0c\u4e4b\u524d\u6211\u81ea\u5df1\u5199\u7684\u8fd9\u4e2a\u7c7b\u662f\u7528unique_ptr\u914d\u5408\u4e00\u4e2a\u5b83\u7684custom deleter\u6765\u7ba1\u7406\u7684\uff0c\u5185\u5b58\u9ed8\u8ba4\u662f\u5206\u914d\u5728heap\u4e0a\u7684\u67d0\u4e2a\u968f\u673a\u533a\u57df\uff0c\u4f46\u5047\u5982\u4f60\u60f3\u8981\u66f4\u52a0finer control over memory\uff0c\u4f60\u5c31\u9700\u8981\u628a\u9ed8\u8ba4ctor\u90fd\u7ed9delete\u6389\uff0c\u518d\u521b\u5efa\u4e00\u4e2aprivate\u7684\u6784\u9020\u51fd\u6570<code>Image(size_t size, uint32_t width, uint32_t height)</code>\uff0c\u7136\u540e\u81ea\u5df1\u5199\u4e00\u4e2a<code>New/Create</code>\u51fd\u6570\uff0c\u8fd9\u6837\u7528\u6237\u5c31\u53ea\u80fd\u901a\u8fc7\u8fd9\u4e2a\u51fd\u6570\u6765\u521b\u5efaclass\u7684\u5b9e\u4f8b\u4e86\u3002\u5728\u8fd9\u4e2a\u51fd\u6570\u91cc\uff0c\u4f60\u53ef\u4ee5\u5148\u7b97\u597d\u521b\u5efaImage\u7684\u4e00\u4e2a\u5b9e\u4f8b\u8981\u591a\u5c11size\u7684memory\uff0c\u7136\u540e\u5728\u67d0\u4e2a\u4f60\u60f3\u8981\u7684\u5df2\u77e5\u5730\u5740\u7684\u5185\u5b58\u533a\u57df\u91cc\uff0c\u624b\u52a8\u53bb\u5206\u914d\u4e00\u5757\u5185\u5b58\uff0c\u7136\u540e\u518d\u7528placement new\u5728\u6307\u5b9a\u7684\u5730\u5740\u4e0a\u53bb\u8c03\u7528\u90a3\u4e2aprivate\u7684ctor\uff0c\u5982\u6b64\u4e00\u6765\u4f60\u7684\u5b9e\u4f8b\u5c31\u88ab\u521b\u5efa\u5728\u6307\u5b9a\u7684\u5185\u5b58\u91cc\u9762\u4e86\uff0c\u4e8e\u662f\u4f60\u5c31\u53ef\u4ee5\u7528\u5230\u5f88\u591a\u81ea\u5df1\u7684memory tracker\u5de5\u5177\u3002</p> <p>Are these loops equivalent?</p> <pre><code>for (size_t i = 0, size_t n = w * h; i &lt; n; i++)  # first loop\nfor (size_t i = 0; i &lt; w * h; i++)  # second loop\n</code></pre> <p>No, although they do both iterate the same number of times, in the second loop, the expression w * h is computed for each iteration of the loop. Most modern compilers can perform an optimization known as \u201cloop invariant code motion\u201d, they can recognize that <code>w * h</code> is a constant within the loop and may hoist the calculation out of the loop, effectively computing it only once, but it's not guaranteed, so be cautious.</p> <p>union in a class</p> <p>If you have a class member whose type is a union, the intention is most likely that you want to switch between which member is active inside the union. For example, given a class like this:</p> <pre><code>class Base {\npublic:\n    union MyUnion {\n        A a;\n        B b;\n        C c;\n    };\n};\n</code></pre> <p>The implication is that we want to derive from the Base class, and each derived class can decide which member in MyUnion (a, b or c?) should be active and used by other member functions.</p> <p>A Union is just like a struct or class but has many limitations. That said, it still has a ctor and a dtor. If there\u2019s no default constructor for a union, the default constructor for the first member (in our case, <code>A a</code>) will be used for the union as a whole. So when the class instantiates, A\u2019s default ctor will be called, and by default a is the active member.</p> <p>\u968f\u540e\u5f53\u6211\u4eec\u518d\u53bbaccess\u5176\u4ed6union\u91cc\u7684\u6210\u5458\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u8bf4\u6211\u4eec\u73b0\u5728access b\uff0c\u90a3\u4e48B\u7684ctor\u5c31\u4f1a\u88abcall\uff0c\u628aunion\u91cc\u7684active member\u5207\u6362\u6210b\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u968f\u610f\u5207\u6362\u7528union\u91cc\u7684\u54ea\u4e2a\u6210\u5458\u4e86\u3002</p> <p>In C++ multithreaded programming, it's important to use fixed-width integer types like <code>int32_t</code> to ensure consistent behavior across different platforms.</p> <p>In C++, references cannot be reassigned to refer to a different object after their initialization. When a reference is initialized, it is bound to the object it references, and this binding cannot be changed throughout its lifetime.</p>"},{"location":"resources/bit-foundry/cpp-notes/#sketchpad-review","title":"Sketchpad Review","text":"<p>What is RVO (return value optimization)</p> <p>Ternary operator has return value optimization (RVO) so it\u2019s not the same as an if-else (which makes copies).</p> <p>When to create an object on the heap</p> <p>The object needs to occupy a large piece of memory (so the stack frame might not fit)</p> <p>The object\u2019s lifespan needs to extend beyond its defining scope or we want to explicitly control it</p> <p>Placement new</p> <p>Placement new allows us to construct an object in a pre-allocated memory location. This can be useful in scenarios where we need fine-grained control over memory management or simply want to avoid making copies or moves. The syntax is like <code>Foo* foo = new(ptr) Foo(args);</code> where <code>ptr</code> points to the pre-allocated memory address where we want the \u201cplacement\u201d to take place.</p> <p>When using the regular new keyword we can both allocate memory and construct objects, in this case there\u2019s no point using placement new again since all we need can be achieved by new. Even if we want to replace objects at that address, it would still make no sense to use placement new instead of the object\u2019s move ctor. In practical examples, ptr is always pointing to a known address on the stack.</p> <pre><code>char buff[sizeof(T)];\nT* t = new(buff) T();\nt-&gt;~T();\n\nFoo foo(0);\nFoo* pf = new(&amp;foo) Foo(1);\npf-&gt;~Foo();\n</code></pre> <p>For placement new, the operator in question is operator <code>new()</code> rather than operator <code>new</code>. These are two different operators, please do not confuse them. While <code>delete</code> matches <code>new</code> and <code>delete[]</code> matches <code>new[]</code>, there is no matching operator for operator <code>new()</code>, therefore it is required to call the destructor manually when using placement new or any overloaded form of operator <code>new()</code>, otherwise data is not cleaned up so we could run into inconsistent states, resource leaks or even undefined behavior.</p> <p>Bare in mind that operator <code>new()</code> is not the same as operator <code>new</code>, it\u2019s only used to construct an object in pre-allocated memory but does not allocate memory by itself, memory allocation is done separately. Be aware that if the ctor of the object throws an exception, it's our responsibility to properly clean up the memory and any resources before allowing the exception to propagate further.</p> <p>When should we use <code>std::weak_ptr</code> instead of <code>std::shared_ptr</code> nb mn</p> <p>A weak pointer is just like a shared pointer except that it doesn\u2019t increase the reference count or claims ownership of the underlying object. It is primarily used in situations where we don\u2019t need the ownership. USD uses <code>TfWeakPtr&lt;T&gt;</code> quite extensively which serves exactly the same purpose.</p> <p>Another scenario is where we have lots of shared pointers referencing one another and we do need that shared ownership. But if A refs B which refs C which refs A, we end up introducing circular dependencies. The ref count will never decrement to 0 so there\u2019s no way to release our memory. In this case <code>std::weak_ptr</code> and <code>std::shared_ptr</code> are often used together to manage circular references.</p> <p>What is an integral type in C++</p> <p>In C++, an integral type refers to a data type that can represent whole numbers, both positive and negative, without any fractional or decimal parts. C++ provides several integral types including int, short, long, long long and their unsigned counterparts, plus the two special integral types char and bool. It is also possible to create your own type in C++ that behaves like an integral type. This technique is often referred to as creating a strongly typed enum and it\u2019s used to maintain type safety, but that\u2019s just another topic.</p> <p>When you want to refer to a null pointer, use <code>nullptr</code>, not <code>0</code> or <code>NULL</code>.</p> <p><code>thread_local</code></p> <p><code>dynamic_cast</code> vs <code>dynamic_pointer_cast</code></p> <p>functors</p> <p>cv-qualifiers? <code>volatile</code></p> <p><code>scoped_lock</code></p> <p><code>strlen(const char*)</code></p> <p>name mangling or name decoration</p> <pre><code>extern \"C\" void spiff(int); // use C protocol for name look-up\nextern void spoff(int); // use C++ protocol for name look-up\nextern \"C++\" void spaff(int); // use C++ protocol for name look-up\n</code></pre> <p>__declspec</p> <p>A functor is any object that can be used with <code>()</code> in the manner of a function. This includes normal function names, pointers to functions, and class objects for which the <code>()</code> operator is overloaded.</p> <ul> <li>A generator is a functor that can be called with no arguments.</li> <li>A unary function is a functor that can be called with one argument.</li> <li> <p>A binary function is a functor that can be called with two arguments.</p> </li> <li> <p>A unary function that returns a bool value is a predicate.</p> </li> <li>A binary function that returns a bool value is a binary predicate.</li> </ul> <p>Functors vs lambda expressions? lambda cannot be passed around</p> <p>when to use <code>std::initializer_list&lt;T&gt;</code>?</p> <p>throw exceptions</p> <p>File I/O</p> <p>Uniform Initialization</p> <p>the list-initialization syntax can be used in new expressions:</p> <pre><code>int * ar = new int [4] {2,4,6,7};\n</code></pre> <p>The syntax also provides protection against narrowing</p> <pre><code>char c1 {1.57e27}; // double-to-char, compile-time error\nchar c2 = {459585821};// int-to-char,out of range, compile-time error\n</code></pre> <p>However, conversions to wider types are allowed. Also a conversion to a narrower type is allowed if the value is within the range allowed by the type:</p> <p>use <code>decltype</code> in C++</p> <p>Trailing Return Type</p> <pre><code>template&lt;typename T, typename U)\nauto eff(T t, U u) -&gt; decltype(T*U)\n{\n...\n}\n</code></pre> <p><code>using (alias)</code> vs <code>typedef</code></p> <p>The <code>forward_list</code> container is a singly linked list that can be traversed in just one direction; it\u2019s simpler and more economical of space than the doubly linked list container.</p> <p>lvalue vs rvalue Reference</p> <pre><code>using Base::Base;\n</code></pre> <p>Note that an inherited base-class constructor only initializes base-class members. If you need to initialize derived class members too, you can use the member list initialization syntax instead of inheritance:</p> <pre><code>Derived(int i, int k, double x) : j(i), Base(k,x) {}\n</code></pre> <p><code>std::function</code></p> <p>Variadic Templates</p> <pre><code>template&lt;typename T, typename... Args&gt; // Args is a template parameter pack\nvoid show_list3( T value, Args... args) // args is a function parameter pack\n{\n...\n}\n</code></pre> <p>void WhenToWriteMoveCtorManually() {     \u5bf9\u4e8e\u76ee\u524d\u6211\u7684\u9879\u76ee\u6765\u8bf4\uff0c\u6ca1\u6709\u4e00\u4e2a\u7c7b\u9700\u8981\u6211\u624b\u52a8\u53bb\u5199move ctor\u4ee5\u53camove assignment operator\u3002     \u56e0\u4e3a\u6240\u6709\u7684\u8d44\u6e90\u90fd\u662f\u5728GPU\u90a3\u8fb9\u7684\uff0c\u6211\u4eec\u5728C++\u7aef\u6ca1\u6709\u76f4\u63a5\u63a7\u5236\u6743\uff0c\u60f3\u4fee\u6539\u6216\u66f4\u65b0\u8d44\u6e90\u5fc5\u987b\u901a\u8fc7OpenGL\u7684API\u3002     \u6240\u4ee5\uff0c\u6211\u4eec\u7684\u6240\u6709\u7c7b\u5f53\u4e2d\uff0c\u6240\u6709\u7684\u6210\u5458\u90fd\u662f\u7b80\u5355\u7c7b\u578b\u7684\uff0c\u6bd4\u5982GLuint\uff0cint\uff0cfloat\u8fd9\u79cd\uff0c\u8981\u4e48\u662fstd::vector. std::map, std::shared_ptr,     std::unique_ptr\u7b49\u7b49\u8fd9\u79cd\u73b0\u6210\u7684\u5bb9\u5668\u548c\u667a\u80fd\u6307\u9488\uff0c\u800c\u4e14\u4ed6\u4eec\u5168\u90fd\u81ea\u5e26copy/move\u7684\u529f\u80fd\u5b9e\u73b0\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u9690\u5f0f\u6216\u663e\u5f0f\u7684\u544a\u8bc9compiler\uff0c\u5e2e\u6211     \u81ea\u52a8\u751f\u6210\u9ed8\u8ba4(=default)\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\u968f\u540e\u7f16\u8bd1\u5668\u5c31\u4f1a\u751f\u6210\u9ed8\u8ba4\u7684copy/move ctor\u4ee5\u53caassignment operator\uff0c\u6839\u636e\u7ee7\u627f\u7684\u5173\u7cfb\u6765\u5e2e\u6211\u4eec\u81ea\u52a8     \u6ee1\u8db3rule of five\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e2aclass member\u4f9d\u6b21\u505acopy/move\u7684\u5904\u7406\u3002\u53ea\u9700\u8981\u7a0d\u5fae\u6ce8\u610f\u4e00\u4e2a\u5c0f\u70b9\uff0c\u5c31\u662fstd::unique_ptr\u662fmove-only\u7684\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u54ea\u6015\u662futils\u91cc\u9762\u7684Image\u7c7b\uff0c\u6211\u4eec\u7684\u7c7b\u662f\u5728\u7ba1\u7406\u4ecestb\u4e2d\u8bfb\u53d6\u8fc7\u6765\u7684raw\u56fe\u50cf\u6570\u636e\uff0c\u662f\u4e00\u5806pixels\u8d44\u6e90\uff0c\u4f46\u7531\u4e8e\u8fd9\u4e2a\u8d44\u6e90\u662f\u7528std::unique_ptr\u6765 \u7ba1\u7406\u7684\uff0c\u6211\u4eec\u4e0d\u7528\u4efb\u4f55\u5fc3\uff0cstd::unique_ptr\u4f1a\u5e2e\u6211\u4eec\u7ba1\u7406\u597d\uff0c\u53ea\u8981custom deleter\u7ed9\u5b83\u5c31\u597d\u4e86\u3002\u6211\u4eec\u8fd8\u662f\u4e0d\u9700\u8981\u624b\u52a8\u53bb\u5199move\u548ccopy\u3002</p> <p>\u90a3\u4e48\uff0c\u5230\u5e95\u4ec0\u4e48\u65f6\u5019\u9700\u8981\u6211\u4eec\u624b\u52a8\u53bb\u5b9e\u73b0move ctor\u4ee5\u53camove assignment operator\u5462\uff1f \u5c31\u53ea\u6709\u5f53\u6211\u4eec\u5728\u76f4\u63a5\u7684\u7ba1\u7406heap\u5185\u5b58\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u662fctor\u4e2d\u4f7f\u7528\u4e86new\u64cd\u4f5c\u7b26\u5206\u914d\u5185\u5b58\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u9700\u8981\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u6bcf\u4e2acopy\u6216move\u7684 ctor\u4ee5\u53ca\u8d4b\u503c\u7b26\u90fd\u6b63\u786e\u7684\u5904\u7406\u597d\u5185\u5b58\uff0c\u5728\u54ea\u6015\u662f\u53ef\u80fd\u4f1a\u629bexception\u7684\u5730\u65b9\u4e5f\u8981delete\u91ca\u653e\u8d44\u6e90\uff0c\u5982\u6b64\u4e00\u6765\uff0ccompiler\u81ea\u52a8\u751f\u6210\u7684\u9ed8\u8ba4\u7248\u672c\uff0c\u4e5f\u5c31\u662f \u7b80\u5355\u7684\u9010\u6210\u5458\u7684copy/move\uff0c\u5e76\u4e0d\u53bb\u77e5\u9053\u600e\u4e48delete\uff0c\u6240\u4ee5\u5c31\u6ee1\u8db3\u4e0d\u4e86\u6211\u4eec\u7684\u9700\u6c42\u4e86\uff0c\u8981\u6211\u4eec\u624b\u52a8\u5b9e\u73b0\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u5b9e\u73b0\u8bf7\u53c2\u8003copy-and-swap idiom https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom https://stackoverflow.com/questions/5695548/public-friend-swap-member-function https://mropert.github.io/2019/01/07/copy_swap_20_years/</p> <p>\u4e0d\u8fc7\u8bf4\u5230\u5e95\uff0c\u73b0\u4ee3\u7684C++\u8ba9\u6211\u4eec\u5c3d\u91cf\u5c11\u81ea\u5df1\u53bb\u624b\u52a8new\uff0c\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\u8981\u5c3d\u53ef\u80fd\u907f\u514d\u51fa\u73b0new\u548cdelete\uff0c\u6240\u4ee5\u672c\u6765\u5c31\u4e0d\u592a\u4f1a\u7528\u5230\u3002\u4e0d\u786e\u5b9a\u65f6\u53ef\u4ee5\u6d4b\u8bd5: static_assert(std::is_nothrow_default_constructible::value, \"\"); static_assert(std::is_copy_constructible::value, \"\"); static_assert(std::is_copy_assignable::value, \"\"); static_assert(std::is_nothrow_move_constructible::value, \"\"); static_assert(std::is_nothrow_move_assignable::value, \"\"); static_assert(std::is_nothrow_destructible::value, \"\"); <p>}</p> <p>void ImplicitDeclaredSpecialMemberFunctions() {     \u5728OOP\u7ee7\u627f\u5f53\u4e2d\uff0c\u5982\u679c\u4e00\u4e2abase\u7c7b\u5b9a\u4e49\u597d\u4e86copy/move\u7684ctor\u548cassignment operator\uff0c\u5373\u6ee1\u8db3\u4e86rule of 5\uff08\u7531\u4e8e\u662fbase\u7c7b\u6240\u4ee5\u8fd8\u5305\u62ec\u4e00\u4e2a     virtualdestructor\uff09\uff0c\u90a3\u4e48\u5bf9\u4e8ederived\u7c7b\u6765\u8bf4\uff0c\u53ea\u8981\u65b0\u52a0\u7684data member\u90fd\u662f\u81ea\u52a8\u53ef\u4ee5\u88abcopy\u548cmove\u7684\uff0c\u800c\u6ca1\u6709\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u4e0d\u53efcopy/move     \u7684\u7c7b\u578b\uff0c\u90a3\u4e48\u5c31\u4e0d\u7528\u53bb\u663e\u7684\u58f0\u660e\u548c\u5b9a\u4e49derived\u7c7b\u81ea\u5df1\u7684copy/move\u7684ctor\u548cassignment operator\uff0c\u53ea\u8981\u4fdd\u8bc1\u6ca1\u6709\u81ea\u5df1\u5199\u4efb\u4f55\u7684copy/move\u51fd\u6570\uff0c     \u4e14\u6ca1\u6709\u5199destructor\uff08\u4e0d\u9700\u8981\u5199\u6216\u8005base\u7c7b\u7684virtual destructor\u5c31\u5df2\u7ecf\u8db3\u591f\u4e86\uff09\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5e2e\u6211\u4eec\u751f\u6210\uff0c\u8fd9\u4e2a\u53eb\u505aImplicitly-declared     \u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\uff0c\u6211\u4eec\u7684base\u7c7b\u5df2\u7ecf\u6ee1\u8db3\u4e86ruleof five\uff0c\u7136\u540e\u6240\u6709\u7684derived\u7c7b\u4e5f\u4e0d\u518d\u9700\u8981\u7279\u6b8a\u7684destructor\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\uff0c\u6bcf\u4e2aderived\u7c7b\uff0c     \u5c31\u53ea\u9700\u8981\u5199\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09\u666e\u901a\u7684constructor\u5c31\u8db3\u591f\u4e86\uff0c\u5269\u4e0b\u56db\u4e2acopy/move\u7684ctor\u548cassignment operator\uff0c\u7f16\u8bd1\u5668\u90fd\u4f1a\u5e2e\u6211\u4eec\u81ea\u52a8\u751f\u6210\uff0c     \u4ece\u800c\u6ee1\u8db3rule of 5\uff08base\u7c7b\u7684virtual destructor\u5f53\u7136\u662f\u80af\u5b9a\u4f1a\u88abcall\u7684\uff09</p> <p>\u53e6\u5916\uff0c\u8003\u8651\u4e00\u4e2aderived\u7c7b\u7684move\u6784\u9020\u51fd\u6570\uff1a Derived(Derived&amp;&amp; other) noexcept : Base(std::move(other)) {     derived_member1 = std::swap(other.derived_member1);     derived_member2 = std::swap(other.derived_member2); } \u4e3a\u4ec0\u4e48other\u5728initializer list\u4e2d\u5df2\u7ecf\u88abstd::move\u4e86\u4ee5\u540e\uff0c\u6211\u4eec\u5728body\u91cc\u8fd8\u80fd\u53bbswap derived\u7c7b\u65b0\u52a0\u7684\u6210\u5458\u5462\uff1f\u4e0d\u662f\u8bf4std::move\u4e86\u4e4b\u540e\uff0c other\u8fd9\u4e2a\u7269\u4f53\u5931\u6548\u4e86\u5417\uff08\u5904\u4e8e\u4e00\u4e2aclean null state\u7b49\u5f85\u88abdestruct\uff0c\u4f46\u6240\u5305\u542b\u7684\u6570\u636e\u5df2\u7ecf\u65e0\u610f\u4e49\u4e86\uff09\uff1f\u8fd9\u662f\u56e0\u4e3a\uff0c\u5728\u7ee7\u627f\u7684\u8fd9\u79cd\u5173\u7cfb\u4e2d\uff0c\u5f53 Base(std::move(other))\u88ab\u6267\u884c\u65f6\u5019\uff0cstd::move(other)\u7684\u7c7b\u578b\u662fDerived&amp;&amp;\uff0c\u800cBase\u7c7b\u53ea\u8ba4\u8bc6Base\uff0c\u6240\u4ee5\u5b83\u4f1a\u88ab\u9690\u542b\u7684\u8f6c\u6362\u6210Base&amp;&amp;\uff0c \u7136\u540ebase\u7c7b\u7684move\u6784\u9020\u51fd\u6570\u53ea\u4f1a\u53bb\u5904\u7406base\u7c7b\u6709\u7684\u6210\u5458\u800cderived\u7c7b\u65b0\u52a0\u7684\u6210\u5458\u662f\u6ca1\u6709\u88ab\u52a8\u8fc7\u7684\u3002</p> <p>\u53ea\u6709\u5f53\u6210\u5458\u6bd4\u8f83\u590d\u6742\uff0c\u6216\u8005\u5b9e\u5728\u62ff\u4e0d\u51c6\u7684\u65f6\u5019\uff0c\u6211\u4eec\u624d\u9700\u8981\u81ea\u5df1\u53bb\u624b\u5199move constructor\u548cmove assignment operator\u3002 \u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528copy-and-swap idiom\u6765\u7b80\u5316\u4ee3\u7801\u7684\u5b9e\u73b0\u3002\u53ef\u4ee5\u53c2\u8003\u8fd9\u91cc\uff1a https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom</p> <p>}</p> <p>void CppMisc() {     always use structured bindings when iterating over a map or unordered_map     // this is bad     for (const auto&amp; entry : word_histogram) {         std::cout &lt;&lt; entry.first &lt;&lt; \" : \" &lt;&lt; entry.second &lt;&lt; \"n\";     }     // this is good     for (const auto&amp; [word, count] : word_histogram) {         std::cout &lt;&lt; word &lt;&lt; \" : \" &lt;&lt; count &lt;&lt; \"n\";     }     // we can also retrieve the pair right after insertion     auto [iter_where, inserted] = map.insert({key, value});</p> <p>\u5982\u4f55\u66f4\u597d\u7684\u7406\u89e3\u53f3\u503c\u5f15\u7528\uff1f\u4ece\u6982\u5ff5\u4e0a\u89e3\u91ca\uff1a An lvalue reference means that x is an alias of some pre-existing object, whose lifetime and ownership is managed independently. An rvalue reference means that x will refer to either a temporary object created by the compiler at the actual call site, or a pre-existing object that the caller passes with std::move() \u6240\u4ee5\u8bf4\uff0c\u7528\u5de6\u503c\u8fd8\u662f\u53f3\u503c\uff0c\u4e0d\u53ea\u662f\u8bed\u6cd5\u4e0a\u7684\u95ee\u9898\uff0c\u540c\u65f6\u4e5f\u662f\u4f20\u8fbe\u7ed9\u9605\u8bfb\u4ee3\u7801\u7684\u4eba\uff0c\u544a\u8bc9\u5bf9\u65b9\u6211\u8fd9\u4e2a\u53c2\u6570\u662f\u4ece\u54ea\u513f\u6765\u7684\uff0c\u5927\u6982\u4f1a\u662f\u7528\u4f5c\u4ec0\u4e48\u7684\u3002</p> <p>c++ std::map [] is not a const operation\uff0c\u56e0\u4e3a[]\u5f53key\u4e0d\u5b58\u5728\u65f6\uff0c\u4f1a\u63d2\u5165\u65b0\u7684pair\u5230map\u4e2d\uff0c\u6240\u4ee5\u5b83\u4e0d\u662fconst\u7684\u3002 \u56e0\u6b64\uff0c[]\u65e0\u6cd5\u5728const std::map\u4e0a\u4f7f\u7528\uff0c\u4e5f\u65e0\u6cd5\u5728\u4e00\u4e2a\u7c7b\u7684const\u65b9\u6cd5\u4e2d\u4f7f\u7528\uff0c\u5426\u5219\u4f1a\u7f16\u8bd1\u4e0d\u8fc7\uff0c\u51fa\u73b0C2678 no operator found...\u7684\u9519\u8bef\u3002</p> <p>ternary operator ?: is different from if-else, it won't do any branching!!! C++20\u5f00\u59cb\uff0c\u6709\u4e86likely unlikely\u5173\u952e\u5b57\u63d0\u793a\u7ed9\u7f16\u8bd1\u5668\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628aif-else branching\u4f18\u5316\u5230\u548cternary\u8fd0\u7b97\u7b26\u4e00\u6837\u5feb\u4e86\u3002</p> <p>\u5982\u679c\u4ee3\u7801\u663e\u5f0f\u7684\u5b9a\u4e49\u4e86\u4efb\u610f\u4e00\u79cdctor\u6216\u8005dtor\uff0c\u54ea\u6015body\u662f\u7a7a\u7684\uff0c\u7f16\u8bd1\u5668\u4e5f\u4f1a\u8ba4\u4e3a\u5b83\u662fnon-trivial\u7684\u3002 \u53ea\u6709\u7f16\u8bd1\u5668\u81ea\u5df1implicit\u751f\u6210\u7684\uff0c\u6216\u8005\u662f\u4ee3\u7801\u663e\u5f0f\u7684\u4f7f\u7528\u4e86implicit\u6307\u4ee4=default\u6216=delete\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u88ab\u8ba4\u4e3a\u662ftrivial\u7684\u3002 trivial\u4e0e\u5426\u7684\u533a\u522b\u5c31\u5728\u4e8e\uff0c\u5728trivial\u7684\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u4f1a\u505a\u4f18\u5316\uff0c\u901f\u5ea6\u5feb\u5f88\u591a\uff0c\u800cnon-trivial\u5219\u4f1a\u6162\u4e00\u4e9b</p> <p>virtual inheritance\u662f\u4e13\u95e8\u7528\u6765\u5904\u7406\u83f1\u5f62\u7684dreaded diamond multiple\u7ee7\u627f\u7684\uff0c\u901a\u5e38\u7528\u4e0d\u5230\uff0c\u53ef\u53c2\u8003stackoverflow\u6211\u7684bookmark</p> <p>std::tuple\u662f\u4e00\u4e2a\u52a0\u5f3a\u7248\u7684std::pair\uff0c\u5b83\u4e0d\u662f\u4e00\u4e2aSTL\u6807\u51c6\u5bb9\u5668\uff0c\u5b83\u662f\u7528\u6765\u5b58\u653e\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684object\u7684\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002 std::tuple\u4e3b\u8981\u7684\u7528\u6cd5\u662f\uff0c\u7528\u4e8e\u8ba9\u4e00\u4e2a\u51fd\u6570\u4e00\u6b21\u6027\u7684\u8fd4\u56de\u591a\u4e2a\u503c\u3002\u5b83\u4f1a\u81ea\u52a8\u5efa\u7acb\u4e00\u4e2a\u4e34\u65f6\u7684struct\u6765\u5305\u542b\u6240\u6709\u6210\u5458\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u7528\u81ea\u5df1\u5b9a\u4e49struct\u4e86\u3002 auto&amp; [a, b, c] = std::tuple(1, 3.14f, \"hello\"); std::cout &lt;&lt; a &lt;&lt; std::endl; std::cout &lt;&lt; b &lt;&lt; std::endl; std::cout &lt;&lt; c &lt;&lt; std::endl; \u8fd9\u4e2a\u662fC++17 \u5f15\u5165\u7684structured binding\u529f\u80fd\uff0c\u65b9\u4fbf\u7528\u4e8e\u8ba9\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u591a\u4e2a\u503c\u3002 \u76f8\u6bd4\u4e8e\u81ea\u5df1\u5b9a\u4e49struct\u5e76\u8fd4\u56de\u8be5struct\uff0c\u8fd9\u6837\u4ee3\u7801\u66f4\u5e72\u51c0\uff0c\u5e76\u4e14std::tuple\u7684\u6784\u9020\u51fd\u6570\u6790\u6784\u51fd\u6570\u4f1a\u81ea\u52a8\u5904\u7406\u597d\u3002\u5982\u679c\u8981\u624b\u52a8\u8bbf\u95eetuple\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\u65f6\uff0c \u53ef\u4ee5\u4f7f\u7528std::get\uff0c\u4f46\u662fI\u5fc5\u987b\u662fcompile-time constant\u3002\u5e76\u4e14\u56e0\u4e3atuple\u4e0d\u662fSTL\u5bb9\u5668\uff0c\u6211\u4eec\u65e0\u6cd5\u5faa\u73af\u904d\u5386\u5b83\uff08\u800c\u4e14\u5143\u7d20\u7c7b\u578b\u8fd8\u4e0d\u540c\uff09\u3002 \u53ef\u4ee5\u770b\u5230\uff0cstd::variant\u5176\u5b9e\u5c31\u662f\u5728tuple\u7684\u57fa\u7840\u4e0a\u5efa\u7acb\u7684\u3002\u901a\u5e38\u53ea\u6709\u5728\u51fd\u6570\u8fd4\u56de\u591a\u4e2a\u503c\u65f6\uff0c\u4f1a\u7528\u5230std::tuple\uff0c\u5b83\u4f1a\u81ea\u52a8\u8bd5\u56fe\u53bb\u8c03\u7528move\uff0c\u907f\u514dcopy\u3002 c++17\u5f00\u59cb\uff0c\u6784\u9020\u51fd\u6570\u81ea\u5e26argument deduction\uff0c\u6240\u4ee5\u518d\u4e5f\u4e0d\u9700\u8981\u7528std::make_tuple\u4e86\uff0cstd::make_tuple\u6ca1\u4ec0\u4e48\u7528\uff0c\u76f4\u63a5std::tuple()\u5373\u53ef\u3002 <p>smart pointer\u4e00\u822c\u90fd\u662f\u6309\u7167value\u8fd4\u56de\u7684\uff0creturn by value\uff0c\u5176\u5b9e\u4e0d\u9700\u8981\u62c5\u5fc3\u8fd9\u6837\u4f1a\u5bfc\u81f4shared_ptr\u7684use count\u4e0d\u65ad\u7684++\u548c--\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a \u505a\u4e00\u4e2a\u53eb\u505aRVO(return value optimization)\u7684\u4f18\u5316\uff0c\u5b9e\u9645\u4e0a\u5e76\u4e0d\u4f1a\u6709\u5927\u91cf\u7684copy\u548c\u6027\u80fd\u635f\u8017\u3002</p> <p>\u5173\u4e8emove semantics\uff0c\u8fd9\u6b21\u5f7b\u5e95\u8981\u7406\u89e3\u5bf9\uff01 \u4e0d\u8981\u628astd::move()\u7406\u89e3\u6210\u4e00\u4e2afunction\uff0c\u7406\u89e3\u6210\u4e00\u4e2astatic_cast\u624d\u5bf9\u3002\u5b83\u53ea\u662f\u505a\u4e00\u4e2alvalue\u5230xvalue\u7684\u8f6c\u6362(rvalue\u7684\u5177\u4f53\u4e00\u79cd)\uff0c\u800c\u4e14 \u662f\u5728compile time\u505a\u7684\uff0c\u548cruntime\u6ca1\u6709\u4e00\u70b9\u5173\u7cfb\u3002\u6211\u4eec\u77e5\u9053\uff0cstd::move()\u662f\u4e3a\u4e86\u907f\u514dcopy\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u4e0d\u4f1acopy\uff0c\u9664\u975e\u662fprimitive\u7684\u7c7b\u578b\u6bd4\u5982 int float\uff0c\u90a3\u4e48move\u548ccopy\u6ca1\u6709\u533a\u522b\uff08\u57fa\u7840\u7c7b\u578b\u53ea\u80fdcopy\uff09\u3002\u66f4\u91cd\u8981\u7684\u662f\u8981\u610f\u8bc6\u5230\uff0cstd::move(x)\u53ea\u662f\u8fd4\u56de\u4e00\u4e2a\u7531x\u6307\u5411\u7684\u53f3\u503c\uff0c\u5b83\u5e76\u4e0d\u4f1a\u53bb\u9500\u6bc1x std::move(x)\u7ed3\u675f\u4e4b\u540e\uff0cx\u539f\u6765\u7684\u503c\u88ab\u5173\u8054\u7ed9\u4e86\u7b49\u5f0f\u5de6\u8fb9\u7684\u53d8\u91cf\uff0cdata\u7684\u503c\u88abmove\u4e86\uff0c\u4f46\u662f\u539f\u6765\u7684x\u8fd9\u4e2a\u53d8\u91cf\u6216\u5bf9\u8c61\u4f9d\u7136\u5b58\u5728\uff0c\u5b58\u50a8\u7a7a\u95f4\u4f9d\u7136\u5b58\u5728\uff0c\u53ea\u662f \u91cc\u9762\u7684\u503c\u88ab\u6389\u5305\u4e86\u800c\u5df2\uff1astd::move() does not actually move anything\uff0cthink of it as rewiring data to a new storage and invalidating the old data, but the old storage is still there. <p>\u7b80\u5355\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u53f3\u503c\u7406\u89e3\u4e3a\u4e00\u4e2a\u5e38\u91cf\u6216\u4e2d\u95f4\u503c\u7684\u6570\u636e\uff0c\u5b83\u5728CPU\u4e2d\u662f\u6ca1\u6709\u5b58\u50a8\u7a7a\u95f4\u7684\uff0c\u4e0d\u5360\u636e\u7a7a\u95f4\uff0c\u53ea\u662f\u4e00\u4e2a\u503c\uff0c\u4e3a\u4e86\u8ba9\u8fd9\u4e2a\u503c\u6709\u610f\u4e49\uff0c\u90a3\u4e48\u5b83\u63a5\u4e0b \u6765\u5f88\u5feb\u8981\u88ab\u8d4b\u4e88\u7ed9\u4e00\u4e2a\u5de6\u503c\u7684\u53d8\u91cf\uff0c\u4f9d\u8d56\u4e8e\u5de6\u503c\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6570\u636e\u7684\u503c\u624d\u5f97\u4ee5\u5b58\u7eed\u3002 a = std::move(b)\u7684\u610f\u601d\u662f\uff0cb\u672c\u6765\u6709\u4e00\u6839\u7ebf\uff08\u53ef\u4ee5\u60f3\u8c61\u6210\u6307\u9488\uff09\u6307\u5411\u67d0\u4e2a\u6570\u636ex\uff0c\u8fd9\u4e2a\u6570\u636ex\u662f\u4f9d\u8d56\u4e8eb\u53d8\u91cf\u7684\u5b58\u50a8\u7a7a\u95f4\u800c\u5b58\u5728\u7684\uff0c\u4e00\u5f00\u59cb\uff0cx\u53ea\u6709\u548cb\u7684 \u8fd9\u4e00\u6761\u8fde\u7ebf\u3002\u968f\u540e\uff0cstd::move(b)\u627e\u5230\u4e86\u8fd9\u8ddf\u8fde\u7ebf\uff0c\u5e76\u628a\u8fd9\u8ddf\u8fde\u7ebf\u8d4b\u7ed9\u4e86\u53d8\u91cfa\uff0c\u4e8e\u662f\uff0cx\u73b0\u5728\u5c31\u5206\u522b\u548ca/b\u6709\u4e00\u6761\u8fde\u7ebf\u4e86\u3002</p> <p>\u5bf9\u4e8eclass\u7684move ctor\u548cmove assignment operator\u800c\u8a00\uff0c\u6211\u4eec\u7ad9\u5728move ctor\u7684body\u91cc\u8fd9\u4e2a\u89d2\u5ea6\u770b\uff0c\u662f\u4f1a\u770b\u5230\u4e00\u4e2a\u53eb\u505aother\u7684\u7269\u4f53\uff0c\u51c6\u5907\u8981 \u548c\u6211\u4eec\u73b0\u5728\u8eab\u5904\u7684\u8fd9\u4e2a\u7269\u4f53\u4ea4\u6362\u6570\u636e\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cother\u4ee3\u8868\u7684\u662fmove-from\u7684\u7269\u4f53(source)\uff0c\u6211\u4eec\u6240\u5728\u7684\u8fd9\u4e2a\u7269\u4f53\u662fmove-to\u7684\u7269\u4f53(target)\uff0c\u4ea4\u6362 \u7ed3\u675f\u4e4b\u540e\uff0c\u6211\u4eec\u62ff\u5230\u4e86other\u539f\u6709\u7684\u6570\u636e\u3002\u7136\u800c\u8fd9\u91cc\u975e\u5e38\u5bb9\u6613\u7406\u89e3\u9519\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u91cc\u7684\u4ea4\u6362\uff0c\u53ea\u662f\u6982\u5ff5\u4e0a\u7684\u4ea4\u6362\uff0c\u5177\u4f53\u662f\u4e0d\u662f\u771f\u7684\u4ea4\u6362\uff0c\u53d6\u51b3\u4e8e\u6211\u4eec\u7684move ctor\u505a\u4e86\u4ec0\u4e48\u3002</p> <p>[1] \u5047\u5982\u6211\u4eec\u81ea\u5df1\u624b\u5199move ctor\uff0c\u6211\u4eec\u901a\u5e38\u5148\u628a\u81ea\u5df1\u6240\u5728\u7684\u7269\u4f53\u7684\u6570\u636e\u6e05\u7406\u5e72\u51c0\uff0c\u6210\u4e3a\u4e00\u4e2ahollow\u7269\u4f53\uff0c\u4e5f\u5c31\u662f\u8fbe\u5230\u4e00\u4e2aclean null state\uff0c\u7136\u540e \u6211\u4eec\u4f1a\u9010\u6210\u5458\u7684\u53bb\u7528std::swap()\u51fd\u6570\u4e0eother\u7684\u5bf9\u5e94\u6210\u5458\u4ea4\u6362\u6570\u636e\uff0c\u8fd9\u624d\u662f\u771f\u7684\u4ea4\u6362\u3002\u4e4b\u6240\u4ee5\u628a\u6570\u636e\u5148\u6e05\u7406\u6210\u4e00\u4e2aclean null state\uff0c\u662f\u56e0\u4e3a\u8fd9\u4e9b\u6570 \u636e\u8981\u5151\u6362\u7ed9other\uff0c\u800cother\u968f\u540e\u9a6c\u4e0a\u4f1a\u88abdestruct\u6389\uff0c\u53ea\u6709\u4fdd\u8bc1\u6570\u636e\u662f\u5e72\u51c0\u7684\u521d\u59cbstate\uff0cother\u5728\u88abdestruct\u7684\u65f6\u5019\u624d\u4e0d\u4f1a\u51fa\u9519\uff0c\u8bef\u5220\u8d44\u6e90\u4ec0\u4e48\u7684\u3002 \u2014\u2014\u2014\u2014\u8fd9\u662f\u771f\u6b63\u7684\u4ea4\u6362\uff0c\u5373swap\u3002</p> <p>[2] \u5047\u5982\u6211\u4eec\u6ca1\u6709\u624b\u5199\uff0c\u800c\u662f\u7528\u4e86=default\u8fd9\u79cd\u663e\u5f0f\u7684\u65b9\u5f0f\u8ba9\u7f16\u8bd1\u5668\u81ea\u52a8\u4e3a\u6211\u4eec\u751f\u6210move ctor\uff08\u6216\u8005\u9690\u5f0f\u7684\u751f\u6210\u4e5f\u4e00\u6837\uff09\uff0c\u8fd9\u65f6\u5019\uff0c\u81ea\u52a8\u751f\u6210\u7684move ctor\u5e76\u4e0d\u4f1a\u5148\u628a\u6570\u636e\u6e05\u7406\u6210\u521d\u59cb\u503c\u518d\u53bbswap\u4ec0\u4e48\u7684\uff0c\u5b83\u5f88\u8822\uff0c\u5b83\u53ea\u4f1a\u9010\u6210\u5458\u7684\u53bb\u8c03\u7528\u6bcf\u4e2a\u6210\u5458\u7684move ctor\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u6240\u5728\u7684\u8fd9\u4e2a\u7269\u4f53\u5c06\u4f1a\u5f97\u5230\u4e00 \u6839\u65b0\u7684\u8fde\u7ebf\uff0c\u7531\u8fd9\u8ddf\u8fde\u7ebf\u628a\u5f53\u524d\u7269\u4f53\u548cother\u6240\u5bf9\u5e94\u7684\u6570\u636e\u8fde\u8d77\u6765\uff0c\u4f46other\u548c\u8fd9\u5806\u6570\u636e\u7684\u8fde\u7ebf\u8fd8\u5728\u3002\u81f3\u4e8eother\u7684\u6210\u5458\u7684\u503c\u662f\u5426\u6709\u53d1\u751f\u6539\u53d8\uff0c\u5c31\u8981\u5206\u60c5\u51b5 \u8ba8\u8bba\u4e86\uff0c\u5982\u679c\u662fint float\u8fd9\u79cd\u6210\u5458\uff0cmove\u76f8\u5f53\u4e8e\u662fcopy\uff0c\u6240\u4ee5other\u7684\u8be5\u6210\u5458\u7684\u503c\u6ca1\u6709\u53d8\uff0c\u5e76\u6ca1\u6709\u4efb\u4f55\u7269\u7406\u610f\u4e49\u4e0a\u7684move\u6216\u8005swap\u53d1\u751f\uff0c\u800c\u5982\u679c\u662f std::string\u6210\u5458\u6216\u8005\u662f\u6211\u4eec\u81ea\u5b9a\u4e49\u7684\u4e00\u4e2a\u5b9e\u73b0\u4e86swap-move\u7684\u7c7b\u578bT\uff0c\u5bf9\u8be5\u6210\u5458\u8c03\u7528move ctor\u662f\u4f1a\u53d1\u751f\u5b9e\u8d28\u4e0a\u7684swap\u4ea4\u6362\u7684\uff0c\u90a3\u4e48other\u7684\u8be5\u6210\u5458\u7684 \u503c\u5c31\u4f1a\u53d8\u6210\u5f53\u524d\u7269\u4f53\u7684\u540c\u6210\u5458\u7684\u5f53\u524d\u503c\u3002\u63a5\u4e0b\u6765\u5462\uff0c\u6240\u6709\u6210\u5458\u7684move\u64cd\u4f5c\u90fd\u7ed3\u675f\u4e86\uff0cother\u4f1a\u88abdestruct\u6389\uff0c\u7b49\u4e8e\u8bf4\u662f\uff0cother\u548c\u90a3\u5806\u6570\u636e\u7684\u8fde\u7ebf\u5c31\u4f1a\u88ab \u526a\u65ad\u4e86\uff0c\u53ea\u7559\u4e0b\u6211\u4eec\u5f53\u524d\u7269\u4f53\u548c\u6570\u636e\u7684\u4e00\u6839\u8fde\u7ebf\u3002\u7531\u4e8e\u5728\u526a\u65ad\u7684\u8fc7\u7a0b\u4e2d\uff0cother\u7684\u6570\u636e\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u662f\u4e00\u4e2aclean null state\uff08\u6709\u4e9b\u53ef\u80fd\u662f\u88abcopy\u4e86\uff09\uff0c \u5982\u679c\u6790\u6784\u51fd\u6570\u91cc\u9762\u505a\u4e86\u4efb\u4f55\u4f1ainvalidate\u90a3\u5806\u6570\u636e\u7684\u64cd\u4f5c\uff0c\u90a3\u6211\u4eec\u7559\u4e0b\u7684\u8fd9\u4e2a\u8fde\u7ebf\uff0c\u5c31\u662fdangling\u7684\uff0c\u8fde\u7ebf\u8fde\u5230\u7684\u662f\u4e00\u5806\u5df2\u7ecf\u5931\u6548\u7684\u6570\u636e\u3002\u7531\u6b64\u53ef\u89c1\uff0c \u5f53\u6211\u4eec\u5728\u7ba1\u7406resource\u7684\u65f6\u5019\uff0c\u5e38\u5e38\u5e76\u4e0d\u80fd\u4f9d\u8d56\u4e8ecompiler\u81ea\u52a8\u751f\u6210\u7684move ctor\uff0c\u5b83\u8fbe\u4e0d\u5230\u6211\u4eec\u60f3\u8981\u7684\u6548\u679c\uff0c\u5fc5\u987b\u624b\u52a8\u5b9e\u73b0\u3002\u53ea\u6709\u5f53destructor\u548c \u90a3\u5806\u6570\u636e\u65e0\u5173\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u53ef\u4ee5\u7528=default\uff0c\u4e5f\u5c31\u662fdestructor call\u4e0d\u4f1a\u5bfc\u81f4\u90a3\u5806\u53f3\u503c\u7684\u6570\u636einvalidated\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u8bf4class\u53ea\u6709\u51e0\u4e2a float\u548cint\u7684\u6210\u5458\uff0c\u6bcf\u4e2a\u6210\u5458\u90fd\u53ea\u5305\u542b\u7eaf\u7cb9\u7684\u6570\u636e\uff0c\u6ca1\u6709\u4efb\u4f55file handle\u4ec0\u4e48\u7684\uff0c\u8fd8\u5305\u62ec\u51e0\u4e2a\u6211\u4eec\u81ea\u5b9a\u4e49\u7684\u7c7b\u578bT\uff0c\u4f46\u8fd9\u51e0\u4e2aT\u672c\u6765\u5c31\u5df2\u7ecf\u53ef\u4ee5\u6b63\u786e\u7684 move-construct\u7684\u3002</p> <p>[3] \u5728OOP\u7ee7\u627f\u7684\u7ed3\u6784\u4e2d\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5e72\u51c0\u7684\u7ba1\u7406\u8d44\u6e90\uff0c\u901a\u5e38\u6211\u4eec\u4f1a\u6709\u4e00\u4e2abase\u7c7b\u58f0\u660e\u6240\u6709\u8fd9\u4e9b\u8d44\u6e90\u76f8\u5173\u7684\u6210\u5458\uff0c\u7136\u540e\u624b\u52a8\u7684\u8bbe\u7f6e\u597dmove ctor\u3002\u63a5\u4e0b\u6765\uff0c \u6bcf\u4e2aderived\u7684\u7c7b\u5c31\u4e0d\u7528\u518d\u91cd\u590d\u8bbe\u7f6e\u4e86\uff0c\u5982\u679cderived\u7c7b\u8981\u5b9a\u4e49\u81ea\u5df1\u7684dtor\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u65e0\u6cd5\u5e2e\u6211\u4eec\u81ea\u52a8\u751f\u6210move ctor\uff0c\u6211\u4eec\u5c31\u8981\u81ea\u5df1explicit\u7684 \u7528=default\u6765\u544a\u8bc9\u7f16\u8bd1\u5668\u751f\u6210\uff0c\u4ece\u800c\u6ee1\u8db3rule of 5\uff0c\u5982\u679cderived\u7c7b\u53ea\u6709\u4e00\u4e2a\u666e\u901a\u7684ctor\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4ec0\u4e48\u90fd\u4e0d\u7528\u5199\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u751f\u6210rule of five\uff0c\u8fd9\u6837\u6bcf\u4e2aderived\u7c7b\u7684\u4ee3\u7801\u5c31\u5f88\u5e72\u51c0\uff0c\u4ee5\u4e0a\u4e24\u79cd\u65e0\u8bba\u54ea\u79cd\u60c5\u51b5\uff0cderived\u7c7b\u7684move ctor\u90fd\u4f1a\u81ea\u52a8\u53bb\u8c03\u7528base\u7c7b\u5199\u597d\u7684\u90a3\u4e2amove ctor\uff0cbase \u7c7b\u7684\u6210\u5458\u662f\u4e00\u5b9a\u4f1a\u88ab\u6b63\u786e\u7684move\u7684\u3002\u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5047\u5982\u6211\u4eec\u7684derived\u7c7b\u53c8\u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u4ee3\u7801\u903b\u8f91\uff0c\u9700\u8981\u624b\u52a8\u53bb\u5199move ctor\u7684\u65f6\u5019\uff0cbase\u7c7b \u7684move ctor\u662f\u4e0d\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528\u7684\uff0c\u6211\u4eec\u7684derived\u7c7b\u7684move ctor\u7684\u521d\u59cb\u5316\u5217\u8868\u91cc\uff0c\u5fc5\u987b\u624b\u52a8\u5199\u4e0a : Base(std::move(other))\u624d\u884c\u3002\u4e0d\u8fc7\u4e00\u822c \u5f53\u4f60\u53d1\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u65f6\u5019\uff0c\u901a\u5e38\u8bf4\u660e\u4f60\u7684base\u7c7b\u4e0d\u591f\u7528\uff0c\u53ef\u4ee5\u518d\u53bb\u5305\u4e00\u5c42\uff0c\u5b9a\u4e49\u53e6\u4e00\u4e2abase\u7c7b\uff1a class Base2 : public Base { ... }; \u4e3a\u4e86\u4ee3\u7801\u5e72\u51c0\u7b80\u6d01\uff0c\u6211\u4eec\u8981\u5c3d\u53ef\u80fd\u7684\u628a\u8fd9\u4e9bmove ctor\u7684mess\uff0c\u90fd\u653e\u5230\u4e00\u4e2a\u6216\u51e0\u4e2abase\u7c7b\u91cc\uff0c\u8ba9\u8fd9\u4e9bbase\u7c7b\u5b9e\u73b0rule of 5\uff0c\u7136\u540e\u4e0a\u5c42\u7684\u6bcf\u4e2a derived\u7c7b\u91cc\uff0c\u5c31\u8981\u5c3d\u91cf\u53bbfollow rule of 0\uff0c\u5373\u53ea\u5b9a\u4e49\u4e00\u4e2a\u666e\u901a\u7684ctor\u3002</p> <p>https://stackoverflow.com/questions/70917504/what-does-explicitly-defaulted-move-constructor-do</p> <p>\u4f7f\u7528std::vector\u65f6\uff0c\u4e0d\u4ec5\u9700\u8981\u6ce8\u610fconstruct in place\u6765\u51cf\u5c11copying\uff0c\u540c\u65f6\u8fd8\u8981\u975e\u5e38\u5c0f\u5fc3dynamic resizing and allocation\u3002 \u5f53\u4f60\u77e5\u9053\u4f60\u7684vector\u6709\u591a\u5927\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u517b\u6210\u4e60\u60ef\u4f7f\u7528vector.reserve(n)\uff0c\u8fd9\u6837vector\u4e00\u5f00\u59cb\u5c31\u4f1a\u51c6\u5907\u597dn\u4e2a\u5143\u7d20\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u7684 emplace_back()\u5c31\u4e0d\u9700\u8981\u6bcf\u6b21\u53bbresize\u4e86\u3002\u6ce8\u610freserve\u548cresize\u662f\u4e0d\u540c\u7684\uff0cresize\u4e0d\u4ec5\u662f\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\uff0c\u800c\u4e14\u8fd8\u4f1a\u76f4\u63a5construct\u90a3\u4e48\u591a\u7684 \u5143\u7d20\uff0c\u8fd9\u4e5f\u8981\u6c42\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u662fdefault constructible\u7684\uff0cresize\u7684\u4f5c\u7528\u548cvector\u7684\u6784\u9020\u51fd\u6570\u662f\u4e00\u6837\u7684\uff0c\u76f8\u5f53\u4e8e\u662f\u6211\u4eec\u663e\u5f0f\u7684\u8c03\u7528\u4e86 std::vector vec(n)\uff0c\u8fd9\u5728\u4e00\u5f00\u59cb\u5c31\u4f1a\u628avec\u586b\u6ee1n\u4e2a\u5143\u7d20\uff0c\u800creserve\u53ea\u662f\u5206\u914d\u8db3\u591f\u7684\u5b58\u50a8\u7a7a\u95f4\u800c\u5df2\uff0c\u589e\u52a0\u4e86vector\u7684capacity\uff0c\u800c\u4e0d\u662fsize\u3002</p> <p>\u6709\u65f6\u5019\u6211\u4eec\u7528vector(n)\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u7684\u5f62\u5f0f\u6765\u9884\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\uff0c\u5e76\u540c\u65f6\u521d\u59cb\u5316\u5143\u7d20\u503c\u3002\u8fd9\u6bd4reserve\u8981\u591a\u4e86\u4e00\u4e2a\u521d\u59cb\u5316\u7684overhead\uff0c \u4f46\u662f\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u7528vector.at(i)=\u7684\u5f62\u5f0f\u53bb\u586b\u5165\u503c\uff0c\u8fd9\u6837\u51cf\u5c11\u4e86push_back()\u6216emplace_back()\u7684overhead\u3002 \u8fd8\u6709\u7684\u65f6\u5019\uff0c\u5c31\u662f\u5728debug\u5f53\u4e2d\uff0c\u6709\u65f6\u6211\u4eec\u4f1a\u6545\u610f\u4e0d\u53bbreserve\u4e5f\u4e0d\u7528\u6784\u9020\u51fd\u6570\uff0c\u6545\u610f\u8ba9vector\u52a8\u6001\u7684resize\uff0c\u770b\u4ee3\u7801\u4f1a\u4e0d\u4f1a\u6709\u8106\u5f31\u7684\u5730\u65b9\u548cbug\u3002 \u8fd9\u6837\u505a\u4e3b\u8981\u662f\u4e3a\u4e86\u6d4b\u8bd5vector\u6240\u5bb9\u7eb3\u7684\u7c7b\u578bT\u5bf9\u4e0d\u5bf9\uff0c\u5c24\u5176\u662f\u5f53class T\u7ba1\u7406\u8d44\u6e90\u7684\u65f6\u5019\uff0c\u770bRAII\u505a\u6ca1\u505a\u5bf9\uff0cmove ctor\u6709\u6ca1\u6709\u6f0f\u4e1c\u897f\u7b49\u7b49\u3002 <p>\u6b64\u5916\uff0cemplace_back \u4eceC++17\u5f00\u59cb\uff0c\u5728\u4f60emplace\u4e86\u4e00\u4e2a\u5143\u7d20\u4e86\u4ee5\u540e\uff0c\u8fd8\u4f1a\u76f4\u63a5\u8fd4\u56de\u4f60\u6700\u65b0\u7684\u8fd9\u4e2a\u5143\u7d20\u7684\u5f15\u7528\uff0c\u65b9\u4fbf\u4f60\u505a\u4e8b\u60c5\uff0c\u6bd4\u5982\uff1a auto&amp; element = vec.emplace_back(args...); std::cout &lt;&lt; element &lt;&lt; std::endl;</p> <p>\u7136\u540e\u4f60\u9700\u8981\u975e\u5e38\u5c0f\u5fc3\uff0c\u5047\u5982\u4f60\u6709\u591a\u4e2aauto&amp; element = vec.emplace_back(args...)\u7684\u8bed\u53e5\uff0c\u5fc5\u987b\u4fdd\u8bc1\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2dvector\u6ca1\u6709\u91cd\u65b0\u52a8\u6001 resize\u6216\u5206\u914d\u7a7a\u95f4\u3002\u5047\u5982\u52a8\u6001resize\u4e86\uff0c\u4f60\u4e4b\u524d\u7684\u90a3\u4e9belement\u7684\u5f15\u7528\u5c31\u4f1a\u53d8\u5f97\u65e0\u6548\uff0c\u88abinvalidate\u4e86\uff0c\u4ed6\u4eec\u5f15\u7528\u7684\u4e1c\u897f\u662fvoid\uff0c\u56e0\u4e3a\u90a3\u4e9b\u4f4d\u7f6e \u672c\u6765\u5728\u7684\u5143\u7d20\u73b0\u5728\u90fd\u5df2\u7ecf\u88abmove\u5230\u65b0\u5206\u914d\u7684\u5b58\u50a8\u7a7a\u95f4\u53bb\u4e86\uff0c\u642c\u5bb6\u4e86\uff0c\u8fd9\u65f6\u4f60\u4e00\u5b9a\u4e0d\u80fd\u901a\u8fc7\u8fd9\u4e2a\u5f15\u7528\u53bb\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u4f7f\u7528vector\u7684\u65f6\u5019\u9700\u8981\u989d\u5916\u5c0f\u5fc3\uff0c\u65e0\u8bba\u662f\u4e3a\u4e86\u51cf\u5c11\u51fa\u9519\uff0c\u8fd8\u662f\u4e3a\u4e86performance\uff0c\u53ea\u8981\u4f7f\u7528\u4e86vector\uff0c\u6700\u597d\u6c38\u8fdc\u9884\u5148reserve\u3002</p> <p>// construct in place without copying std::vector vec; vec.emplace_back(args...); std::map map; map.try_emplace(key, args...) <p>// \u5f53\u4f60\u4f7f\u7528STL\u5bb9\u5668\u6765construct in place\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u4e00\u4e2a\u5f88\u6076\u5fc3\u7684bug\uff0c\u65e0\u8bba\u662femplace_back // \u8fd8\u662ftry_emplace\uff0c\u90fd\u5e76\u4e0d\u603b\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684construct in place\uff0c\u6709\u7684\u65f6\u5019\u8fd8\u662f\u4f1a\u8fdb\u884cstd::move() // \u64cd\u4f5c\u7684\uff0c\u6bd4\u5982\u5f53\u5bb9\u5668\u9700\u8981\u81ea\u52a8resize\u6216\u8005allocate\u7684\u65f6\u5019\uff08\u6240\u4ee5\u6211\u4eec\u624d\u8bf4\u662f\u201cAmortized O(1)\u201d\u7684\u65f6\u95f4\uff09 // \u5c31\u4f1a\u53bbmove\uff0c\u6240\u4ee5\u4f60\u4e5f\u8981\u5f53\u6210\u662fmove\u6765\u770b\u3002\u597d\u51e0\u6b21\u7684\u9519\u8bef\u90fd\u662f\uff0c\u6211\u5728class\u91cc\u65b0\u589e\u4e86\u4e00\u4e2a\u6210\u5458\uff0c\u6ca1\u6709\u8bbe\u7f6e // \u9ed8\u8ba4\u503c\uff0c\u800c\u662f\u653e\u5728\u6784\u9020\u51fd\u6570\u91cc\u53bb\u8bbe\u7f6e\u521d\u59cb\u503c\u7684\uff0c\u4f46\u5e76\u4e0d\u662f\u9ed8\u8ba4\u503c\uff0c\u7136\u540e\u5462\uff0ctry_emplace\u7684\u65f6\u5019\u88ab\u9690\u85cf\u7684 // move\u4e86\uff0c\u4e5f\u5c31\u662f\u6211\u5b9e\u9645\u4ee5\u4e3a\u7684\u5bf9\u8c61\u548c\u4e00\u4e2a\u7a7a\u7684\u9ed8\u8ba4\u5bf9\u8c61\u8fdb\u884cswap\uff0c\u7136\u800c\u90a3\u4e2a\u7a7a\u7684\u9ed8\u8ba4\u5bf9\u8c61\u7684\u90a3\u4e2a\u6210\u5458\uff0c\u8981\u4e48 // \u503c\u662f\u810f\u7684\u4e5f\u5c31\u662f\u672a\u521d\u59cb\u5316\u7684\u5783\u573e\u503c\uff0c\u8981\u4e48\u662f\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u7ed9\u5b83\u7684\u975e\u9ed8\u8ba4\u7684\u503c\uff0c\u4e00move\uff0c\u8fd9\u4e2a\u6210\u5458field\u5c31\u4f1a // \u5bfc\u81f4\u5176\u4ed6\u4f9d\u8d56\u4e8e\u5b83\u7684\u4ee3\u7801\u7684bug\u3002\u6240\u4ee5\uff0c\u4e00\u5b9a\u8981\u8bb0\u5f97\uff0c\u8981\u4e48\u8981\u4e3b\u52a8\u8bbe\u597d\u9ed8\u8ba4\u503c\uff0c\u522b\u53ea\u58f0\u660e\uff0c\u8981\u4e48\u6bcf\u6b21\u65b0\u52a0\u4e00\u4e2a // \u6210\u5458\u7684\u65f6\u5019\uff0c\u4fdd\u8bc1\u4e00\u5b9a\u4f1a\u5728move constructor\u548cmove\u64cd\u4f5c\u7b26\u91cc\u53bb\u5904\u7406\u8fd9\u4e2a\u503c\u3002\u8fd9\u4e2a\u771f\u7684\u5f88\u5bb9\u6613\u5fd8\u8bb0\uff0c\u65b0\u52a0 // \u6210\u5458\u7684\u65f6\u5019\u603b\u662f\u4f1a\u5fd8\u8bb0\u5728move constructor\u91cc\u4e5f\u4e00\u8d77\u52a0\u4e00\u4e0b\u2026\u2026</p> <p>[[nodiscard]]  //\u4ee3\u8868\u4e00\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e0d\u80fd\u88abdiscard\uff0c\u5fc5\u987b\u8981\u88ab\u7528\u5230 [[nodiscard]] int Add(int x) { return x + 1; }</p> <p>auto it = vec.begin(); it++;  // \u5bf9\u8fed\u4ee3\u5668\u76f4\u63a5\u52a0\u51cf\u53ea\u9002\u5408vector\u7b49random access\u5bb9\u5668\uff0c\u4e0d\u9002\u7528\u6240\u6709\u5bb9\u5668 std::advance(it, 2);  // \u517b\u6210\u597d\u4e60\u60ef\uff0c\u5c3d\u91cf\u7528std::advance\u7b49\u51e0\u4e2a\u65b9\u6cd5 std::advance(it, -2);  // backwards advance auto next1 = std::next(it); auto previous2 = std::prev(it, 2);</p> <p>std::map\u5185\u90e8\u7ed3\u6784\u662fBST\uff0c\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u5982\u679c\u8981\u7528\u81ea\u5b9a\u4e49object\u4f5c\u4e3akey\u7684\u8bdd\uff0c\u8fd8\u8981override operator&lt; \u6216\u8005\u63d0\u4f9b\u4e00\u4e2acompare\u51fd\u6570\u3002 std::unordered_map\u662f\u65e0\u5e8f\u7684hash table\uff0c\u6240\u4ee5\u5982\u679c\u8981\u7528\u81ea\u5b9a\u4e49object\u4f5c\u4e3akey\u7684\u8bdd\uff0c\u8981override operator==\u5e76\u63d0\u4f9bhash\u51fd\u6570\u3002 \u901a\u5e38\u4eba\u4eec\u559c\u6b22\u7528std::map\uff0c\u662f\u56e0\u4e3a\u5b83\u66f4\u7a33\u5b9a\uff0c\u901f\u5ea6\u6c38\u8fdc\u662fO(logn)\uff0c\u4e0d\u5b58\u5728worst/best case\uff0c\u5e76\u4e14\u514d\u8d39\u7684\u63d0\u4f9b\u6392\u5e8f\uff0c\u540c\u65f6\uff0cstd::map\u6bd4 \u8f83\u8f7b\u91cf\u7ea7\uff0c\u5185\u5b58\u6d88\u8017\u5c0f\u3002\u9664\u6211\u4eec\u8981\u5b58\u50a8\u6210\u5343\u4e0a\u4e07\u7684\u5927\u91cf\u7684pair\u6570\u636e\uff0c\u4e00\u822c\u90fd\u7528std::map\u66f4\u597d\uff0c\u6570\u636e\u91cf\u4e0d\u591a\u7684\u60c5\u51b5\u4e0b\u7528std::unordered_map\u53cd\u800c\u662f\u6d6a\u8d39\u3002</p> <p>}</p> <p>void Pitfalls() {     (vcruntime140d.dll) 0xc0000005: access violation writing location 0x00000000.     \u8fd9\u662f\u5728\u4f7f\u7528visual studio\u7684\u65f6\u5019\uff0c\u53cd\u590d\u4f1a\u9047\u5230\u7684\u4e00\u4e2a\u7ecf\u5178\u9519\u8bef\uff0c\u6709\u65f6\u5019\u4e0d\u662fvcruntime140d\uff0c\u4e5f\u53ef\u80fd\u662fmtdll\u7b49\u5176\u4ed6dll\u6587\u4ef6\u62a5\u9519\u3002     \u8fd9\u4e2a\u95ee\u9898\u6781\u5176\u96be\u67e5\u548c\u6d6a\u8d39\u65f6\u95f4\uff0c\u4ee5\u540e\u8bb0\u4f4f\u4e86\uff0c\u8fd9\u662fvisual studio\u7684\u4e00\u4e2abug\uff0c\u4e0d\u662f\u6211\u4eec\u81ea\u5df1\u4ee3\u7801\u7684bug\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01     \u75c7\u72b6\u8868\u73b0\u4e3a\uff1a\u4e4b\u524d\u7684\u4ee3\u7801\u4e00\u76f4\u8dd1\u7684\u597d\u597d\u7684\uff0c\u7a81\u7136\u95f4\u5c31\u62a5\u9519access violation\uff0c\u6bd4\u5982\u5f88\u7b80\u5355\u7684copy\u4e00\u4e2astring\uff0c\u4e24\u8fb9\u90fd\u6709\u503c\uff0c\u7ed3\u679c\u5230\u4e86std\u7684     \u6e90\u6587\u4ef6\u91cc\uff0c\u5c31\u83ab\u540d\u5176\u5999\u53d8\u6210\u4e86null pointer\uff0c\u6216\u8005\u67d0\u4e9b\u503c\u663e\u793aunable to read memory locations\u3002\u518d\u6bd4\u5982\u8bf4\uff0c\u672c\u6765\u4ee3\u7801\u4e00\u5207     \u8fd0\u884c\u6b63\u5e38\uff0c\u7ed3\u679c\u6211\u5c31\u52a0\u4e86\u4e00\u4e2aint a = 1\u7684\u8bed\u53e5\uff0c\u6216\u8005\u65b0\u5b9a\u4e49\u4e86\u4e00\u4e2aconst vector\uff0c\u7a81\u7136\u95f4\uff0c\u67d0\u4e9bshared_ptr\u7684copy\u5c31\u62a5\u9519access     violation\u4e86\uff0c\u51fa\u73b0\u4e86\u5404\u79cd\u7a7a\u6307\u9488\u3002 <p>\u539f\u56e0\u5206\u6790\uff1a\u5f53\u51fa\u73b0\u4ee5\u4e0a\u75c7\u72b6\u65f6\uff0c\u56de\u60f3\u4e00\u4e0b\uff0c\u4f60\u524d\u9762\u662f\u4e0d\u662f\u521a\u521a\u5237\u65b0\u8fc7premake\u6216\u8005cmake\u7684build\u811a\u672c\uff1f\u6bd4\u5982\uff0c\u901a\u5e38\u5f53\u6211\u4eec\u91cd\u65b0\u7528premake build\u4e86\u6574\u4e2avs\u7684solution\u4e4b\u540e\uff0c\u56de\u5230visual studio\u4e2d\u65f6\uff0cvs\u4f1a\u9a6c\u4e0a\u5f39\u51fa\u4e00\u4e2a\u5bf9\u8bdd\u6846\uff0c\u544a\u8bc9\u4f60solution\u548cproject settings\u5df2\u7ecf\u88ab\u4fee\u6539\uff0c \u662f\u5426reload\u3002\u7136\u800c\u6709\u7684\u65f6\u5019\uff0c\u660e\u660epremake\u66f4\u65b0\u8fc7\u4e86\uff0c\u56de\u5230vs\u4e4b\u540e\u5374\u6ca1\u6709\u5f39\u51fa\u8fd9\u4e2a\u5bf9\u8bdd\u6846\uff0c\u800c\u6211\u4eec\u4e5f\u6ca1\u6709\u6ce8\u610f\u5230\uff0c\u6216\u8005\u662f\u6211\u4eec\u4e0d\u5c0f\u5fc3\u70b9\u4e86cancel\uff0c \u8fd9\u6837\u4e00\u6765\u5c31\u4f1a\u5bfc\u81f4\uff0c\u6211\u4eec\u5f53\u524d\u6b63\u5728\u505a\u7684project\uff0c\u548cvs\u6240\u8ba4\u4e3a\u7684project\u4e4b\u95f4\u51fa\u73b0\u4e86\u5206\u6b67\uff0c\u660e\u660eproject settings\u5df2\u7ecf\u66f4\u65b0\u4e86\uff0cvs\u4e5f\u662f\u4ee5\u65b0\u7684 settings\u4e3a\u6807\u51c6\u53bbdebug\u548c\u8fd0\u884c\u4ec0\u4e48\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u6211\u4eec\u7684\u9879\u76ee\u8fd8\u5728\u7528\u8001\u7684\u8bbe\u7f6e\u3002\u6240\u4ee5\u5f53\u4f60\u7ee7\u7eed\u8fd0\u884c\u65f6\uff0c\u4e00\u5f00\u59cb\u6b63\u5e38\u4e0d\u4f1a\u51fa\u9519\uff0c\u4f46\u53ea\u8981\u4f60\u52a0\u4e86\u4e00\u70b9\u70b9 \u65b0\u7684\u4ee3\u7801\uff0c\u4e24\u8fb9\u5c31\u5f7b\u5e95\u5206\u6b67\u4e86\uff0c\u53ef\u80fd\u4f60\u53ea\u662f\u65b0\u58f0\u660e\u4e86\u4e00\u4e2aint\uff0c\u4f46vs\u6839\u636e\u65b0\u7684project settings\uff0cbuild\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u628a\u8fd9\u884c\u4ee3\u7801\u7f16\u8bd1\u5230\u5176\u4ed6\u7684 \u5185\u5b58\u533a\u57df\u53bb\uff0c\u4e8e\u662f\u5c31\u4ea7\u751f\u4e86\u8fd9\u4e2a\u5de8\u6076\u5fc3\u7684\u95ee\u9898\uff0c\u96be\u4ee5\u67e5\u539f\u56e0\u3002 \u5176\u4ed6\u539f\u56e0\uff1a\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e2a\u5e38\u89c1\u7684\u539f\u56e0\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c31\u662fdebug/release\u7248\u672c\u4ee5\u53cawin32/x64\u7248\u672c\u7684\u4e0d\u5339\u914d\uff0c\u5c31\u662f\u4f60\u7528debug\u7684project settings\u53bb\u8dd1release build\uff0c\u6216\u8005\u53cd\u8fc7\u6765\u4e5f\u662f\u5982\u6b64\uff0c\u4e0d\u8fc7\u4e00\u822c\u8fd9\u4e2a\u6bd4\u8f83\u7f55\u89c1\u3002\u6bd4\u8f83\u5927\u6982\u7387\u7684\u53ef\u80fd\u662f\uff0c\u67d0\u4e9bassertion\u7684\u7528\u6cd5\u4e0d\u5bf9\u3002\u56e0\u4e3a ASSERT\u662f\u53ea\u4f1a\u5728debug build\u91cc\u9762\u8dd1\u7684\uff0c\u5230\u4e86release build\uff0c\u4e00\u5207ASSERT\u90fd\u4e0d\u4f1a\u8dd1\uff0c\u56e0\u4e3a\u6839\u672c\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u5230release\u7248\u672c\u4e2d\u53bb\uff0c\u6240\u4ee5\u8bf4\uff0c \u5047\u5982\u4f60\u4e0d\u5c0f\u5fc3\u5728ASSERT\u4e2d\u505a\u4e86\u4e00\u4e9b\u4e8b\u60c5\uff0c\u6bd4\u5982malloc\u5206\u914d\u4e86\u5185\u5b58\uff0c\u800c\u5230\u4e86release\u7684\u65f6\u5019\uff0cassert\u88ab\u8df3\u8fc7\u4e86\u4e8e\u662f\u8be5\u5185\u5b58\u6ca1\u6709\u88abmalloc\u5206\u914d\uff0c \u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u4ee3\u7801\u5c31\u4f1a\u65e0\u6cd5\u8bfb\u53d6\u8fd9\u5757\u5185\u5b58\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6b63\u786e\u7684\u505a\u6cd5\u662fthrow exception\uff0c\u800c\u4e0d\u662fASSERT\uff0c\u56de\u5fc6\u4e00\u4e0bassertion\u548cexception\u7684\u533a\u522b\u3002</p> <p>\u5728\u6211\u4eec\u7684rendererInput\u7ed3\u6784\u4f53rdr_in\u5f53\u4e2d\uff0c\u6709\u4e2amaterial id\u7684field\uff0c\u8fd9\u4e2a\u4e00\u822c\u662f\u53ea\u7528\u4e8eassimp\u52a0\u8f7d\u7684\u5916\u90e8\u6a21\u578b\u7684\uff0c\u5bf9\u4e8e\u540c\u4e00\u6a21\u578b\u4e2d\u7684 \u4e0d\u540cmesh\uff0c\u53ef\u4ee5\u7528\u8fd9\u4e2a\u53d8\u91cf\u6765\u52a0\u4ee5\u533a\u5206\uff0c\u91c7\u7528\u4e0d\u540c\u7684\u7740\u8272\u3002\u5982\u679c\u4e0d\u662f\u52a0\u8f7d\u7684\u6a21\u578b\uff0c\u800c\u662f\u6211\u4eec\u81ea\u5df1\u7684primitive mesh\uff0c\u8fd9\u4e2a\u53d8\u91cf\u662f\u4e0d\u9700\u8981\u7684\uff0c\u4e5f \u6ca1\u6709\u610f\u4e49\uff0c\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u867d\u7136\u4e0d\u7528\uff0c\u4e5f\u5fc5\u987b\u8bbe\u7f6e\u4e3a0\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u5b83\u5c31\u4f1a\u6cbf\u7528\u4e0a\u4e00\u6b21\u66f4\u65b0\u7684\u503c\uff0c\u5047\u5982\u4e0a\u4e00\u4e2a\u753b\u7684\u6b63\u597d\u662f\u4e2amodel\uff0c\u90a3\u8fd9\u4e2aprimitive mesh\u5c31\u4f1a\u88ab\u8bef\u5224\u4e3a\u662fmodel\uff0c\u4ece\u800cshader\u7684\u903b\u8f91\u4f1a\u9519\u6389\u3002\u8bbe\u7f6e\u4e3a0\u662f\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u52a0\u8f7d\u7684\u5916\u90e8\u6a21\u578b\u7684material id\u6c38\u8fdc\u4e0d\u53ef\u80fd\u4e3a0. \u8fd9\u662f\u56e0\u4e3a\uff0c material id\u53d6\u7684\u662f\u67d0\u4e2amesh\u7684VAO\u5bf9\u5e94\u7684object handle id\uff0c\u5f53\u6211\u4eec\u52a0\u8f7d\u6a21\u578b\u65f6\uff0c0\u80af\u5b9a\u65e9\u5c31\u88ab\u5176\u4ed6\u7684OpenGL object\u7528\u6389\u4e86\u3002</p> <p>using declarations should only be used after all includes in a .cpp file</p> <p>OpenGL\u7684\u5b8c\u6574pipeline\u6d41\u7a0b\uff0c\u5fc5\u987b\u8981\u719f\u6089\uff1a https://www.khronos.org/opengl/wiki/Rendering_Pipeline_Overview</p> <p>once we save a shader program to disk as a binary file, it becomes permanent and can be loaded into OpenGL again. It should be noted that only the compiled data gets saved into the binary, but not the program object id, so it is a piece of data not owned by any shader program. Later when we load it into OpenGL, we still need to create a shader program to which the binary data should be assigned. This essentially means that a pre-compiled shader binary can be loaded by multiple entities, it can be shared by any number of shader programs (each has a different id) with no conflicts. Also, data inside the saved binary is implementation dependent, each platform and driver has a different way of handling it. Therefore, if you try to load a shader binary saved by another platform, the operation is going to fail with an empty error message. Even if you are using the same driver but of different versions, it is still likely to break.</p> <p>normal map\u548cbump map\u4e0d\u662f\u4e00\u56de\u4e8b\u3002bump map\u662f\u901a\u8fc7grayscale\u4fee\u6539\u6bcf\u4e2a\u50cf\u7d20\u662f\u504f\u9ed1\u8fd8\u662f\u504f\u767d\uff0c\u63d0\u4f9b\u50cf\u7d20\u7684depth\u7684\u9519\u89c9\uff0c\u4f46\u53ea\u6709\u4e0a\u4e0b\u4e24\u4e2a \u65b9\u5411\uff0c\u5b83\u4ea7\u751f\u7684detail\u662f\u5047\u7684\uff0c\u901a\u8fc7\u65cb\u8f6ccamera\u5230\u4e0d\u540c\u7684\u89d2\u5ea6\uff0c\u5c31\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u6240\u4ee5bump map\u53ea\u9002\u5408\u6a21\u62df\u5927\u6982\u7684\u7ec6\u8282\uff0c\u4f18\u70b9\u662f\u6bd4\u8f83\u5bb9\u6613\u5236\u4f5c\u3002 \u800cnormal map\u5176\u5b9e\u662f\u65b0\u4e00\u4ee3\u66f4\u5148\u8fdb\u7684bump map\uff0c\u867d\u7136normal map\u4ea7\u751f\u7684depth\u7ec6\u8282\u4e5f\u662f\u5047\u7684\uff0c\u4f46\u5b83\u7528\u7684\u662fRGB\u4fe1\u606f\u6765\u5bf9\u5e943D\u7a7a\u95f4\u7684XYZ\uff0c\u7ed9\u6bcf \u4e2a\u70b9\u90fd\u63d0\u4f9b\u4e86normal\u7684\u6570\u636e\uff0c\u53c2\u4e0eshading\u7684\u8ba1\u7b97\uff0c\u6240\u4ee5\u54ea\u6015camera\u6362\u4e86\u89d2\u5ea6\u4e5f\u4e0d\u4f1a\u5931\u771f\u3002</p> <p>// in spdlog, curly brace '{' needs to be escaped by using '{{'</p> <p>JPG\u53ea\u6709RGB\uff0c\u6ca1\u6709alpha\u901a\u9053\uff0c\u80fd\u4ee3\u8868\u7684\u8272\u5f69\u6bd4\u8f83\u6709\u9650\uff0c\u6ca1\u6709\u900f\u660e\u5ea6\uff0c\u5e76\u4e14\u538b\u7f29\u662flossy\u7684\uff0c\u6240\u4ee5\u6587\u4ef6\u5927\u5c0f\u6bd4\u8f83\u5c0f\uff0c\u8f7b\u4fbf\u4e0d\u5360\u5185\u5b58\uff0c\u4f46\u662f\u5982\u679c\u5728 \u7f51\u7edc\u4e0a\u4f20\u8f93\u7684\u6b21\u6570\u591a\u4e86\uff0c\u7ecf\u8fc7\u4e86\u591a\u6b21\u7684\u538b\u7f29\u548c\u89e3\u538b\uff0c\u56fe\u7247\u8d28\u91cf\u4f1a\u5927\u5e45\u4e0b\u964d\u3002PNG\u53ef\u4ee5\u652f\u6301\u6700\u592748bit\u7684\u8272\u5f69\uff0c\u800c\u4e14\u6709alpha\u901a\u9053\uff0c\u6240\u4ee5\u8272\u5f69\u7a7a\u95f4\u66f4\u4e30 \u5bcc\uff0c\u5b83\u7684\u538b\u7f29\u662flossless\u7684\uff0c\u65e0\u8bba\u600e\u4e48\u4f20\u8f93\u90fd\u80fd\u4fdd\u7559\u539f\u56fe\u7684\u8d28\u91cf\uff0c\u4f46\u662f\u6587\u4ef6\u5927\u5c0f\u4e00\u822c\u6bd4\u8f83\u5927\uff0c\u4e0d\u662f\u90a3\u4e48\u8f7b\u4fbf\u3002TIFF\u683c\u5f0f\u662f\u4e00\u4e2a\u56fe\u7247\u7684container\uff0c \u53ef\u4ee5\u5b58\u50a8\u591a\u5e45\u56fe\u7247\uff0c\u6587\u4ef6\u6bd4\u8f83\u5927\uff0c\u53ef\u538b\u7f29\u6216\u4e0d\u538b\uff0c\u901a\u5e38\u662f\u7528\u6765\u7f51\u7edc\u4f20\u8f93\u65f6\u6253\u5305\u7684\u3002</p> <p>remember that camera.position and direction is vec4 whose w component has junk, we only use .xyz this is because our UBO SSBO do not allow vec3 types</p> <p>ImGuizmo\u5047\u5b9a\u4e00\u6b21\u53ea\u80fd\u753b\u4e00\u4e2agizmo\uff0c\u901a\u5e38\u6765\u8bf4\uff0c\u6211\u4eec\u4e5f\u786e\u5b9e\u662f\u5e94\u8be5\u4e00\u6b21\u53ea\u64cd\u4f5c\u4e00\u4e2agizmo\uff0c\u5f53\u524d\u88ab\u9009\u4e2d\u7684\u7269\u4f53\u7684gizmo\u3002 \u4e0d\u8fc7\u5bf9\u4e8e\u753bgizmo\u662f\u6ca1\u6709\u9650\u5236\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u6b21\u6027\u540c\u65f6\u753b\u591a\u4e2a\u7269\u4f53\u7684gizmo\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662fImGuizmo\u65e0\u6cd5\u5224\u65ad\u54ea\u4e2a\u7269\u4f53\u662f\u88ab\u9009\u4e2d \u7684\uff0c\u6216\u8005\u6839\u672c\u5c31\u6ca1\u6709\u9009\u4e2d\u72b6\u6001\u3002\u6b64\u65f6\uff0c\u5f53\u6211\u4eec\u53bbmanipulate\u5176\u4e2d\u4e00\u4e2agizmo\u7684\u65f6\u5019\uff0c\u5176\u4ed6\u7269\u4f53\u7684transform\u77e9\u9635\u4e5f\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u4e5f\u5c31\u662f\u591a\u4e2a\u7269\u4f53 \u4e4b\u95f4\u5b58\u5728\u7ea0\u7f20\u73b0\u8c61\uff0c\u6539\u52a8\u4e00\u4e2agizmo\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u3002</p> <p>about GLuint id = 0 for OpenGL objects: https://www.khronos.org/opengl/wiki/OpenGL_Object#Object_zero</p> <p>Intel\u663e\u5361\u4e0acompute shader\u4e0d\u4f1ahang\uff0c\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\uff0c\u4f46\u5b83\u4f3c\u4e4e\u6709\u4e2a\u95ee\u9898\u662f\uff0c\u9a71\u52a8\u4f1a\u81ea\u52a8\u505a\u4e00\u4e9bfbo\u7684\u540e\u53f0\u64cd\u4f5c\uff0c\u5bfc\u81f4\u5373\u4f7f\u4f60\u6ca1\u6709\u8fdb\u884c glBindFramebuffer\u7684\u64cd\u4f5c\uff0c\u5373\u4f7f\u4f60\u4e00\u76f4\u5728\u9ed8\u8ba4\u7684framebuffer\u4e0a\uff0c\u6bcf\u4e2aglDrawXXX\u8c03\u7528\u90fd\u4f1a\u89e6\u53d1debugMessageCallback\uff0c\u663e\u793aredundant state change\uff08FBO 0 is already bound\uff09\u8fd9\u6837\u7684low\u7ea7\u522bperformance\u901a\u77e5\u4fe1\u606f\u3002\u5e76\u4e0d\u662f\u6211\u7684\u4ee3\u7801\u7684\u95ee\u9898\uff0c\u662fintel\u663e\u5361\u3002</p> <p>AMD\u663e\u5361\u4e0a\uff0c\u6ca1\u6709redundant state change\u7684\u95ee\u9898\uff0c\u4f46\u5b83\u975e\u5e38\u4e25\u91cd\u7684\u95ee\u9898\u5728\u4e8edriver timeout\uff0c\u603b\u662f\u4f1a\u83ab\u540d\u7684timeout\uff0c\u8fd9\u4e5f\u5bfc\u81f4\u5b83\u4e00\u65e6\u9047\u5230 \u8ba1\u7b97\u91cf\u7a0d\u5927\u7684compute shader\uff0c\u5b83\u5c31reset\u4e0d\u52a8\u4e86\u3002\u5728Intel\u548cNvidia\u663e\u5361\u4e0a\u90fd\u6ca1\u6709\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u7ec8\u4e8e\u641e\u5b9a\u4e86\u8fd9\u4e24\u4e2abug\u2026\u2026\u4ee5\u540e\u8bb0\u4f4f\uff0cdebug\u8981\u7528RenderDoc\u8fd9\u6837\u7684\u7b2c\u4e09\u65b9\u5de5\u5177\uff0c\u5728API inspector\u91cc\u4e00\u6b65\u6b65\u770b\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u6d4f\u89c8texture\uff0c\u8fd8\u53ef\u4ee5 \u770b\u5230VAO,VBO,IBO\u7684\u5177\u4f53\u4fe1\u606f\uff0c\u770b\u5230\u4f60\u7ed1\u7684shader\u5bf9\u4e0d\u5bf9\uff0c\u6e90\u4ee3\u7801\u662f\u4ec0\u4e48\u3002\u201cNo Resource\u201d\u4e0d\u662f\u51fa\u9519\uff0c\u800c\u662f\u4ee3\u88680\uff0c\u5c31\u662funbind\u4e00\u4e2a\u8d44\u6e90\u3002\u5bf9\u4e8e \u5f88\u6076\u5fc3\u7684bug\uff0c\u91cd\u70b9\u5173\u6ce8pipeline state\u4e2d\u7684rasterizer\u5f53\u524dstate\u4fe1\u606f\uff0c\u5982\u679c\u662fclip\u4e0d\u5bf9\uff0c\u6216\u8005cullmode\u4e0d\u5bf9\uff0c\u6216\u8005depth\u6709\u95ee\u9898\uff0c\u662f\u975e\u5e38 \u96be\u67e5\u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u9762\u677f\u5c31\u5f88\u6709\u5e2e\u52a9\u3002</p> <p>\u5f53\u4f60\u770b\u5230buffer object\u7684id\u5728\u5207\u6362\u573a\u666f\u4e4b\u540e\uff0c\u4e0d\u65ad\u9012\u589e\uff0c\u6ca1\u6709\u91cd\u7f6e\uff0c\u80af\u5b9a\u662f\u4f60\u54ea\u91cc\u6ca1\u6709delete\u6e05\u7406\u5e72\u51c0\u3002\u6211\u7684shader program id\u4e0d\u65ad \u589e\u52a0\uff0c\u662f\u56e0\u4e3a\u6211\u6709\u65f6\u5019create shader\u5374\u63d0\u524dreturn\u4e86\uff0c\u6ca1\u6709\u6765\u5f97\u53cadelete\u6389\uff0c\u8fd9\u5c31\u548cmemory leak\u7684\u90a3\u4e2abug\u4e00\u6837\u7279\u522b\u5bb9\u6613\u51fa\u9519\u3002\u4f60\u4ee5\u4e3a\u4f60 delete\u6216\u8005free\u4e86\uff0c\u4f46\u53ef\u80fd\u67d0\u4e2a\u5206\u652f\u63d0\u524d\u89e6\u53d1\u8fd4\u56de\u4e86\uff0c\u6839\u672c\u6765\u4e0d\u53ca\u8dd1\u5230\u90a3\u91cc\uff0c\u5185\u5b58\u5c31\u6cc4\u9732\u4e86\uff01\uff01\uff01</p> <p>\u8fd8\u8bb0\u5f97\u90a3\u4e2a\u9ed1\u7403\u7684\u95ee\u9898\u561b\uff1f\uff1f\uff1f\u8bb0\u4e0b\u8fd9\u4e2a\u6559\u8bad\u3002 \u5982\u679c\u4f60\u53d1\u73b0\u67d0\u4e2a\u672c\u6765\u5e94\u8be5\u5f88\u8017\u65f6\u7684draw call\u77ac\u95f4\u5b8c\u6210\u4e86\uff0c\u5e76\u4e0d\u4ee3\u8868shader\u6ca1\u6709\u88ab\u6267\u884c\u3002\u4f60\u8bd5\u7740\u628ashader\u6539\u6210\u5c31\u8f93\u51fa\u4e00\u4e2a\u7c89\u8272\uff0c\u7ed3\u679c\u51fa\u6765\u7684\u8fd8\u662f \u9ed1\u8272\uff0c\u8fd9\u4e0d\u662f\u56e0\u4e3ashader\u6ca1\u6709\u88ab\u6267\u884c\uff0c\u800c\u662f\u56e0\u4e3aface culling\u7684\u539f\u56e0\uff0c\u5bfc\u81f4opengl\u53d1\u73b0\u4f60\u8fd9\u4e2aface\u9700\u8981\u88abcull\u6389\uff0c\u6240\u4ee5fragment shader \u4e00\u8fdb\u53bb\u5c31\u628a\u6240\u6709\u7684fragments\u81ea\u52a8discard\u6389\u4e86\uff01\uff01\uff01\uff01\uff01 \u5f53\u6211\u4eecdraw\u4e00\u4e2askybox\u65f6\uff0c\u6216\u8005\u8981\u8ba1\u7b97irradiance map\u65f6\uff0c\u8bb0\u4f4f\uff0c\u53ea\u8981\u662frender\u5230\u4e00\u4e2acubemap\u4e0a\u7684\uff0c\u7528draw cube\u7684\u65b9\u5f0f\uff0c\u90fd\u5fc5\u987b\u8981\u5148\u628a winding order\u53cd\u8fc7\u6765\uff01\uff01\uff01\uff01\u5426\u5219\u4f1a\u88abcull\u6389\uff01\uff01\uff01 \u8981\u4e48SetFrontFace\u4e3aCW\uff0c\u8981\u4e48disable face culling\u3002\u5982\u679cshader\u77ac\u95f4\u8fd4\u56de\uff0c\u4e00\u5b9a\u662f\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c\u8fd9\u662fdraw cube\u65f6\u7684\u4e00\u4e2a\u5927\u5751\u3002 draw cube\u8fd8\u6709\u4e00\u4e2a\u5927\u5751\u5c31\u662f\uff0c\u5982\u679c\u8ba1\u7b97irradiance map\u8fd9\u79cd\u6bd4\u8f83\u8017\u65f6\u7684\u4efb\u52a1\uff0c\u6bcf\u4e2aface\u8fd8\u6765\u4e0d\u53ca\u6267\u884c\u5b8c\uff0c\u4f60\u5c31\u5207\u6362\u5230\u4e0b\u4e00\u4e2aface\uff0c\u4f1a\u5bfc\u81f4 GPU\u7684command queue\u8d85\u8d1f\u8377\uff01\uff01\uff01\u53ef\u80fd\u4f1a\u6709CPU\u548cGPU\u4e4b\u95f4\u7684\u540c\u6b65\u95ee\u9898\uff0c\u7136\u540e\u5c31\u4f1a\u5bfc\u81f4\uff0c\u67d0\u4e2aglXXXX\u51fd\u6570\u7a81\u7136\u5c31hang\u4f4f\u4e86\uff0c\u6c38\u8fdc\u4e0d\u8fd4\u56de\u3002\u51fa\u73b0 \u8fd9\u79cd\u60c5\u51b5\uff0c\u4e0d\u662f\u90a3\u4e2agl\u51fd\u6570\u7684\u95ee\u9898\uff0c\u6709\u65f6\u5019\u4f1a\u5361\u5728glTexSubImage\u4e0a\uff0c\u6709\u65f6\u5019\u4f1a\u5361\u5728glClear\u6216\u8005glSwapBuffer\u4e0a\uff0c\u90fd\u6709\u53ef\u80fd\u7684\u3002\u8fd9\u79cd\u65f6\u5019\uff0c \u4f60\u5fc5\u987b\u8981\u5728\u753b\u6bcf\u4e2aface\u4e4b\u540e\uff0c\u624b\u52a8\u53bb\u540c\u6b65\uff0c\u8981\u4e48\u7528glFinish\uff0c\u8981\u4e48\u7528glFenceSync\u8fd9\u6837\u7684sync object\u3002\u5982\u679c\u662fcompute shader\u7684\u8bdd\uff0c \u90a3\u4e48\u5c31\u4e00\u5b9a\u8981glMemoryBarrier\u3002</p> <p>\u5bf9\u4e8e\u5728premake\u4e2d\u8bbe\u5b9a\u4e86\u7684macro\u5b8f\uff0c\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u8fd0\u7528\u65f6\uff0c\u5c3d\u91cf\u4e0d\u8981\u7528#ifdef\u6c61\u67d3\u4ee3\u7801\u683c\u5f0f\uff0c\u800c\u662f\u8981\u5c3d\u91cf\u628a\u5b8f\u8f6c\u5316\u4e3aC++17\u7684inline constexpr\u53d8\u91cf\uff0c\u7136\u540e\u5728\u4ee3\u7801\u4e2d\u7528if constexpr\u53bb\u8bbf\u95ee\uff0c\u53ef\u4ee5\u53c2\u8003pch.h\u4e2d\u5bf9\u4e8e_DEBUG\u548c__FREEGLUT__\u7684\u5904\u7406\u3002 \u53ea\u4e0d\u8fc7\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u66f4\u8fdb\u4e00\u6b65\uff0c\u5f53\u6211\u4eec\u76f4\u63a5\u60f3\u5728\u4ee3\u7801\u4e2d\u9884\u5b9a\u4e49\u51e0\u4e2a\u5e38\u91cf\u65f6\uff0c\u4e5f\u4e0d\u8981\u53bb\u81ea\u5df1\u5b9a\u4e49\u5b8f\uff0c\u800c\u662f\u5168\u90e8\u4f7f\u7528constexpr auto\u6765\u4ee3\u66ff\u3002 \u5982\u679c\u53ea\u662f\u9700\u8981\u5728\u4e00\u4e2acpp\u6587\u4ef6\u5185\u90e8\u4f7f\u7528\uff0c\u5c31\u7528constexpr auto\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u9700\u8981inline\uff0c\u5982\u679c\u662f\u5b9a\u4e49\u5728header\u91cc\u4e3a\u4e86\u60f3\u8ba9\u591a\u4e2acpp\u6587\u4ef6\u90fd\u80fd \u4f7f\u7528\uff0c\u90a3\u4e48\u518d\u7528inline constexpr\u3002inline\u7684\u4f5c\u7528\u662f\u53ef\u4ee5\u8ba9\u6211\u4eec\u7ed5\u5f00ODR(One Definition Rule)\u7684\u89c4\u5219\uff0c\u4f7f\u5f97\u8be5\u53d8\u91cf\u54ea\u6015\u51fa\u73b0\u5728\u591a\u4e2a cpp\u6587\u4ef6\u4e2d\uff08\u5373\u591a\u4e2atranslation unit\u4e2d\uff09\uff0c\u4e5f\u4e0d\u4f1a\u76f8\u4e92\u51b2\u7a81\uff0c\u524d\u63d0\u662f\u8fd9\u4e9b\u53d8\u91cf\u7684\u503c\u5fc5\u987b\u5b8c\u5168\u76f8\u7b49\u3002</p> <p>Parallax Occlusion Mapping (POM) is Not suitable for non-quad surface (e.g. spheres) It's COMPLETELY unnessecary to clear the contents of an stl container in a constructor. It's unnessecary to clear the contents of an stl container in a destructor UNLESS the container contains a pointer or the order of destruction matters. If the pointer has been created using new, it still needs to be deleted first.</p> <p>Image access (ILS) ignores all sampling parameters\uff0c\u6211\u4eec\u53ea\u80fd\u6309\u6574\u6570\u7684index\u53bb\u8bbf\u95eeimage\u91cc\u9762\u7684\u503c\uff0c\u4e0d\u80fd\u6709\u4efb\u4f55\u8d85\u754c\u7684 \u6216\u8005\u662f\u5c0f\u6570\u70b9\u50cf\u7d20\u7684\u503c\u8bbf\u95ee\u3002\u4f7f\u7528ILS\u7684\u65f6\u5019\uff0c\u4e00\u822c\u6211\u4eec\u90fd\u4f1a\u7528restrict\u8fd9\u4e2amemory qualifier\uff0c\u8fd9\u6837GLSL\u53ef\u4ee5\u505a\u4e00\u4e9b\u4f18\u5316\uff0c\u901f\u5ea6\u66f4\u5feb\u3002 restrict\u662f\u8bf4\uff0c\u53ea\u80fd\u901a\u8fc7\u8fd9\u4e00\u4e2a\u53d8\u91cf\u6765\u5bf9ILS\u8fdb\u884c\u64cd\u4f5c\uff0c\u5047\u5982\u8fd9\u4e2aILS\u540c\u65f6\u88abbind\u5230\u4e86\u591a\u4e2aimage unit\u7684\u8bdd\uff08\u4e5f\u5c31\u662f\u5bf9\u5e94\u7740\u591a\u4e2a\u53d8\u91cf\uff09\uff0c \u5176\u4ed6unit\u7684\u53d8\u91cf\u662f\u65e0\u6cd5\u64cd\u7eb5\u5b83\u7684\u3002\u4e00\u822c\u6211\u4eec\u90fd\u4e0d\u8981\u628a\u4e00\u4e2aILS\u7684texture\u7ed1\u5230\u591a\u4e2aimage unit\u4e0a\u9762\u2026\u2026</p> <p>\u5982\u679c\u4f60\u7684fragment shader\u6709\u591a\u4e2aout\u53d8\u91cf\uff0c\u4f60\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u53d8\u91cf\u90fd\u6709\u88ab\u5199\u5165\u503c\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u5206\u652f\u90fd\u4f1a\u5199\u5165\u6bcf\u4e2aout\u53d8\u91cf\uff0c\u54ea\u6015\u662f0\u4e5f\u597d\uff0c\u5426\u5219 \u503c\u662fundefined\uff0c\u7279\u522b\u96bedebug</p> <p>bloom\u4e0d\u9002\u7528\u4e8e\u592a\u5c0f\u7684\u7269\u4f53\uff0c\u5426\u5219\u6bcf\u5e27\u9700\u8981blur\u7684\u50cf\u7d20\u4f1a\u6025\u5267\u53d8\u5316\uff0c\u6240\u4ee5\u4f1a\u95ea\u70c1\u7684\uff0c\u8fd9\u4e2a\u662fbloom\u672c\u8eab\u7684\u95ee\u9898\u3002bloom\u7684\u7269\u4f53\u5fc5\u987b\u8981\u7a0d\u5fae\u5927\u4e00\u4e9b\u3002 \u6709\u65f6\u5019\u95ea\u70c1\u4e5f\u548c\u6297\u952f\u9f7f\u7b97\u6cd5\u6709\u5173\uff0c\u540c\u6837\u662f\u540e\u5904\u7406\u7684\u6b65\u9aa4\uff0c\u4f46\u5982\u679cAA\u7b97\u6cd5\u5728Bloom\u4e4b\u524d\uff0cBloom\u5c31\u5f88\u96be\u627e\u51c6\u50cf\u7d20\u4e86\u3002\u8981\u4e48\u662fbloom\u9608\u503c\u8bbe\u7684\u592a\u4f4e\u4e86\uff0c \u4e5f\u6bd4\u8f83\u96be\u627e\u50cf\u7d20\u3002 AA\u548c\u5c0f\u7269\u4f53\u52a0\u5728\u4e00\u8d77\u7684\u8bdd\uff0c\u95ea\u70c1\u5c31\u66f4\u660e\u663e\u4e86\uff0c\u56e0\u4e3aBlur pass\u592a\u96be\u7cbe\u51c6\u7684\u5224\u5b9a\u50cf\u7d20\u4e86\uff0c\u6bcf\u5e27\u88abblur\u7684\u50cf\u7d20\u90fd\u5728\u53d8\u5316\u3002</p> <p>\u5982\u679c\u4f60\u7684fragment shader\u6709\u591a\u4e2aout\u53d8\u91cf\uff0c\u4f60\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u53d8\u91cf\u90fd\u6709\u88ab\u5199\u5165\u503c\uff0c\u54ea\u6015\u4f60\u53ea\u5199\u4e00\u4e2a\uff0c\u53e6\u4e00\u4e2a\u4e5f\u4f1a\u88ab\u5f71\u54cd\uff0cAny fragment color values not written by the FS will have undefined values\u3002\u5982\u679c\u7528\u4e00\u4e2aframebuffer\u7684\u4e24\u4e2atexture\u6765\u505atwo-pass Gaussian blur\u7684ping pong\uff0c\u6bcf\u6b21\u4f60\u8bfb\u5176\u4e2d\u4e00\u4e2atexture\uff0c\u5199\u5165\u53e6\u4e00\u4e2atexture\uff0c\u56e0\u4e3a\u8bfb\u7684\u90a3\u4e2a\u4e0d\u80fd\u52a8\uff0c\u6240\u4ee5\u53ea\u80fd\u5199\u5165\u4e00\u4e2aout\u53d8\u91cf\uff0c\u8fd9\u6837\u5c31\u662f\u9519\u8bef\u7684\u6709 \u95ee\u9898\u7684\u3002\u6b63\u786e\u7684\u505a\u6cd5\u662f\uff0c\u4f60\u7684fbo\u53ea\u80fd\u7528\u4e00\u4e2arender target\uff0c\u5bf9\u5e94\u7684\u53ea\u6709\u4e00\u4e2aout\u53d8\u91cf\uff0c\u7136\u540e\u6bcf\u6b21ping\u6216\u8005pong\u7684\u65f6\u5019\uff0c \u7528<code>glDrawBuffers()</code>\u53bb\u5207\u6362\u5199\u5165\u7684texture\u3002</p> <p>\u5f53\u4f60\u4f7f\u7528\u4e86perspective projection\u7684\u65f6\u5019\uff0c\u4f60\u4f1a\u53d1\u73b0\u573a\u666f\u4e2d\u8fb9\u7f18\u7269\u4f53\u4f1a\u6709\u4e9bdistorted\uff0c\u6bd4\u5982\u4e00\u4e2acube\u5728\u8fb9\u7f18\uff0c\u6a2a\u8fb9\u4f1a\u6bd4\u7ad6\u8fb9\u957f\u5f88\u591a\uff0c \u8fd9\u4e2a\u4e0d\u662fbug\uff0c\u662f\u6b63\u5e38\u7684\uff0c\u540c\u65f6\u548c\u4f60\u7684\u76f8\u673afov\u6709\u5173\uff0c\u73b0\u5b9e\u4e16\u754c\u91cc\u5176\u5b9e\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u4f60\u4ece\u4e0d\u540c\u7684\u89d2\u5ea6\u62cd\u7167\uff0c\u6709\u4e0d\u540c\u7684projection matrix\uff0c \u6709\u65f6\u5019\u80fd\u663e\u817f\u957f\uff0c\u6709\u65f6\u5019\u80fd\u663e\u8138\u5927\uff0c\u6240\u4ee5\u4f60\u8981\u53bb\u627e\u89d2\u5ea6\u3002</p> <p>}</p> <p>void Std140Std430() {     GPU\u9a71\u52a8\u7684\u5b9e\u73b0\u662f\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u56fe\u5f62API\u80cc\u540e\uff0c\u6709\u5927\u91cf\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b97\u6cd5\uff0c\u6bd4\u5982\u8457\u540d\u7684prefix sum\u7b97\u6cd5\u3002     \u4e3a\u4ec0\u4e48\u8981\u6709std140,std430\u8fd9\u6837\u7684layout\u9650\u5236\uff0c\u56e0\u4e3aGPU\u662f\u5e76\u884c\u7ed3\u6784\u7684\uff0cmemory\u5fc5\u987b\u6ee1\u8db3\u5b83\u7684\u5e76\u884c\u7ed3\u6784\u624d\u80fd\u8fd0\u4f5c\u548c\u52a0\u901f\u3002\u719f\u6089\u4e86GPU\u7684\u5185\u90e8\u539f\u7406     \u7ed3\u6784\u4e4b\u540e\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u5f88\u5bb9\u6613\u7406\u89e3\u4e86\u3002\u5bf9\u4e8estd140\u7684UBO\u6765\u8bf4\uff0c\u6bcf\u4e2a\u975earray\u7684uniform\u7684aligned offset\u548csize\u6211\u4eec\u90fd\u5df2\u7ecf\u4e86\u89e3\u4e86\uff0c\u800c\u5982\u679c     \u67d0\u4e2auniform\u6210\u5458\u662farray\uff0c\u5728\u4e0d\u8003\u8651double\u7cbe\u5ea6\u7684\u60c5\u51b5\u4e0b\uff0c\u65e0\u8bba\u8be5array\u7684member\u662fscalar\u8fd8\u662fvector\uff0cthe alignment will always     be rounded up to the base alignment of a vec4\u3002\u6bd4\u5982\u8bf4\uff0c\u65e0\u8bba\u8fd9\u4e2auniform\u662fint[]\u8fd8\u662fuint[]\u8fd8\u662ffloat[]\u8fd8\u662fbool[]\uff0c\u6bcf\u4e2a     element\u90fd\u4f1a\u5360\u636evec4\u4e5f\u5c31\u662f16\u5b57\u8282\u7684\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u8bf4\u771f\u6b63\u7684\u6570\u636e\u662f\u5728\u6bcf\u4e2avec4\u957f\u5ea6\u7684x\u7684\u4f4d\u7f6e\uff0c\u540e\u9762\u7684yzw\u90fd\u662fpadding\u3002\u518d\u6bd4\u5982\u8bf4\uff0c\u65e0\u8bba\u8fd9\u4e2a     uniform\u662fvec3[]\u8fd8\u662fivec2[]\u8fd8\u662fivec3[]\u8fd8\u662fvec4[]\uff0c\u6bcf\u4e2aelement\u4e5f\u8fd8\u662f\u4f1a\u5360\u636evec4=16\u5b57\u8282\u7684\u957f\u5ea6\uff0c\u4e8e\u662fvec3\u7684\u771f\u6b63\u6570\u636e\u662f\u5728\u6bcf\u4e2a     vec4\u957f\u5ea6\u7684xyz\u7684\u4f4d\u7f6e\uff0c\u800cw\u662fpadding\u3002\u901a\u5e38\uff0c\u6211\u4eec\u6c38\u8fdc\u90fd\u4e0d\u4f1a\u9700\u8981\u7528\u5230double\u7cbe\u5ea6\u7684\u7c7b\u578b\uff0c\u90a3\u4e48\u53ef\u4ee5\u5b89\u5168\u7684\u8ba4\u4e3a\uff0c\u53ea\u8981\u662farray\uff0c\u6bcf\u4e2aarray     element\u90fd\u4e00\u5b9a\u662fvec4\u7684\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f4N=16\u5b57\u8282\u3002\u5047\u5982\u6709double\u7cbe\u5ea6\uff0c\u6bcf\u4e2aarray element\u7684\u957f\u5ea6\u53ef\u80fd\u66f4\u5927\uff0c\u6bd4\u5982dvec3\u4f1a\u88abpad\u5230dvec4\u7684     \u957f\u5ea6\uff0c\u4e5f\u5c31\u662f8N=32\u5b57\u8282\u3002</p> <p>SSBO\u65e2\u53ef\u4ee5\u7528std140\uff0c\u4e5f\u53ef\u4ee5\u7528std430\u3002\u4e00\u822c\u4e4b\u6240\u4ee5\u7528std430\uff0c\u662f\u56e0\u4e3aSSBO\u5b58\u50a8\u7684\u6570\u636e\u975e\u5e38\u5927\uff0c\u8981\u5c3d\u91cf\u907f\u514dpadding\u6d6a\u8d39\u6389\u7684\u5185\u5b58\u7a7a\u95f4\u3002 std430\u76f8\u5bf9\u4e8e140\u7684\u4e3b\u8981\u533a\u522b\u5c31\u5728\u4e8e\uff0c\u5bf9\u4e8eSSBO\u4e2d\u7684\u67d0\u4e2aarray\u6210\u5458\uff0c\u5f53\u5b83\u7684\u7c7b\u578b\u662fscalar\u6216\u8005vector\u7684\u65f6\u5019\uff0c\u6bcf\u4e2aarray element\u5e76\u4e0d\u4f1a\u88ab padded\u5230vec4=16\u5b57\u8282\u7684\u957f\u5ea6\u3002\u8fd9\u91cc\u7684array element\u5e76\u4e0d\u662f\u6ca1\u6709\u4efb\u4f55padding\uff0c\u53ea\u662fpadding\u66f4\u5c11\u66f4\u8282\u7ea6\uff0c\u6240\u4ee5std430\u7684SSBO\u76f8\u5bf9\u4e8e std140\u800c\u8a00\uff0c\u6570\u636e\u5728\u5185\u5b58\u4e2dare more tightly packed\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u662ffloat[]\uff0c\u6216\u8005\u662fint[]\uff0cuint[]\uff0c\u90a3\u4e48\u6bcf\u4e2aarray element\u7684\u957f\u5ea6\u5c31\u662fN=4\u5b57\u8282\uff0c\u6ca1\u6709padding\u3002\u5982\u679c\u662fvec2[]\uff0c\u5219\u662f2N=8\u5b57\u8282\uff0c\u5982\u679c\u662fvec4[]\uff0c\u5219\u662f4N=16\u5b57\u8282\u3002\u4f46\u5982\u679c\u662fvec3[]\u7684\u8bdd\uff0c\u6bcf\u4e2a array element\u4f1a\u88abpadded\u5230vec4\uff0c\u4e5f\u5c31\u662f4N=16\u5b57\u8282\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u771f\u6b63\u7684vec3\u6570\u636e\u662f\u5728\u6bcf\u4e2avec4\u957f\u5ea6\u7684xyz\u7684\u4f4d\u7f6e\u3002\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u4e60\u60ef\u662f\uff0c \u6c38\u8fdc\u4e0d\u8981\u53bb\u4f7f\u7528\u4efb\u4f553\u7684\u7c7b\u578b\uff0c\u6bd4\u5982ivec3\uff0cvec3\u6216\u8005mat3\uff0c\u800c\u662f\u8981\u4e48\u4f7f\u7528vec2\uff0c\u8981\u4e48\u4f7f\u7528vec4\uff0c\u8fd9\u6837\u505a\u4e0d\u4ec5\u662f\u4e3a\u4e86\u907f\u514d\u8003\u8651padding\u7684\u9ebb\u70e6\uff0c \u51cf\u5c11\u7a0b\u5e8fbug\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u8fbe\u5230\u63d0\u901f\u7684\u6548\u679c\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86vec4\u6765\u66ff\u4ee3vec3\uff0c\u90a3\u4e48hardware\u5c31\u4e0d\u7528\u53bb\u989d\u5916\u6dfb\u52a0\u5904\u7406padding\uff0c\u6240\u4ee5vec4\u8981\u6bd4 vec3\u7684\u901f\u5ea6\u5feb\u5f88\u591a\uff01</p> <p>\u5728\u4f7f\u7528UBO\u548cSSBO\u65f6\uff0c\u6700\u597d\u7684\u505a\u6cd5\u662f\uff0c\u5047\u88c5\u6240\u6709\u76843-element\u7c7b\u578b\u90fd\u4e0d\u5b58\u5728\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528vec3\uff0civec3\uff0cuvec3\uff0cmat3\uff0cimat3 \u8fd9\u6837\u7684\u7c7b\u578b\u3002\u6211\u4eec\u8981\u4e48\u4f7f\u7528bool\uff0cuint\uff0cfloat\u8fd9\u6837\u7684scalar\uff0c\u8981\u4e48\u4f7f\u75282-element\u548c4-element\u7684vec\u4ee5\u53camat\uff0c\u8fd9\u6837\u53ef\u4ee5\u6d88\u9664\u8bb8\u591a\u9ebb\u70e6\u3002 \u6bd4\u5982\u8bf4\uff0cIf you want arrays of vec3s, then make them arrays of vec4s\u3002\u518d\u6bd4\u5982\u8bf4\uff0cIf you want a vec3 + a float\uff0c \u5e76\u4e14\u8fd8\u60f3\u5c3d\u53ef\u80fd\u7684\u8282\u7701\u7a7a\u95f4\uff0c\u90a3\u4f60\u5c31\u624b\u52a8\u7684\u53bbpack\u6570\u636e\uff0c\u628a\u5b83\u4eec\u6324\u5728\u4e00\u4e2avec4\u53d8\u91cf\u91cc\uff0c\u7136\u540e\u7528xyz\u6210\u5458\u53bb\u8bbf\u95eevec3\u7684\u6570\u636e\uff0c\u7528w\u6210\u5458\u53bb\u8bbf\u95eefloat\u7684\u6570\u636e\u3002</p> <p>\u53e6\u5916\uff0c\u6c38\u8fdc\u4e0d\u8981\u5728UBO\u548cSSBO\u4e2d\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684struct\u7c7b\u578b\uff0c\u4e0d\u4ec5\u5f88\u96be\u505a\u5bf9\uff0c\u800c\u4e14\u672a\u6765\u5347\u7ea7\u5230SPIR-V\u548cVulkan\u7684\u65f6\u5019\u5f88\u53ef\u80fd\u4f1a\u6709\u9ebb\u70e6\u3002\u6bd4\u5982SSBO\uff0c \u5047\u5982\u4f60\u9700\u8981\u4f20\u4e00\u4e2astruct\u7684\u6570\u636e\uff0c\u4e0d\u8981\u53bb\u5b9a\u4e49\u4e00\u4e2a\u5305\u542bstruct[]\u7684SSBO\uff0c\u800c\u662f\u628astruct\u62c6\u5f00\u6765\uff0c\u6bcf\u4e2astruct\u7684\u6210\u5458\u5355\u72ec\u653e\u5728\u4e00\u4e2aSSBO \u7684\u6bd4\u5982float[]\u5f53\u4e2d\uff0c\u7528\u591a\u4e2aSSBO\u6765\u5904\u7406\u3002</p> <p>\u5728GPU\u7f16\u7a0b\u4e2d\uff0c\u6ce8\u610fmemory layout\u59cb\u7ec8\u90fd\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u59cb\u7ec8\u8981\u6709\u8fd9\u6837\u4e00\u4e2a\u6982\u5ff5\uff0c\u5927\u6982\u660e\u767d\u6570\u636e\u5728GPU\u4e2d\u662f\u5982\u4f55\u5b58\u50a8\u7684\u3002 \u672a\u6765\u4e3b\u6d41\u7684GPU architectures\u5728\u5f80\u65b0\u7684\u8d8b\u52bf\u8f6c\u578b\uff0cGPUs made today are all single scalar architectures with the design emphased on strong superscalar vectorization\uff0c\u6240\u4ee5\u672a\u6765\u6bd4\u8f83\u65b0\u7684Graphics API\u5f53\u4e2d\uff0c\u53ef\u80fd\u4f1a\u6709\u4e9b\u53d8\u5316\uff0c\u4f46\u76ee\u524d \u6765\u8bf4\u6211\u4eec\u901a\u5e38\u8fd8\u662f\u8ba4\u4e3a\uff0cGPUs typically work with vectorized type</p> <p>}</p> <p>void Blending() {     https://www.andersriggelsen.dk/glblendfunc.php     glBlendEquation     glBlendEquationi     glBlendFuncSeparate     glBlendFuncSeparatei     glBlendFunc     glBlendFunci     glBlendColor }</p> <p>void BufferObjects() {     UBOs are up to 16KB in size, while SSBOs are up to 128MB or even larger     UBOs are faster, SSBOs are slower     shaders do not have write access to UBOs, UBOs are set by C++ application and readonly in the shader     however, shaders can write to SSBOs directly in GLSL, depending on if writeonly or readonly is used.</p> <p>UBO\u548cSSBO\u90fd\u5c5e\u4e8eindexed buffer\uff0c\u5b83\u4eec\u662f\u4e00\u4e2abuffer\uff0c\u540c\u65f6\u5728GLSL\u548cOpenGL\u7684\u72b6\u6001\u673a\u4e2d\uff0c\u6709\u4e00\u4e2a\u552f\u4e00\u8bc6\u522b\u7684index\uff08\u5373binding point\uff09\u3002 \u5173\u4e8e\u5b83\u4eec\u7684binding\u64cd\u4f5c\uff0c\u662f\u901a\u8fc7\u4e24\u4e2abind\u51fd\u6570\u6765\u5b9e\u73b0\u7684\uff1aglBindBuffer()\u4ee5\u53caglBindBufferBase()\uff0c\u6216\u8005\u4e5f\u53ef\u4ee5\u7528glBindBufferRange() \u6765\u53ea\u7ed1\u5b9a\u4e00\u90e8\u5206\u7684data\uff0c\u4f46\u6211\u4eec\u5e76\u4e0d\u9700\u8981\uff0c\u53ea\u8981\u524d\u4e24\u4e2a\u51fd\u6570\u5c31\u597d\u4e86\u3002\u7136\u800c\u5b83\u4eec\u6bd4\u8f83\u5bb9\u6613\u88ab\u6df7\u6dc6\uff0c\u8fd9\u91cc\u6f84\u6e05\u4e00\u4e0b\u3002</p> <p>\u4ee5UBO\u4e3a\u4f8b\uff0c\u5bf9\u4e8eglBindBuffer() and glBindBufferBase()\uff0c\u6211\u4eec\u90fd\u9700\u8981\u6307\u5b9a GL_UNIFORM_BUFFER \u4e3atarget\uff0c\u4f46\u4e24\u8005\u5e76\u4e0d\u91cd\u590d\uff0c\u5b83\u4eec \u5b8c\u5168\u662f\u7528\u4e8e\u4e0d\u540c\u7684purposes\uff0c\u9002\u7528\u4e8e\u4e0d\u540c\u7684context\u3002glBindBuffer()\u8bf4\u7684\u662f\u628a\u5f53\u524d\u7684UBO\u7ed1\u5b9a\u5230OpenGL\u7684\u53ef\u5199\u5185\u5b58\u533a\u4e2d\uff0c\u8fd9\u6837\u6211\u4eec\u63a5\u4e0b\u6765\u5c31 \u53ef\u4ee5\u7528glBufferData(),glBufferSubData()\u6216\u8005\u662f\u5bf9\u5e94\u7684DSA\u7248\u672cglNamedBufferSubData()\u53bb\u4fee\u6539\u8fd9\u4e2aUBO\u7684\u6570\u636e\u4e86\uff0c\u4e5f\u5c31\u662f\u5199\u5165\u6570\u636e\u5230 UBO\u4e2d\uff0c\u5e76\u4e14\u8ba9\u8fd9\u4efd\u6570\u636e\u88abupload\u5230GPU\u3002\u7136\u800c\uff0c\u8fd9\u6837\u505a\u53ea\u662f\u66f4\u65b0\u4e86UBO\u7684\u6570\u636e\uff0c\u6211\u4eec\u8fd8\u65e0\u6cd5\u5728GLSL\u4e2d\u53bbread\u8bbf\u95ee\u5b83\u3002By contrast\uff0c glBindBufferBase()\u8bf4\u7684\u662f\uff0c\u6211\u5e76\u4e0d\u5173\u5fc3\u8fd9\u4e2aUBO\u6709\u6ca1\u6709\u6570\u636e\uff0c\u6709\u4ec0\u4e48data\uff0c\u4e5f\u4e0d\u4f1a\u53bb\u52a8\u5b83\uff0c\u6211\u53ea\u7ba1\u628a\u5b83\u548c\u67d0\u4e2abinding point\u5173\u8054\u5728\u4e00\u8d77\uff0c \u8ba9\u7528\u6237\u53ef\u4ee5\u5728GLSL\u4e2d\uff0c\u901a\u8fc7reference\u5b9a\u4e49\u5728\u8fd9\u4e2abinding point\u7684uniform block\u6765\u8bbf\u95ee\u5b83\u7684\u6570\u636e\uff0c\u5e76\u5728shader\u7684main()\u51fd\u6570\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u3002</p> <p>\u6240\u4ee5\u8bf4\uff0cglBindBuffer()\u53ea\u662f\u7ed1\u5b9aUBO\u7528\u4e8e\u66f4\u65b0data\uff0c\u800cglBindBufferBase()\u662f\u628a\u8fd9\u4e2aUBO\u5173\u8054\u5230GLSL\u4e2d\u67d0\u4e2abinding point\u7684uniform block\u8ba9\u4eba\u53ef\u4ee5\u8bbf\u95ee\u3002\u6240\u4ee5\u4e24\u8005\u90fd\u662f\u5fc5\u987b\u7684\uff0c\u54ea\u4e2a\u90fd\u4e0d\u80fd\u7701\u7565\uff08\u9664\u975e\u7528DSA\uff09\u3002glBindBufferRange()\u4e5f\u7c7b\u4f3c\uff0c\u53ea\u662f\u628a\u8fd9\u4e2aUBO\u4e2d\u7684\u4e00\u90e8\u5206data\u5173\u8054 \u5230\u67d0\u4e2abinding point\u3002\u540c\u6837\u7684\u89c4\u5219\u4e5f\u9002\u7528\u4e8eSSBO\u548cTFB\uff0c\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u8bf4\u660e\uff1a https://www.khronos.org/opengl/wiki/Buffer_Object#Binding_indexed_targets</p> <p>\u5173\u4e8eglBindBuffer() and glBindBufferBase()\u7684\u533a\u522b\uff0c\u67d0\u4e9b\u4eba\u8fd8\u4f1a\u63d0\u5230block index\u7684\u6982\u5ff5\uff0c\u6bd4\u5982\u8fd9\u4e2a\u89e3\u91ca\uff1a https://stackoverflow.com/questions/54955186/difference-between-glbindbuffer-and-glbindbufferbase \u53c2\u8003link\u4e2d\u7684figure\u56fe\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0cblock indices\u53ea\u4e0d\u8fc7\u662funiform blocks\u5728\u67d0\u4e2a\u5177\u4f53\u7684shader\u4e2d\u7684\u4e0b\u6807\u7d22\u5f15\uff0c\u4e5f\u5c31\u662f\u63cf\u8ff0\u4e00\u4e2a uniform block\u5728\u67d0\u4e2a\u7ed9\u5b9a\u7684shader\u4e2d\u662f\u7b2c\u51e0\u4e2a\u88ab\u58f0\u660e\u7684block\uff0c\u5c31\u548c\u4e00\u4e2a\u5143\u7d20\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u4e00\u6837\uff0c\u5b8c\u5168\u53d6\u51b3\u4e8e\u4f60\u5728shader\u91cc\u600e\u4e48\u6309\u987a\u5e8f\u58f0\u660e\u7684\u3002 \u5bf9\u4e8e\u6211\u4eec\u6765\u8bf4\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u6bcf\u4e2auniform block\uff0c\u90fd\u4e00\u5b9a\u4f1a\u663e\u5f0f\u5730\u6307\u5b9a\u5b83\u7684binding point\uff0c\u6240\u4ee5\u5176\u5b9e\u6211\u4eec\u5e76\u4e0d\u9700\u8981block index\u8fd9\u4e2a\u6982\u5ff5\uff0c \u4e0d\u7528\u7ba1\u3002\u5047\u5982\u6211\u4eec\u6ca1\u6709\u663e\u5f0f\u7684\u53bbspecify layout(binding=xxx)\uff0c\u90a3\u4e48\u624d\u4f1a\u9700\u8981\u53bb\u67e5\u8be2\u4e00\u4e2a\u4e2ablock\u7684block index\uff0c\u518d\u53bb\u67e5\u8be2\u8be5block index\u5bf9\u5e94\u7684binding point\u3002\u800c\u6211\u4eec\u5df2\u7ecf\u81ea\u5df1\u5b9a\u4e49\u4e86binding point\uff0c\u5c31\u4e0d\u9700\u8981\u4efb\u4f55\u67e5\u8be2\u4e86\u3002</p> <p>\u5728\u4f7f\u7528DSA\u7684\u60c5\u51b5\u4e0b\uff0cUBO\u548cSSBO\u8fd9\u6837\u7684indexed buffer\uff0c\u662f\u5b8c\u5168\u4e0d\u9700\u8981glBindBuffer()\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u7ed1\u5b9a\u5230target\u800c\u76f4\u63a5\u628a data\u66f4\u65b0\u5230buffer\u4e2d\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u4e00\u4e2aglBindBufferBase()\u5c31\u8db3\u591f\u4e86\u3002\u5e76\u4e14\uff0c\u5982\u679c\u6211\u4eec\u662f\u663e\u5f0f\u7684\u6307\u5b9aUBO\u548cSSBO\u5728GLSL\u4e2d\u7684binding point\uff0c \u6bcf\u4e2ashader\u4e2d\u90fd\u4fdd\u6301\u5b83\u7684binding point\u4e00\u81f4\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5728\u521b\u5efabuffer\u65f6\u8c03\u7528glBindBufferBase()\uff0c\u5373\u53ef\u4e00\u52b3\u6c38\u9038\uff0c\u540e\u9762\u53ea\u7528DSA\u66f4\u65b0 \u6570\u636e\u5373\u53ef\uff0c\u518d\u4e5f\u4e0d\u9700\u8981\u53bb\u7ba1bind\uff0c\u6240\u4ee5UBO\u548cSSBO\u7684\u7c7b\u91cc\u9762\uff0c\u6839\u672c\u5c31\u4e0d\u9700\u8981Bind()\u4ee5\u53caUnbind()\u7684\u65b9\u6cd5\u3002</p> <p>\u8bf4\u5b8c\u4e86bind\u7684\u95ee\u9898\uff0c\u8865\u5145\u4e00\u4e0b\u6240\u6709buffer\uff08\u5305\u62ec\u975eindexed\u7684buffer\uff09\u6574\u4f53\u4e0a\u662f\u5982\u4f55\u5904\u7406data\u7684\u3002 \u5bf9\u4e8e\u6bcf\u4e2abuffer\uff0c\u4ee5\u524d\u7684\u65b9\u5f0f\u662f\uff0c\u6211\u4eec\u7528glGenBuffer()\u8fd9\u4e00\u7c7b\u7684\u65b9\u6cd5\u53bb\u521b\u5efabuffer object\uff0c\u7136\u540e\u9a6c\u4e0aglBindBuffer()\uff0c\u8d81\u7740\u7ed1\u5b9a\u7684\u65f6\u5019 \u53bbglBufferData\u5206\u914d\u5185\u5b58\u5e76\u521d\u59cb\u5316data\uff0c\u518d\u89e3\u7ed1\uff0c\u968f\u540e\u6bcf\u5e27\uff0c\u90fd\u9700\u8981\u5148\u91cd\u65b0bind\u8d77\u6765\uff0c\u7528glBufferSubData()\u66f4\u65b0data\uff0c\u518dunbind\u3002 \u6709\u4e86DSA\u4ee5\u540e\uff0c\u73b0\u4ee3\u7684\u65b9\u5f0f\u662f\uff0c\u5148\u7528glCreateBuffer()\u8fd9\u4e00\u7c7b\u7684\u65b9\u6cd5\u53bb\u521b\u5efa\u5e76\u540c\u65f6\u521d\u59cb\u5316\u5bf9\u8c61\uff0c\u518d\u7528glBufferData\u5206\u914d\u5185\u5b58\uff0c\u968f\u540e\u540c\u6837\u53bb\u66f4\u65b0 \u6570\u636e\uff0c\u81f3\u4e8e\u6bcf\u5e27\u9700\u4e0d\u9700\u8981bind\uff0c\u53d6\u51b3\u4e8e\u662f\u54ea\u79cdbuffer\uff0c\u600e\u4e48\u7528\u3002\u7136\u800c\uff0c\u9700\u8981\u8bf4\u660e\u4e00\u4e0b\u73b0\u4ee3API\u7684\u4e0d\u540c\u3002</p> <p>\u9996\u5148\uff0c\u5728\u7528\u4e86DSA\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u6254\u6389\u6240\u6709\u7684glBindBuffer()\uff0c\u7528DSA\u7684\u65b9\u5f0f\u53bb\u66ff\u4ee3\u5b83\uff0c\u53ea\u4e0d\u8fc7\u5bf9\u4e8e\u67d0\u4e9bbuffer\uff0c\u6211\u4eec\u53ef\u80fd\u4e0d\u4e86\u89e3DSA\u7684\u60c5\u51b5 \u4e0b\u8be5\u600e\u4e48\u53bbcall\u3002\u6bd4\u5982\u4f60\u4f1a\u53d1\u73b0\uff0c\u6211\u4eec\u7684VBO\u548cIBO\u90fd\u6ca1\u6709bind\u548cunbind\u65b9\u6cd5\uff0c\u56e0\u4e3aVAO\u4e2d\u4f7f\u7528\u7684\u90fd\u662fDSA\u65b9\u6cd5\u53bbSetVBO\u548cSetIBO\uff0c\u6240\u4ee5\u53ea\u9700\u8981 VAO\u6709\u4e2abind unbind\u7684\u65b9\u6cd5\u5c31\u884c\u4e86\uff0c\u5176\u4ed6\u4e00\u4e9b\u6bd4\u8f83\u5c11\u7528\u7684buffer\u53ef\u80fd\u8981\u7814\u7a76\u4e00\u4e0b\u3002</p> <p>\u5176\u6b21\uff0cglBufferData()\u548cglBufferSubData()\uff0c\u90fd\u53ef\u4ee5\u7528\u6765\u66f4\u65b0\u6570\u636e\uff0c\u4e00\u4e2a\u66f4\u65b0\u5168\u90e8\u6570\u636e\uff0c\u4e00\u4e2a\u66f4\u65b0\u90e8\u5206\u6570\u636e\uff0c\u4f46\u5982\u679c\u75280\u4f5c\u4e3aindex\uff0c\u7528\u6574\u4e2a buffer\u7684size\u4f5c\u4e3asize\uff0cglBufferSubData()\u662f\u53ef\u4ee5\u5b8c\u5168\u66ff\u4ee3\u524d\u8005\u7684\u3002\u9700\u8981\u6ce8\u610f\uff0c\u5b83\u4eec\u4e24\u4e2a\u6709\u4e2a\u91cd\u8981\u533a\u522b\uff0c\u5c31\u662fglBufferData()\u4e0d\u4ec5\u66f4\u65b0 \u6570\u636e\uff0c\u5b83\u8fd8\u53ef\u80fd\u4f1a\u5206\u914d\u5185\u5b58\uff0c\u6bd4\u5982\u6211\u4eec\u521a\u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u7b2c\u4e00\u6b21\u8c03\u7528\u7684glBufferData()\u5c31\u4f1a\u5728GPU\u4e0a\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff0c\u800c\u4ee5\u540e\u6bcf\u5e27\u66f4\u65b0\u65f6\uff0c glBufferSubData()\u53ea\u80fd\u5728\u5df2\u7ecf\u5206\u914d\u597d\u7684\u7a7a\u95f4\u4e0a\u4fee\u6539data\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0cglBufferData()\u5219\u6ca1\u6709\u8fd9\u4e2a\u9650\u5236\uff0c\u5b83\u6bcf\u6b21\u90fd\u4f1ainvalidate\u4e4b\u524d\u5206\u914d\u7684\u5185\u5b58\uff0c \u91cd\u65b0\u5206\u914d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f20\u5165\u66f4\u5927\u7684\u6570\u636e\u91cf\u3002glBufferData can be used to update the data in a buffer object. However, this also reallocates the buffer object's storage. This function is therefore not appropriate for merely updating the contents of the allocated memory (and for immutable storage buffers, it is not possible).</p> <p>\u9664\u4e86glBufferData()\u548cglBufferSubData()\u4ee5\u5916\uff0c\u8fd8\u6709\u4e2a\u66f4\u65b0data\u7684\u65b9\u5f0f\uff0c\u53eb\u505amapping\uff0c\u60f3\u8981\u4f7f\u7528mapping\uff0c\u90a3\u4e48\u5728glBufferStorage() \u7684\u65f6\u5019\uff0c\u9996\u5148\u6211\u4eec\u5fc5\u987b\u8981\u4f20\u5165\u5f00\u542fmapping\u7684bit\uff0c\u5305\u62ecGL_MAP_READ_BIT GL_MAP_WRITE_BIT GL_MAP_PERSISTENT_BIT \u548c GL_MAP_COHERENT_BIT\u3002\u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff0c\u901a\u8fc7glMapBuffer()\u628abuffer\u7684\u5730\u5740map\u5230C++ memory space\uff0c\u8ba9\u6211\u4eec\u5f97\u5230\u4e00\u4e2aGLubyte\u7684\u6307\u9488\uff0c \u4e8e\u662f\u5728C++\u7aef\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u968f\u610f\u7684\u8bfb\u53d6\u548c\u4fee\u6539\u6570\u636e\uff08\u901a\u5e38\u662f\u7528memcpy\u4e0a\u4f20\uff09\uff0c\u6539\u5b8c\u7528\u5b8c\u4e86\u4ee5\u540e\u518dglUnMapBuffer()\u3002\u6ce8\u610fUnmap\u662f\u5fc5\u987b\u7684\uff0c\u56e0\u4e3a\u5728 buffer\u88abmap\u7684\u671f\u95f4\uff0c\u5b83\u662f\u5904\u4e8e\u4e00\u4e2a\u88ablock\u9501\u4f4f\u7684\u72b6\u6001\u7684\uff0cGPU\u7684rendering command\u5c06\u65e0\u6cd5\u4f7f\u7528\u5b83\uff08\u9664\u975e\u4f7f\u7528GL_MAP_PERSISTENT_BIT bit\uff09 glMapBuffer()\u7684\u597d\u5904\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u7075\u6d3b\u7684\u5904\u7406data\uff0c\u800c\u4e0d\u9700\u8981\u4e8b\u5148\u51c6\u5907\u597d\u4e00\u4e2aconst void data\u7684\u6570\u7ec4\u53c2\u6570\uff0c\u800c\u4e14\u5b83\u8fd8\u63d0\u4f9b\u4e86\u597d\u591aflag\u7528\u4e8e \u6307\u5b9a\u4fee\u6539\u7684\u65b9\u5f0f\uff0c\u6bd4\u5982GL_MAP_READ_BIT\uff0cGL_MAP_COHERENT_BIT\u4ec0\u4e48\u7684\uff0cglMapBuffer()\u53ef\u4ee5\u5e72\u6240\u6709glBufferSubData()\u80fd\u5e72\u7684\u4e8b\u513f\uff0c \u4f46\u5b83\u8fd8\u80fd\u5e72\u4e00\u4e9b\u522b\u7684\u4e8b\u513f\uff0c\u6bd4\u5982invalidate\u4e00\u90e8\u5206data\u4ec0\u4e48\u7684\uff0c\u529f\u80fd\u66f4\u591a\u3002\u53ef\u4ee5\u770b\u5230\uff0cglBufferSubData()\u76f8\u5f53\u4e8e\u662f\u81ea\u52a8\u6a21\u5f0f\uff0c\u800c glMapBuffer()\u662f\u7eaf\u624b\u52a8\u6a21\u5f0f\uff0c\u63a7\u5236\u6743\u66f4\u5927\u4f46\u4e5f\u9ebb\u70e6\uff0cglMapBuffer()\u7684\u574f\u5904\u5341\u5206\u660e\u663e\uff0c\u5c31\u662f\u6bd4glBufferSubData()\u64cd\u4f5c\u8d77\u6765\u4ee3\u7801\u66f4\u590d\u6742\uff0c\u4e14\u8fc7 \u7a0b\u975e\u5e38\u5bb9\u6613\u51fa\u9519\uff0c\u8981\u5206\u6e05\u695a\u6bcf\u4e2aflag\u7684\u542b\u4e49\u53cadata\u7c7b\u578b\uff0c\u5e76\u8981\u786e\u4fddmap\u7684\u671f\u95f4buffer\u4e0d\u4f1a\u88ab\u5176\u4ed6\u7ebf\u7a0b\u7684rendering command\u4f7f\u7528\uff0c\u5bb9\u6613\u5bfc\u81f4\u8bb8\u591a bug\u3002\u4ece\u6027\u80fd\u7684\u89d2\u5ea6\u6765\u8bb2\uff0cglBufferSubData()\u548cglMapBuffer()\u5e76\u4e0d\u4f1a\u6709\u660e\u663e\u7684\u533a\u522b\uff0c\u9664\u975e\u5bf9\u6027\u80fd\u8981\u6c42\u975e\u5e38\u9ad8\u518d\u53bb\u505aprofiling\uff0c\u4e24\u8005\u7684\u5dee\u522b \u6bd4\u8f83subtle\uff0c\u6d89\u53ca\u5230synchro\u540c\u6b65\u95ee\u9898\uff0c\u6d89\u53ca\u5230\u5185\u5b58\u662f\u5728C++\u7aef\u5206\u914d\u8fd8\u662f\u5728GPU\u4e0a\u76f4\u63a5\u5206\u914d\uff0c\u8fd9\u4e9b\u592a\u9ad8\u7ea7\u4e86\u6211\u4e0d\u61c2\uff0c\u603b\u4e4b\u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff0c\u53d6\u51b3\u4e8e\u4f60\u7684 \u5e94\u7528\u662fCPU bound\u7684\u8fd8\u662fGPU bound\u7684\uff0c\u5bf9\u4e8e\u6211\u4eec\u8fd9\u79cd\u666e\u901a\u7684demo\u6e32\u67d3\u5668\uff0c\u4e0d\u9700\u8981\u5173\u5fc3\u8fd9\u4e48\u590d\u6742\uff0c\u6c38\u8fdc\u5c31\u53ea\u7528glBufferSubData()\u5c31\u8db3\u591f\u4e86\u3002</p> <p>\uff08\u9664\u975e\u6211\u4eec\u8981\u7528triple buffering\uff0cPersistent Mapped Buffers\u8fd9\u79cd\u9ad8\u7ea7\u529f\u80fd\uff09</p> <p>\u5982\u679c\u9700\u8981\u5927\u91cf\u7684streaming data\uff0c\u624d\u53ef\u80fd\u8981\u7528\u5230Persistent mapping + triple buffering\uff0c\u4f46\u5176\u5b9e\u6027\u80fd\u5dee\u522b\u4e5f\u5e76\u4e0d\u5927\uff0c\u53ef\u4ee5\u53c2\u8003 https://www.cppstories.com/2015/01/persistent-mapped-buffers-benchmark/</p> <p>\u53e6\u5916\uff0c\u6709\u4e86DSA\uff0c\u73b0\u4ee3\u7684OpenGL\u8981\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528immutable data store\u6765\u66ff\u4ee3\u4f20\u7edf\u7684data store\uff0c\u8fd9\u6837GPU\u7aef\u53ef\u4ee5\u81ea\u52a8\u505a\u5f88\u591a\u4f18\u5316\u6765\u52a0\u5feb \u901f\u5ea6\u3002immutable data store\u5c31\u662f\u4f60\u548cGPU\u7ea6\u5b9a\u597d\u4e86\uff0c\u6211\u8fd9\u4e2abuffer\u5206\u914d\u4e86\u8fd9\u4e48\u5927\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u7528\u4e86\u8fd9\u79cd\u6570\u636eformat\u7b49\u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f\u56fa\u5b9a \u7684\u5c5e\u6027\u4fdd\u8bc1\u4e0d\u4f1a\u53d8\uff0c\u6211\u4e4b\u540e\u53ea\u4f1a\u66f4\u65b0data\u7684\u503c\uff0c\u7edd\u4e0d\u4f1a\u6269\u5c55\u7a7a\u95f4\u6216\u6539\u53d8\u683c\u5f0f\u4ec0\u4e48\u7684\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u8981\u5c3d\u53ef\u80fd\u7684\u907f\u514d\u4f7f\u7528glBufferData()\u5206\u914d\u7a7a\u95f4\uff0c \u800c\u662f\u7528glBufferStorage()\u6765\u66ff\u4ee3\u5b83\u3002\u6ce8\u610f\uff0cimmutable data store\u5bf9\u4e8etextures\u800c\u8a00\u5341\u5206\u91cd\u8981\uff0c\u56e0\u4e3atextures\u5f88\u5927\uff0c\u6027\u80fd\u63d0\u5347\u4f1a\u5f88\u5927\uff0c \u6211\u4eec\u4e00\u5b9a\u8981\u7528glTexStorage()\u6765\u66ff\u4ee3glTexImage()\u3002</p> <p>buffer\u7684Invalidate\u65b9\u6cd5\uff0c\u5373glInvalidateBufferSubData()\u548cdestructor\u662f\u4e0d\u540c\u7684\uff0cunlike destruction, invalidate tells the GPU to release the memory space allocated for the buffer so that it can be reused, but the object handle (id) is kept for later use.</p> <p>buffer\u7684Clear\u65b9\u6cd5\uff0cglClearNamedBufferSubData()\uff0c\u6211\u4eec\u7528GL_R8UI \u4f5c\u4e3ainternal format\uff0cGL_RED\u4f5c\u4e3aformat, GL_UNSIGNED_BYTE\u4f5c\u4e3atype\uff0c\u5e76\u4e14\u8bbe\u7f6edata\u53c2\u6570\u4e3aNULL\uff0c\u8fd9\u6837\u53ef\u4ee5\u901a\u7528\u7684fill every byte with 8 bits of zeros\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1 for both two's complement and IEEE-754 floating point, cleared values will always be 0\u3002\u6ce8\u610fsize\u53c2\u6570is measured in number of bytes\uff0c\u8fd9\u6837\u65b9\u4fbf\u6211\u4eec\u4f7f\u7528sizeof operator\u6765\u8ba1\u7b97size\u3002</p> <p>SSBO::Flush()\uff0cglFlushMappedNamedBufferRange()\u53ea\u9700\u8981\u5728\u591a\u7ebf\u7a0b\u7684\u60c5\u51b5\u4e0b\uff0c\u4e14\u4f7f\u7528\u4e86\u624b\u52a8\u7684persistent mapping\u7684\u65f6\u5019\u4f7f\u7528\uff0c \u54ea\u4e2a\u7ebf\u7a0bupdate\u4e86buffer data\uff0c\u5c31\u5728\u54ea\u4e2a\u7ebf\u7a0bcall\u3002\u5982\u679c\u6307\u5b9a\u4e86GL_MAP_COHERENT_BIT\uff0c\u6211\u4eec\u662f\u4e0d\u9700\u8981\u81ea\u5df1flush\u7684\u3002</p> <p>\u9664\u4e86\u6b63\u5e38\u7684texture\u4ee5\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u53eb\u505abuffer texture\u7684\u4e1c\u897f\uff0c\u5b83\u4e0d\u540c\u4e8etexture\u800c\u662f\u4e00\u4e2abuffer\uff0c\u4f46\u662f\u53c8\u4e0d\u5c5e\u4e8eVBO,IBO,UBO,ATC \u8fd9\u79cd\u4f20\u7edf\u7684buffer objects\u3002\u5b83\u7684target\u662f GL_TEXTURE_BUFFER\uff0c\u7b80\u5355\u6765\u8bf4\uff0ctexture buffers are only 1-dimensional, cannot do any filtering and have to be accessed by accessing explicit texels (by index), instead of normalized [0,1] floating point texture coordinates. buffer texture\u7684data\u5fc5\u987b\u6765\u6e90\u4e8e\u5176\u4ed6buffer objects\uff0c\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u628aVBO\u7684\u6570\u636eattach \u5230\u4e00\u4e2abuffer texture\u4e0a\u9762\uff0c\u7136\u540e\u5728shader\u91cc\u7528texelFetch()\u53bb\u8bbf\u95ee\u8fd9\u4e9b\u503c\u3002They are used as large 1D array data to be accessed in GLSL. \u7b80\u800c\u8a00\u4e4b\u5c31\u4e00\u53e5\u8bdd\uff0cbuffer texture\u662f\u5e9f\u7269\uff0c\u6ca1\u6709\u4e00\u70b9\u7528\uff0c\u5982\u4eca\u6211\u4eec\u6709\u4e86SSBO\u548cILS\uff0c\u6c38\u8fdc\u90fd\u4e0d\u9700\u8981\u7528\u5230\u5b83\u3002\u5b83\u53ea\u662f\u8001\u7248\u672c\u7684\u8fc7\u65f6\u4ea7\u7269\u3002</p> <p>\u4eceOpenGL3\u5f00\u59cb\uff0c\u6211\u4eec\u53ef\u4ee5\u7528Transform Feedback\u673a\u5236\uff0c\u5c06vertex shader\u6216geometry shader\u7684output\u5199\u5165\u5230TFB buffer\u4e2d\uff0c\u8fd9\u6837\u5c31 \u53ef\u4ee5\u5728\u4e0b\u4e00\u5e27\u91cd\u590d\u5229\u7528\u4e0a\u4e00\u5e27\u7684vertex\u6570\u636e\uff0c\u4e00\u4e2a\u5178\u578b\u7684\u5e94\u7528\u573a\u666f\u5c31\u662fparticle systems\u3002\u4e0d\u8fc7\u73b0\u4ee3OpenGL\uff0c\u6211\u4eec\u6709\u4e86\u66f4\u5f3a\u5927\u7684\u5de5\u5177\uff0cSSBO \u4ee5\u53caILS\uff0c\u57fa\u672c\u4e0a\u4e0d\u592a\u9700\u8981\u7528TFB\uff0c\u800c\u4e14TFB\u5728C++\u7aef\u7684setup\u4ee3\u7801\u6bd4\u8f83\u7e41\u7410\uff0c\u66f4\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u539f\u672c\u5f88\u591avertex shader\u4ee5\u53cafragment shader\u7684\u6d3b\u5206\u79bb\u51fa\u6765\uff0c\u653e\u5230compute shader\u91cc\u53bb\u505a\uff0c\u8fd9\u6837\u901f\u5ea6\u5feb\u5f88\u591a\u3002\u73b0\u4ee3\u5316\u7684bloom\u4ee5\u53caparticle systems\uff0c\u90fd\u662f\u7528compute shader \u914d\u5408SSBO/ILS\u6765\u5b9e\u73b0\u7684\u3002</p> <p>}</p> <p>void PBR\u5149\u5b66\u77e5\u8bc6() {     /* some (hopefully correct) notes for BSDF material model:</p> <ul> <li> <p>the minimum value of roughness should be clamped to a non-zero float (like 0.045) so that the specular highlight is always visible, this clamping must take place before reparametrization.</p> </li> <li> <p>metalness should be a binary value, either 0 or 1, not some floating-point number in between.</p> </li> <li>specular reflectance (F0) is chromatic for conductors and achromatic for dielectrics.</li> <li> <p>the Fresnel function can be seen as interpolating between F0 and F90, as HoV goes from 0 to 1 the view direction moves from grazing angle (90) to normal incidence (0), so the specular reflectance goes from F90 to F0.</p> </li> <li> <p>the final appearance of a material includes 2 parts: diffuse color + specular reflectance F0 for dielectrics, diffuse color is persistent and F0 is achromatic (colorless) for conductors, there is no diffuse color but F0 is chromatic (colored)</p> </li> <li> <p>the specular param controls F0, for dielectrics, it's mostly ~ 0.5, which translates to an F0 of ~ 0.04, for water, it should be 0.35, which corresponds to an F0 of 0.02, cannot be lower. for diamonds and gems that have a high F0 of 0.10 ~ 0.16, specular can vary between 0.8 ~ 1, for conductors, this param is not used because specular reflectance is only computed from the chromatic F0. No real world material has an F0 &lt; 2%, so the specular must be clamped to 0.35</p> </li> <li> <p>specular and IOR represent the same physical attribute, just in different ways, if one is known the other can be computed and deduced. For metals, the specular param has no effect because specular intensity is all about F0 (metal's albedo color). For dielectrics, it controls the specular reflectance F0. For refractive materials, the higher the IOR, the slower light will travel through the medium, so the light path is also bent more.</p> </li> <li> <p>the clear coat layer will always be isotropic and dielectric, with low roughness values.</p> </li> <li>the clear coat layer also uses Cook-Torrance microfacet BRDF, but much simpler and cheaper.</li> <li> <p>in this layer, the Smith-GGX visibility term is replaced by the Kelemen visibility function but D and F stays put, and since it's dielectric only, F0 is always set to 0.04.</p> </li> <li> <p>ambient occlusion is for occluding ambient lights, that's why it's called \"ambient\", typically it only applies to diffuse indirect lighting, such as ambient occlusion maps and dynamic SSAO, but the specular part of shading is usually not affected (not occluded).</p> </li> <li> <p>to make blending easier, RGB colors should be pre-multiplied with the alpha channel.</p> </li> <li> <p>transmission from 0 to 1 determines how transparent a refractive object (dielectric) is, wheras absorption from 0 to n determines the amount of light attenuation through the material, that is how fast the object absorbs each R/G/B component of the incoming light as light penetrates and travels through the object's interior solid volume.</p> </li> <li> <p>thickness represents the thickness of solid objects in the direction of normal, for plausible results, it should be provided per fragment (as a texture) or at least on a per-vertex basis, but for simple symmetric geometry like a sphere, we can also hack it using <code>NoV</code>. */</p> </li> </ul> <p>\u6700\u5f00\u59cb\u5b66PBR\u8fd9\u5757\u65f6\uff0c\u770b\u7684\u662flearnopengl\u7684\u6559\u7a0b\uff0c\u5b83\u548c\u4e3b\u6d41\u7684\u6e32\u67d3\u5f15\u64ce\u6bd4\u8d77\u6765\u53ea\u662f\u4e00\u4e2a\u5165\u95e8\u6559\u7a0b\uff0c\u6240\u4ee5\u5f88\u4e0d\u4e25\u8c28\uff0c\u4e5f\u4e0d\u8003\u8651\u80fd\u91cf\u635f\u5931\u4ec0\u4e48\u7684\uff0c\u4e0d\u8981\u501f\u9274\u3002 learnopengl\u4e0a\u9762\u5bf9\u4e8ediffuse\u4ee5\u53caspecular\u5149\u7167\u90e8\u5206\u7684\u6743\u91cd\u533a\u5206\uff0c\u5f88\u7b80\u5355\u7c97\u66b4\uff0c\u76f4\u63a5\u8ba1\u7b97Fresnel\u9879\u6765\u4f5c\u4e3aspecular\u7684\u6743\u91cdks\uff0c\u7136\u540e\u8bf4\u4e3a\u4e86 \u80fd\u91cf\u5b88\u6052\uff0cdiffuse\u7684\u6743\u91cdkd\u5c31\u5fc5\u987b\u662f(1 - ks)\uff0c\u4fdd\u8bc1\u52a0\u8d77\u6765\u4e3a1\uff0c\u4e5f\u6ca1\u6709\u8003\u8651multi-scattering\u7684IBL\uff0c\u4e0d\u8fc7\u5728Disney\u6700\u65e9\u671f\uff082012\u5e74\uff09 \u63d0\u51fa\u5b83\u7684PBR\u6a21\u578b\u65f6\uff0c\u8fd9\u4e2a\u505a\u6cd5\u786e\u5b9e\u662f\u5f53\u65f6\u7684state of the art\uff0c\u90a3\u4e2a\u65f6\u5019\u8fd8\u6ca1\u6709Kulla\u2014Conty\u80fd\u91cf\u5b88\u6052\u548cLagarde\u5bf9\u6b64\u7684\u8fdb\u4e00\u6b65\u6539\u8fdb\u3002</p> <p>\u5bf9\u4e8e\u65e9\u671f\u7684PBR\u548c\u73b0\u5728\u7684PBR\uff0c\u9700\u8981\u6ce8\u610f\u5230\u4e00\u4ef6\u4e8b\u60c5\u3002\u90a3\u5c31\u662f\uff0c\u6211\u73b0\u5728\u7684PBR\u7684IBL\u90e8\u5206\uff0c\u662f\u53c2\u8003Filament\u7684\u6587\u6863\u7684\uff0c\u8003\u8651\u4e86multi-scattering\u548c \u80fd\u91cf\u5b88\u6052\uff0c\u8003\u8651\u4e86\u5e03\u6599\u6750\u8d28\uff0c\u66f4\u52a0\u7684\u79d1\u5b66\u6b63\u786e\uff0c\u5bf9\u4e8ediffuse\u4ee5\u53caspecular\u90e8\u5206\u7684\u6743\u91cd\uff0c\u662f\u7528<code>E = mix(dfg.xxx, dfg.yyy, f0)</code>\u6765\u8ba1\u7b97\u7684\uff0c diffuse\u90e8\u5206\u7684\u7cfb\u6570\u5219\u662f1-E\u3002\u4e00\u4e2a\u6700\u91cd\u8981\u7684\u533a\u522b\u5c31\u662f\uff0c\u6211\u73b0\u5728\u7684IBL\u8ba1\u7b97\uff0c\u662f\u4e0d\u4f1a\u7528\u5230specular D/F/G\u5f53\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u516c\u5f0f\u7684\uff0c\u5f53\u7136Fresnel\u51fd\u6570 \u4e5f\u4e0d\u4f1a\u7528\u5230\uff0c\u6240\u6709\u7684IBL\u90e8\u5206\u7684\u8d21\u732e\uff0c\u5168\u90e8\u6765\u81ea\u4e8e\u9884\u8ba1\u7b97\u597d\u7684irradiance map\uff0cprefiltered environment map\u4ee5\u53caBRDF LUT\u3002\u5728learnopengl \u7684IBL\u91cc\u9762\uff0c\u5305\u62ec\u6700\u65e9\u671f\u7684Disney\u63d0\u51fa\u7684\u6a21\u578b\u4e2d\u7684IBL\u4e5f\u662f\uff0c\u4ed6\u4eec\u90fd\u662f\u7528\u8ba1\u7b97\u51fa\u6765\u7684Fresnel\u9879\u4f5c\u4e3aks\u7cfb\u6570\u7684\uff0cBurley\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u8fd8\u53d1\u73b0\uff0c\u7531\u4e8e\u6211\u4eec \u8ba4\u4e3aF90\u6c38\u8fdc\u7b49\u4e8e1\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u4ecegrazing angle\u53bb\u770b\u4e00\u4e2a\u54ea\u6015\u76f8\u5bf9\u6bd4\u8f83rough\u7684\u8868\u9762\u7684\u65f6\u5019\uff08\u6bd4\u5982\u5730\u677f\uff09\uff0c\u4f9d\u7136\u4f1a\u5f88\u6e05\u695a\u7684\u770b\u5230skybox\u7684\u53cd\u5c04\u7684\u5012\u5f71\uff0c \u4e5f\u5c31\u662fIBL\u7684specular\u7684\u90e8\u5206\uff0c\u4f46\u8fd9\u663e\u5f97\u5f88\u96be\u770b\u5f88\u4e0d\u771f\u5b9e\uff0c\u4e8e\u662fBurley\u63d0\u51fa\u4e86\u5728Fresnel\u51fd\u6570\u4e0a\u9762\u52a8\u624b\u811a\uff0c\u5728\u51fd\u6570\u4e2d\u8003\u8651roughness\uff0c\u628a\u672c\u6765\u4e3a1\u7684 F90 clamp\u5230(1 - roughness)\u4e5f\u5c31\u662fsmoothness\uff0c\u8fd9\u6837\u5bf9\u4e8e\u6bd4\u8f83\u7c97\u7cd9\u7684\u8868\u9762\u5c31\u4e0d\u4f1a\u6709\u660e\u663e\u7684IBL\u5012\u5f71\u4e86\u3002\uff08btw\uff0c\u5982\u679c\u4e0d\u662fIBL\u800c\u662f\u76f4\u63a5\u5149\u7167\u90e8\u5206\uff0c \u7c97\u7cd9\u7684\u7269\u4f53\u5728grazing angle\u660e\u663e\u663e\u793a\u51faspecular\u90e8\u5206\u662f\u5408\u7406\u7684\uff0c\u5e76\u4e0d\u4f1a\u9020\u6210\u89c6\u89c9\u4e0a\u4e0d\u771f\u5b9e\uff09\u3002\u90a3\u4e48\u73b0\u5728\u5462\uff0c\u5bf9\u4e8e\u6211\u7684IBL\uff0c\u6211\u6839\u672c\u5c31\u4e0d\u7528Fresnel \u51fd\u6570\uff0c\u4e5f\u5c31\u4e0d\u53ef\u80fd\u53bb\u505a\u8fd9\u4e2a\u4e8b\u60c5\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u5374\u4f1a\u5728\u8ba1\u7b97LD\u9879\u7684\u65f6\u5019\u53bb\u8003\u8651roughness\u3002LD\u662f\u600e\u4e48\u4eceprefilter_map\u4e2d\u53d6\u7684\uff1f\u6839\u636eroughness\u6765\u53d6\u3002 \u5982\u679croughness\u4e3a0\uff0c\u6211\u4eec\u53d6base level\uff0c\u968f\u7740roughness\u9010\u6e10\u589e\u52a0\uff0c\u6211\u4eec\u5f00\u59cb\u53d6\u4e0b\u9762\u7684mipmap\u5c42\uff0c\u76f4\u5230roughness\u4e3a1\u53d6\u5230\u6700\u9ad8\u5c42\u7684mipmap\u4e3a\u6b62\uff0c \u4e5f\u5c31\u662fskybox\u6700\u6a21\u7cca\u7684\u6837\u5b50\u3002\u6240\u4ee5\u8bf4\uff0c\u8fd9\u5c31\u662f\u4eceroughness\u5230LOD\u7684\u4e00\u4e2a\u6620\u5c04\uff0croughness\u4ece0\u52301\uff0c\u800cLOD\u4ece0\u5230\u6700\u9ad8\u5c42\u7684mipmap\u3002\u5927\u591a\u6570\u4eba\u505a\u8fd9\u4e2a \u6620\u5c04\uff0c\u662f\u76f4\u63a5\u7528\u7ebf\u6027\u6620\u5c04\u7684\uff0c\u5373\u7528roughness\u4e58\u4ee5\u6700\u5927\u7684mipmap level\uff0c\u5f97\u5230\u5e94\u8be5\u53d6\u54ea\u4e2alevel\u3002\u800c\u6211\u73b0\u5728\u60f3\u5728IBL\u4e2d\u8003\u8651roughness\uff0c\u5c31\u53ef\u4ee5\u7528 \u4e00\u4e2a\u975e\u7ebf\u6027\u7684\u6620\u5c04\uff0c\u7528easing function\u6765\u505a\uff0c\u6bd4\u5982\u5982\u679cease in\u5f88\u5389\u5bb3\u7684\u8bdd\uff0croughness\u7684\u5927\u90e8\u5206\u503c\u57df\u90fd\u4f1a\u5bf9\u5e94\u5230LOD\u7684base level\uff0c\u90a3\u4e48\u5373\u4f7f \u6bd4\u8f83rough\u7684\u8868\u9762\u4e5f\u80fd\u660e\u663e\u770b\u5230IBL\u7684\u53cd\u5c04\uff0c\u53cd\u8fc7\u6765\u5982\u679cease out\u7684\u5389\u5bb3\u7684\u8bdd\uff0croughness\u521a\u4ece0\u589e\u52a0\u4e00\u70b9\u70b9\uff0cLOD\u7684level\u5c31\u4f1a\u6025\u5267\u4e0a\u5347\uff0c\u4e8e\u662f\u5927\u90e8\u5206 roughness\u90fd\u4f1a\u5bf9\u5e94\u5230\u6bd4\u8f83\u9ad8\u7684mipmap\uff0cIBL\u5c31\u4f1a\u6bd4\u8f83\u6a21\u7cca\uff0c\u53ea\u6709\u5f53roughness\u5f88\u5c0f\u65f6\uff0c\u4e5f\u5c31\u662f\u8868\u9762\u975e\u5e38\u5149\u6ed1\u7684\u65f6\u5019\uff0c\u624d\u80fd\u660e\u663e\u770b\u5230IBL\u7684\u53cd\u5c04\u3002\u6240\u4ee5 \u8bf4\uff0c\u6211\u7684IBL\uff0c\u9700\u8981\u7528ease out\u51fd\u6570\u53bbsample prefilter_map\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fbe\u5230\u65e9\u671fBurley\u63d0\u51fa\u7684\u90a3\u4e2a\u540c\u6837\u7684\u6548\u679c\u3002</p> <p>\u65e9\u671f\u90a3\u4e2aIBL\u8fd8\u63d0\u5230\u4e00\u70b9\uff0c\u5c31\u662f\u5728\u8ba1\u7b97Fresnel\u7684\u65f6\u5019\uff0c\u7531\u4e8eIBL\u7684\u73af\u5883\u5149\u662f\u4ece\u56db\u9762\u516b\u65b9\u6765\u7684\uff0c\u6211\u4eec\u6ca1\u6709\u4e00\u4e2a\u5355\u72ec\u7684L\u548cH\u5411\u91cf\uff0c\u6240\u4ee5\u8981\u7528NoV\u53bb\u66ff\u4ee3 Fresnel\u51fd\u6570\u7684HoV\u53c2\u6570\uff08\u56e0\u4e3aN\u548cH\u901a\u5e38\u975e\u5e38\u63a5\u8fd1\uff09\uff0c\u800c\u73b0\u5728\u6211\u4eec\u6839\u672c\u4e0d\u9700\u8981\u8fd9\u4e2a\u4e86\u3002\u522b\u5fd8\u4e86HoV == HoL\uff0cH\u5c31\u662fL\u548cV\u7684\u534a\u7a0b\u5411\u91cf\u3002</p> <p>BSDF = BRDF + BTDF BSSRDF is way more difficult (transparency, Subsurface scattering also needs BRTF) Microfacet Cook-Torrance BRDF\u6ca1\u6709\u8003\u8651\u591a\u6b21\u6563\u5c04\uff0c\u5206\u5c42\u6750\u8d28\uff0c\u4ee5\u53ca\u884d\u5c04 BRDF\u662f\u56db\u7ef4\u7684\uff0c\u5bf9\u4e8e\u4e00\u4e2amaterial\u6750\u8d28\u800c\u8a00\uff0croughness\u548cF0\u662f\u7ed9\u5b9a\u4e86\u7684\uff0cBRDF\u53ea\u53d6\u51b3\u4e8e\u5165\u5c04\u5149Li\u548c\u51fa\u5c04\u5149Lo\uff0c\u6bcf\u4e2aL\u90fd\u662f\u7403\u9762\u4e8c\u7ef4\u7684(phi\u548c theta)\uff0c\u6240\u4ee5\u603b\u5171\u662f\u56db\u7ef4\u3002\u7b97\u4e0aroughness\u548cF0\u7684\u8bdd\uff0c\u76f8\u5f53\u4e8e\u662f\u8bf4\uff0c\u6240\u6709\u53ef\u80fd\u7684BRDF\u7684\u5408\u96c6\u7a7a\u95f4\u662f\u516d\u7ef4\u7684\u3002BSSRDF\u5219\u662f\u66f4\u9ad8\u7ef4\u7684\uff0c\u56e0\u4e3a\u5149\u5165\u5c04 \u5230\u4e00\u70b9\uff0c\u5374\u4f1a\u4ece\u9644\u8fd1\u7684\u53e6\u4e00\u70b9remit\u51fa\u6765\uff0c\u6bd4\u5982\u6b21\u8868\u9762\u53cd\u5c04\uff0c\u6240\u4ee5\u6b64\u65f6\u6211\u4eec\u4e0d\u518d\u80fd\u53ea\u8003\u8651\u5355\u72ec\u7684\u4e00\u4e2ashading point\u3002 \u5173\u4e8eBRDF\u8fd9\u5757\uff0c\u89e3\u91ca\u7684\u6700\u597d\u7684\uff1ahttps://patapom.com/blog/BRDF/BRDF%20Definition/</p> <p>IBL: local or distant probes are used, you can't always assume entities are at world center. But, we're focusing on distant environment probes, where the light is assumed to come from infinitely far away. For local light probes, we need to do IBL precomputation at multiple positions and interpolate in between at runtime.</p> <p>HDR env map\u662f\u4eceHDR\u6587\u4ef6\u8bfb\u53d6\u8fdb\u6765\u7684\uff0c\u6240\u4ee5\u989c\u8272\u503c\u662f\u5728linear color space\u7684\uff0c\u90a3\u4e48convolution\u51fa\u6765\u7684irradiance map\uff0c\u4e5f\u662f\u5728 linear colorspace\u3002\u4eceirradiance map\u4e2d\u91c7\u6837\u51fa\u6765\u7684\u503c\uff0c\u548c\u7269\u4f53\u539f\u672c\u7684albedo\u76f8\u4e58\u5373\u53ef\u5f97\u5230diffuse IBL\u7684\u90e8\u5206\uff0c\u4f46\u662f\u548c\u4ee5\u524d\u4e00\u6837\uff0c \u8fd8\u662f\u8981\u6ce8\u610falbedo\u5fc5\u987b\u505a\u8fc7sRGB\u5230linear\u7684\u8f6c\u6362\uff0c\u5426\u5219\u4e58\u51fa\u6765\u4e0d\u5bf9\u7684\u3002irradiance map\u4ee3\u8868\u7684\u5c31\u662fdiffuse\u7684\u503c\uff0c\u5c31\u662f\u4e00\u4e2a\u767d\u8272\u7269\u4f53\u7684 diffuse color\uff0cLambertian Diffuse Reflectance\u90e8\u5206\u5df2\u7ecf\u5305\u542b\u5728\u91cc\u9762\u4e86\uff0c\u6240\u4ee5\u62ff\u5230\u503c\u4ee5\u540e\uff0c\u76f4\u63a5\u4e58\u4ee5diffuse albedo\u3002\u5982\u679c\u4f60\u518d \u4e58\u4ee5PI\u5206\u4e4b\u4e00\uff0c\u7b49\u4e8e\u7b97\u4e86\u4e24\u6b21Lambertian diffuse\u7684\u6210\u5206\u3002\u5047\u5982\u662f\u7528Spherical Harmonics\uff0c\u90a3\u4e48INV_PI\u9700\u8981\u5728\u751f\u6210SH9\u7cfb\u6570\u7684\u65f6\u5019\u5c31 \u88ab\u5305\u542b\u8fdb\u53bb\uff0cINV_PI is rolled into sh9</p> <p>diffuse iraddiance map\u548cprefiltered specular env map\u7684\u5f02\u540c\u2014\u2014\u2014\u2014\u4e24\u8005\u90fd\u662f\u505aconvolution\uff0c\u505a\u7684\u662f\u4e00\u4e2a\u6a21\u7cca\u64cd\u4f5c\u3002\u7136\u800c\uff0c \u524d\u8005\u662f\u6f2b\u53cd\u5c04\uff0cblur kernel\u7684\u8303\u56f4\u662f\u6574\u4e2a\u534a\u7403\uff0c\u6240\u4ee5blur\u7684\u7a0b\u5ea6\u8981\u5927\u7684\u591a\uff0c\u51fa\u6765\u7684\u56fe\u50cf\u975e\u5e38\u7684\u6a21\u7cca\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u53ea\u9700\u8981\u8f83\u5c0f\u7684\u5206\u8fa8\u7387 \u7684\u539f\u56e0\u3002\u540e\u8005\u5462\uff0c\u5219\u662f\u955c\u9762\u53cd\u5c04\uff0c\u8fd8\u662f\u8981\u4fdd\u7559\u4e00\u90e8\u5206\u7ec6\u8282\u7684\uff0c\u4e0d\u80fd\u5168\u7cca\u6389\uff0cblur kernel\u7684\u8303\u56f4\u662f\u4e00\u4e2a\u8f83\u5c0f\u7684specular lobe\u6240\u5bf9\u5e94\u7684\u7acb\u4f53\u89d2\uff0c \u91c7\u7528\u7684\u662f\u91cd\u8981\u6027\u91c7\u6837\uff0c\u6240\u4ee5blur\u7684\u7a0b\u5ea6\u8981\u4f4e\u5f88\u591a\uff0c\u51fa\u6765\u7684\u56fe\u4f9d\u7136\u80fd\u770b\u5230\u4e00\u4e9b\u7ec6\u8282\uff0c\u5e76\u4e14\u6211\u4eec\u9700\u8981\u751f\u6210\u4e00\u7cfb\u5217mipmap\u6765\u901a\u8fc7trilinear filtering\u63d2\u503c\u4f30\u8ba10-1\u4e4b\u95f4\u7684\u4e0d\u540c\u7684specular\u8303\u56f4\uff0c\u6240\u4ee5\u5b83\u7684base level\u7684\u5206\u8fa8\u7387\u4e0d\u80fd\u592a\u5c0f\u3002\u5bf9\u5e94\u5230\u6570\u5b66\u516c\u5f0f\u4e0a\uff0c\u8bb0\u4f4f\u524d\u8005\u7684\u79ef\u5206\u91cc\u662f\u5e26 cosine\u9879\u7684\uff0c\u6240\u4ee5\u6bcf\u6b21\u91c7\u6837skybox\u7684\u7ed3\u679c\u662f\u8981\u88abcosine\u6216\u70b9\u4e58weigh\u4e00\u4e0b\u7684\uff0c\u540e\u8005\uff0c\u4e0d\u5e26cosine\u9879\uff0c\u5c31\u662f\u5bf9\u5165\u5c04\u5149Li\u7684\u79ef\u5206\u3002 \u6700\u540e\u4e00\u70b9\u533a\u522b\u662f\uff0c\u524d\u8005\u4e3a\u6f2b\u53cd\u5c04\uff0c\u6f2b\u53cd\u5c04\u4e0e\u89c2\u5bdf\u89c6\u89d2\u4e5f\u5c31\u662fview vector\u65e0\u5173\uff0c\u4ece\u56db\u9762\u516b\u65b9\u770b\u4e0a\u53bb\u90fd\u662f\u4e00\u4e2a\u503c\uff0c\u56e0\u6b64\u5728\u67e5\u627etexture\u65f6\uff0c\u662f\u7528 \u6cd5\u7ebfN\u53bb\u67e5\u627e\u7684\u3002\u800c\u955c\u9762\u53cd\u5c04\u7684\u503c\u53d6\u51b3\u4e8e\u89c2\u5bdf\u89d2\u5ea6\uff0c\u4e0d\u540c\u89d2\u5ea6\u770b\u7ed3\u679c\u4e0d\u4e00\u6837\uff0c\u5047\u5982L\u56fa\u5b9a\uff0c\u90a3\u4e48\u5177\u4f53\u773c\u775b\u770b\u5230\u7684\uff0c\u662fL\u7ecf\u8fc7N\u53cd\u5c04\u4e3aR\uff0cR\u5411\u91cf\u6253\u8fdb\u6211\u4eec \u7684\u773c\u775b\u91cc\u7684\u503c\u3002\u800c\u7531\u4e8e\u5149\u8def\u53ef\u9006\u6027\uff0c\u6240\u4ee5\u5f53\u89c2\u5bdf\u5411\u91cfV\u56fa\u5b9a\u65f6\uff0cV\u7ecf\u8fc7N\u53cd\u5c04\u4e3aR = reflect(-V, N)\uff0c\u76f8\u5f53\u4e8e\u662f\u672c\u6765\u7684\u5165\u5c04\u5149L\uff0c\u8fd9\u624d\u662f\u6211\u4eec\u5e94\u8be5 \u7528\u6765\u53bb\u67e5\u627etexture\u7684\u5411\u91cf\uff0c\u662f\u7528R\u800c\u4e0d\u662f\u7528N\u3002\u4e0d\u8981\u518d\u641e\u9519\u955c\u9762\u53cd\u5c04\u4e86\uff0c\u955c\u9762\u53cd\u5c04\u4e0d\u7528N\u53bb\u67e5\u627e\uff0c\u60f3\u8c61\u4e00\u4e0b\u4f60\u5728\u6e56\u8fb9\u770b\u591c\u666f\uff0c\u4f60\u770b\u5230\u7684\u80af\u5b9a\u662f\u8fdc\u5904 \u7684\u9ad8\u697c\u5927\u53a6\u548c\u5c71\u7684\u5012\u5f71\uff0c\u800c\u4e0d\u662f\u6e56\u9762\u6b63\u4e0a\u65b9\u5929\u7a7a\u4e2d\u7684\u661f\u661f\u6708\u4eae\u3002</p> <p>\u5728analytical light\u5149\u7167\u7684\u90e8\u5206\uff0c\u6211\u4eec\u77e5\u9053\u6bcf\u4e2a\u5149\u6e90\u7684\u65b9\u5411L\uff0c\u4e5f\u77e5\u9053\u89c2\u5bdf\u89d2\u5ea6V\uff0c\u6240\u4ee5\u53ef\u4ee5\u6c42\u51fahalf\u5411\u91cfH\u3002\u5728IBL\u5149\u7167\u4e2d\uff0c\u5149\u6765\u81ea\u4e8e\u56db\u9762 \u516b\u65b9\uff0c\u7531\u4e8e\u6ca1\u6709\u4e00\u4e2a\u5177\u4f53\u5355\u72ec\u7684L\uff0c\u6211\u4eec\u4e0d\u77e5\u9053L\uff0c\u53ea\u77e5\u9053V\uff0c\u5c31\u65e0\u6cd5\u5f97\u5230H\u3002\u6b64\u65f6\uff0c\u4e00\u5207\u548cH\u6709\u5173\u7684\u89d2\u5ea6\u90fd\u662f\u7528N\u53bb\u8fd1\u4f3c\u7684\uff0c\u6bd4\u5982HoV\u6362\u6210NoV\u3002</p> <p>by convention, all vectors are pointing outwards, from the shading point (fragment) to the light source, doing so is convenient.</p> <p>\u73af\u5883\u5149\u8fd9\u5757\u76ee\u524d\u8fd8\u662f\u4e3b\u8981\u7528IBL\u6765\u505a\u7684\uff0c\u6709\u7684\u7528SH\u6765\u5904\u7406diffuse\uff0c\u4f46\u662fSH\u662f\u65e0\u6cd5\u5904\u7406specular\u7684\uff0c\u6240\u4ee5\u8fd8\u662f\u8981IBL\uff0c\u9664\u975e\u6574\u4e2a\u573a\u666f\u53ea\u6709 diffuse\u7684\u7269\u4f53\u3002\u7528\u4e86SH\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u4e0d\u9700\u8981irradiance map\u4e86\uff0c\u800c\u662f\u53ef\u4ee5\u901a\u8fc7SH\u51fd\u6570\u5728runtime\u53bbevaluate\u6bcf\u4e2ashading point\u7684 diffuse\u90e8\u5206\u3002SH\u7684\u5177\u4f53\u505a\u6cd5\u548c\u4ee3\u7801\uff0c\u5728OpenGL Development Cookbook 2013\u8fd9\u672c\u4e66\u91cc\u9762\u6709\u7684\u3002\u4e5f\u53ef\u4ee5\u53c2\u8003Filament\uff0c\u5728libs\u6587\u4ef6\u5939 \u91cc\u6709C++\u4ee3\u7801\u5b9e\u73b0\u3002\u6bd4IBL\u66f4\u52a0\u597d\u7684\u65b9\u6cd5\uff0c\u662fLTC shading\uff0c\u5b83\u662f\u7528\u6765\u7b97\u9762\u5149\u6e90area light\u7684shading\u7684\uff0c \u5355\u4f4d\u534a\u7403\u4e0a\u5bf9\u5e38\u65701\u79ef\u5206\u662f2pi\uff0c\u5355\u4f4d\u7403\u4e0a\u79ef\u5206\u662f4pi\u3002\u8fd9\u4e2a\u5c31\u662f\u7403\u4f53\u7684\u8868\u9762\u79ef\u516c\u5f0f\u3002\u5355\u4f4d\u534a\u7403\u4e0a\u5bf9cos\u79ef\u5206\u662fpi\u3002</p> <p>radiance is irradiance from a specific direction (due to the per solid angle definition) diffuse\u5176\u5b9e\u5728\u7269\u7406\u4e0a\u5c31\u662fsubsurface scattering(SSS)\uff0c\u53ea\u4e0d\u8fc7\u6211\u4eec\u901a\u5e38\u7528BRDF\u628a\u5b83\u7b80\u5316\u4e86\u3002\u771f\u6b63\u7684\u6b21\u8868\u9762\u53d1\u5c04\u662f\uff0c\u5165\u5c04\u5149\u8fdb\u5165\u7269\u4f53 \u8868\u9762\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u7ecf\u8fc7\u7269\u8d28\u5185\u90e8\u539f\u5b50\u7684\u4e00\u7cfb\u5217\u78b0\u649e\u53cd\u5f39\uff0c\u4ece\u53e6\u4e00\u4e2a\u70b9remit\u51fa\u53bb\uff0c\u8fd9\u4e2a\u70b9\u4e00\u822c\u5c31\u5728\u539f\u6765\u7684\u5165\u5c04\u70b9\u7684\u9644\u8fd1\uff0c\u53ef\u80fd\u5dee\u51e0\u4e2a\u50cf\u7d20\uff0c\u4f46 \u8fdb\u51fa\u5e76\u4e0d\u662f\u540c\u4e00\u4e2a\u70b9\u3002\u800cBRDF\u505a\u7684\u7b80\u5316\u5c31\u662f\uff0c\u5c3d\u7ba1\u5165\u5c04\u70b9\u51fa\u5c04\u70b9\u4e0d\u4e00\u6837\uff0c\u4f46\u4ed6\u4eec\u7684\u4f4d\u7f6e\u5f88\u8fd1\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u5728\u4e00\u4e2a\u50cf\u7d20\u5185\uff0c\u76f8\u5f53\u4e8e\u4e24\u8005\u7684\u8ddd\u79bb\u5c0f \u5230\u53ef\u4ee5\u5ffd\u7565\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u5165\u5c04\u51fa\u5c04\u90fd\u5728\u540c\u4e00\u4e2a\u70b9\uff0c\u5c31\u53ef\u4ee5\u7528\u7b80\u5355\u7684BRDF\u6765\u63cf\u8ff0\uff0c\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u70b9locally\u7684\u8ba1\u7b97shading\uff0c\u8df3\u8fc7\u4e86SSS\u3002 \u7136\u800c\uff0c\u5982\u679c\u4e00\u4e2apixel\u5f88\u5c0f\uff08\u9ad8\u5206\u8fa8\u7387\uff09\uff0c\u4e14\u5165\u5c04\u51fa\u5c04\u70b9\u7684\u8ddd\u79bb\u660e\u663e\u5927\u4e8epixel\u7684\u5927\u5c0f\uff0c\u5c31\u4e0d\u80fd\u7528BRDF\u7684diffuse\u6765\u63cf\u8ff0\u4e86\uff0c\u9700\u8981\u7528BSDF= BRDF+BTDF\u6765model\uff0c\u4e5f\u5c31\u662f\u6b21\u8868\u9762\u53cd\u5c04\u3002\u800c\u5982\u4f55\u53bbmodel\u8fd9\u4e2a\u8ddd\u79bb\u4ee5\u53ca\u5165\u5c04\u51fa\u5c04\u65b9\u5411\u7684\u53d8\u5316\uff0c\u9700\u8981\u7528\u5230BSSRDF\u3002</p> <p>IOR\u662f\u4e00\u4e2a\u590d\u6570\uff0c\u5b9e\u6570\u90e8\u5206\u4ee3\u8868\u4e86\u5149\u5728\u8be5\u5747\u5300\u4ecb\u8d28\u4e2d\u7684\u4f20\u64ad\u901f\u5ea6\uff0c\u865a\u6570\u90e8\u5206\u4ee3\u8868\u6709\u591a\u5c11\u5149\u4f1a\u88ab\u8be5\u4ecb\u8d28\u5438\u6536\u3002IOR\u662f\u7528\u4e8e\u63cf\u8ff0\u4efb\u4f55\u5747\u5300\u4ecb\u8d28\u7684\u3002 reflect\u53cd\u5c04\uff0crefraction\u6298\u5c04\uff0cdiffraction\u884d\u5c04\u3002\u3002\u3002\u3002</p> <p>Light is composed of electromagnetic waves. electric and magnetic always come in pairs. So the optical properties of a substance are closely linked to its electric properties = magnetic properties.</p> <p>\u6ce8\u610freflection\u548crefraction\u662f\u4e92\u65a5\u7684\uff0c\u88ab\u5fae\u8868\u9762bounce off\u6389\u7684\u5149\u5b50\u5c31\u4e0d\u53ef\u80fd\u8fdb\u5165\u7269\u4f53\u8868\u9762\uff0c\u6240\u4ee5\u5f53\u6709refraction\u7684\u65f6\u5019\uff0c\u5b83\u53ea\u4f1a \u4ecediffuse\u7684\u90e8\u5206\u4e2d\u5077\u53d6\u4e00\u4e9b\u8d21\u732e\uff0c\u548cdiffuse\u5206\u62c5\u8d21\u732e\uff0c\u4f46\u4e0d\u4f1a\u5f71\u54cdspecular\u90e8\u5206\u7684\u9ad8\u5149\u3002 \u5bf9\u4e8erefraction\uff0c\u9700\u8981\u6ce8\u610f\uff0ctransmission\u57280-1\u4e4b\u95f4\uff0c\u4ee3\u8868refraction\u4f1a\u4ecediffuse\u4e2d\u5077\u53d6\u591a\u5927\u6bd4\u4f8b\uff0c\u8fd9\u53d6\u51b3\u4e8e\u7269\u4f53\u7684\u900f\u660e\u7a0b\u5ea6\u3002 \u800c\u5f53\u7ed9\u5b9atransmission\u4e86\u4ee5\u540e\uff0c\u5177\u4f53\u7684\u6298\u5c04\u60c5\u51b5\u7531\u5269\u4e0b\u51e0\u4e2a\u53c2\u6570\u51b3\u5b9a\uff0c\u5176\u4e2dthickness\u662fvolume\u7684\u6700\u6df1\u7684\u539a\u5ea6\uff0c\u6bd4\u5982\u7403\u4f53\u5c31\u662f\u76f4\u5f84\uff0c\u800c transmittance\u662f\u4e00\u4e2alinear RGB\u7684\u503c\uff0c\u4ee3\u8868\u5149\u5728\u4ecb\u8d28\u4e2d\u4f20\u64ad\u65f6\uff0c\u54ea\u4e9b\u6ce2\u957f\u7684\u989c\u8272wave\u4f1a\u88ab\u5438\u6536\uff08\u5269\u4e0b\u7684\u7ee7\u7eed\u4f20\u64ad\uff09\uff0c\u8fd9\u4e2a\u989c\u8272\u53ef\u4ee5\u548c\u5fae \u8868\u9762\u7684base color\u5373albedo\u76f8\u8fd1\uff0c\u4f46\u4e5f\u53ef\u4ee5\u548calbedo\u5b8c\u5168\u4e0d\u540c\uff0c\u5b83\u53d6\u51b3\u4e8e\u5177\u4f53\u662f\u54ea\u79cd\u4ecb\u8d28\uff0c\u6bd4\u5982\u4f60\u7ed9\u4e00\u5757\u51b0\u5757\u5916\u9762\u6d82\u4e86\u5c42\u756a\u8304\u9171\uff0c\u8868\u9762\u7684 albedo\u662f\u7ea2\u8272\uff0c\u4f46\u51b0\u5757\u5185\u90e8\u7684transmittance\u4ecd\u7136\u662f\u767d\u8272\uff0c\u56e0\u4e3aH2O\u4f1a\u628a\u5149\u5b8c\u5168\u5438\u6536\u3002\u53e6\u5916\uff0c\u8981\u77e5\u9053IOR\u548c\u7269\u4f53\u7684\u5bc6\u5ea6\u6709\u5173\uff0c\u5bc6\u5ea6\u8d8a\u5c0fIOR \u8d8a\u63a5\u8fd11\uff08\u5982\u771f\u7a7a\u548c\u7a7a\u6c14\uff0c\u4ee5\u53ca\u5404\u79cd\u5176\u4ed6\u6c14\u4f53\uff09\uff0c\u5149\u88ab\u6298\u5c04\u7684\u6bd4\u8f83\u5c0f\uff0c\u5bc6\u5ea6\u8d8a\u5927IOR\u4e5f\u8d8a\u5927\uff08\u6bd4\u5982\u6c34\u94f6\uff0c\u6c5e\u6e29\u5ea6\u8ba1\uff09\uff0c\u5149\u88abbent\u5f2f\u66f2\u7684\u975e\u5e38\u5389\u5bb3\u3002 \u9700\u8981\u7279\u522b\u6ce8\u610f\u4e00\u4e0btr_distance\u8fd9\u4e2a\u53c2\u6570\uff0c\u5373transmission distance\uff0c\u5b83\u4ee3\u8868\u7684\u662f\u5149\u5728\u8be5\u79cd\u4ecb\u8d28\u4e2d\u53ef\u4ee5\u4f20\u64ad\u7684\u8ddd\u79bb\uff0c\u8fd9\u4e2a\u8ddd\u79bb\u548cvolume \u7684thickness\u662f\u65e0\u5173\u7684\uff0c\u800c\u4e14\u901a\u5e38\u8981\u5927\u7684\u591a\uff0c\u5bf9\u4e8e\u8d8a\u662f\u5bc6\u5ea6\u5927dense\u7684\u4ecb\u8d28\uff08\u9ad8IOR\uff09\uff0c\u5149\u53d7\u5230\u7684\u963b\u529b\u8d8a\u5927\uff0c\u88abbent\u5f2f\u66f2\u7684\u8d8a\u5389\u5bb3\uff0c\u80fd\u91cf\u548c\u989c\u8272 attenuate\u8870\u51cf\u7684\u4e5f\u8d8a\u5feb\uff0c\u6240\u4ee5tr_distance\u4f1a\u6bd4\u8f83\u5c0f\uff0c\u53cd\u8fc7\u6765\uff0c\u5bf9\u4e8e\u5bc6\u5ea6\u5c0fsparse\u7684\u4ecb\u8d28\uff08\u4f4eIOR\uff09\uff0c\u5149\u53d7\u5230\u7684\u963b\u529b\u5f88\u5c0f\uff0c\u51e0\u4e4e\u4e0d\u600e\u4e48\u88ab\u5f2f \u66f2\uff0c\u80fd\u91cf\u548c\u989c\u8272\u7684\u8870\u51cf\u4e5f\u8d8a\u6162\uff0c\u6240\u4ee5tr_distance\u975e\u5e38\u5927\uff0c\u5728\u771f\u7a7a\u4e2d\u662f\u65e0\u7a77\u5927\uff0c\u5373\u5149\u5728\u5b87\u5b99\u4e2d\u53ef\u4ee5\u65e0\u9650\u4f20\u64ad\uff0c\u5728\u7a7a\u6c14\u91cc\u4e5f\u5f88\u5927\uff0c\u4f46\u4f1a\u88ab\u7a7a\u6c14\u4e2d\u7684 \u6742\u8d28\u6162\u6162\u7a00\u91ca\uff0c\u5728\u6c34\u91cc\u5219\u76f8\u5bf9\u5c0f\u4e00\u4e9b\uff0c\u6240\u4ee5\u518d\u6e05\u6f88\u7684\u6d77\u57df\uff0c\u9633\u5149\u4e5f\u4f20\u4e0d\u5230\u6d77\u5e95\uff0c\u6c34\u4e0b20\u7c73\u5de6\u53f3\u7684\u5730\u65b9\u5c31\u53d8\u5f97\u5f88\u6697\u4e86\u3002</p> <p>DFG or DFV\u7684\u672c\u8d28\uff0c\u5176\u5b9e\u5c31\u662fFresnel effect\uff0c\u5c31\u662fspecular reflectance\uff0c\u91cd\u70b9\u5728\u4e8eFresnel\u9879\u7684\u503c\u3002\u800cN\u9879\u548cG/V\u9879\u7684\u4f5c\u7528\u53ea\u662f\u7528 \u4e8e\u51b3\u5b9aFresnel effect\u5728\u4ec0\u4e48\u5730\u65b9\u51fa\u73b0\uff0c\u4f1a\u4e0d\u4f1a\u88ab\u906e\u6321\uff0c\u53ef\u89c1\u5ea6\u5982\u4f55\u3002\u8bb0\u4f4fDFG\u4ee3\u8868\u7684\u5c31\u662fspecular\u3002</p> <p>\u5728IBL\u4e2d\uff0csplit-sum\u6240\u4f30\u8ba1\u7684\u6e32\u67d3\u65b9\u7a0b\uff0c\u901a\u5e38\u5199\u6210\uff08\u53c2\u8003 GAMES202_Lecture_05.pdf\uff09 Lo = diffuse                 + specular    = irradiance_map (or SH9) + prefiltered_map * BRDF_LUT;    = irradiance_map (or SH9) + LD * DFG; \u5176\u4e2d\uff0cirradiance_map\u662f\u5e26cosine\u9879\u7684\uff0c\u79ef\u5206\u548c\u5e38\u6570diffuse\u4e58\u79ef\uff0c\u6216\u8005\u7528SH9\u5b9e\u65f6\u4f30\u8ba1\uff08SH9\u7cfb\u6570\u5728C++\u7aef\u9884\u8ba1\u7b97\u540e\u4f5c\u4e3auniform array\u4f20\u7ed9GLSL\uff09 prefiltered environment map\u901a\u5e38\u88ab\u53eb\u505a LD \u9879\uff0c\u56e0\u4e3a\u5b83\u4e0d\u542bcosine\uff0c\u5c31\u53ea\u662f\u5206\u5b50\u5bf9 L \u79ef\u5206\uff0c\u518d\u9664\u4ee5\u5206\u6bcd\u5bf9 D \u7a7a\u79ef\u5206 BRDF LUT\u901a\u5e38\u88ab\u53eb\u505a DFG \u9879\uff0c\u56e0\u4e3a\u5b83\u5c31\u662f\u5bf9BRDF\u4e58\u4ee5cosine\u79ef\u5206\uff0c\u800cBRDF\u5c31\u662fDFG. split-sum\u7684\u6838\u5fc3\u601d\u60f3\uff0c\u5c31\u662f\u628aFresnel\u63d0\u5230\u524d\u9762\u53bb\uff0c\u8ba9DFG\u518d\u62c6\u6210\u4e24\u9879\u7684\u548c\uff0c\u53bb\u6253\u8868\uff0c\u5982\u679c\u662f\u5e03\u6599\u7684\u8bdd\uff0c\u518d\u591a\u52a0\u4e0a\u4e00\u9879\u3002 \u91cd\u70b9\u7684\u662fDFG\u7684\u524d\u4e24\u9879\u600e\u4e48\u5206\uff0cGAMES 202\u5df2\u7ecf\u8bb2\u8fc7\u4e86\uff0c\u4f46\u5206\u6cd5\u4e0d\u662f\u552f\u4e00\u7684\uff0cFilament\u4e3a\u4e86\u8003\u8651\u80fd\u91cf\u5b88\u6052\uff0c\u6362\u4e86\u4e00\u79cd\u5206\u6cd5\uff0c\u4f7f\u5f97\u53ef\u4ee5\u76f4\u63a5\u7528 DFG.xxx\u548cDFG.yyy\u8ba1\u7b97\u51fa\u80fd\u91cf\u8865\u507f\u7684\u7cfb\u6570\u3002\u6700\u7ec8\u7684\u5b8c\u6574\u5f62\u5f0f\u662f Lo = SH9 + LD * (DFG.xxx * (1 - F0), DFG.yyy * F0) * energyCompensation    = SH9 + LD * mix(DFG.xxx, DFG.yyy, F0) * energyCompensation; \u6700\u540e\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684mix(DFG.xxx, DFG.yyy, F0)\uff0c\u4e5f\u5c31\u662fDFG\u7684\u5177\u4f53\u503c\uff0c\u5982\u4e0a\u6240\u8ff0\uff0c\u5c31\u662f\u5bf9BRDF\u4e58\u4ee5cosine\u79ef\u5206\uff0c\u5b83\u6240\u4ee3\u8868\u7684\u542b\u4e49\u662f\uff0c \u5f53Li=1\uff0c\u4e5f\u5c31\u662f\u56db\u9762\u516b\u65b9\u8fc7\u6765\u7684\u90fd\u662ffull white\u7684\u5149\u65f6\uff0c\u5f53\u524dshading point\u6839\u636eBRDF\u79ef\u5206\u51fa\u6765\u662f\u591a\u5c11\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u4ee3\u8868\u4e86specular\u90e8\u5206 \u7684\u603b\u80fd\u91cf E\uff0c\u5982\u679c E &lt; 1\uff0c\u5c31\u8bf4\u660e\u6709\u80fd\u91cf\u635f\u5931\uff08\u56e0\u4e3aSmith G\u9879\u53ea\u8003\u8651\u4e86single bounce\uff09\uff0c\u800c\u635f\u5931\u7684\u80fd\u91cf\u662f(1 - E)\uff0c\u6211\u4eec\u4f1a\u901a\u8fc7 energyCompensation\u628a\u5b83\u8865\u56de\u6765\u3002\u53e6\u5916\uff0c\u8fd9\u4e5f\u4ee3\u8868\u4e86\uff0cspecular\u90e8\u5206\u7684\u7cfb\u6570\u6c38\u8fdc\u662f E\uff0c\u5269\u4e0b\u7684\u7cfb\u6570(1 - E)\uff0c\u662f\u5206\u7ed9diffuse\u7684\uff0c\u8fd9\u6837\u505a\u624d \u79d1\u5b66\uff0c\u800c\u4e0d\u662f\u50cflearnopengl\u90a3\u6837naive\u7684\u628aFresnel F\u9879\u5f53\u6210\u662fks\uff0c\u628a\uff081 - F\uff09\u5f53\u6210kd\u3002\u5047\u5982\u6709refraction\u7684\u8bdd\uff0cspecular\u5e76\u4e0d\u4f1a\u53d7\u5f71 \u54cd\uff0c\u8be5\u6709Fresnel\u9ad8\u5149\u7684\u5730\u65b9\u8fd8\u662f\u6709\uff0c\u56e0\u6b64refraction\u9700\u8981\u4ecediffuse\u4e2d\u53bb\u5077\u6765\u4e00\u4e9bcontribution\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6b64\u65f6specular\u7684\u7cfb\u6570\u8fd8\u662f E\uff0c \u800cdiffuse\u548crefraction\u5408\u8d77\u6765\u7684\u7cfb\u6570\u662f\uff081 - E\uff09\uff0c\u5177\u4f53\u7684\u8bdd\uff0crefraction\u7684\u7cfb\u6570\u662f\uff081 - E\uff09 transmission\uff0c\u800cdiffuse\u7684\u7cfb\u6570\u662f \uff081 - E\uff09 (1 - transmission). \u8fd9\u6b21IBL\u5e94\u8be5\u5f7b\u5e95\u61c2\u4e86\uff0c\u7406\u89e3\u900f\u5f7b\u4e86\u3002</p> <p>specular\u90e8\u5206\uff0c\u65e0\u8bba\u662fIBL\u8fd8\u662f\u76f4\u63a5\u7684analytical\u5149\u6e90\u8d21\u732e\uff0c\u90fd\u662f\u7528Cook-Torrance BRDF\u8ba1\u7b97\u7684\uff08IBL\u7684\u8bdd\u662f\u5728prefiltered envmap \u4e2d\u5229\u7528\u4e86Cook-Torrance\uff09\uff0c\u800cCook-Torrance\u5e76\u4e0d\u80fd\u8003\u8651multiscattering\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u4f1a\u6709\u80fd\u91cf\u635f\u5931\uff0c\u5f53\u7269\u4f53\u8d8a\u662fdiffuse\u6216\u8d8arough\uff0c multiscattering\u51fa\u73b0\u7684\u9891\u7387\u8d8a\u5927\uff0c\u635f\u5931\u7684\u80fd\u91cf\u4e5f\u8d8a\u591a\u3002Filament\u7684\u89e3\u51b3\u65b9\u6848\u662f\u7528Kulla-Conty17+Largarde18\u7684paper\u63d0\u5230\u7684\u529e\u6cd5\uff0c\u4ed6\u4eec \u53d1\u73b0\u80fd\u91cf\u8865\u507f\u7684\u8ba1\u7b97\u6b63\u597d\u53ef\u4ee5\u548cIBL\u5171\u4eab\uff0c\u6240\u4ee5\u5728\u505aIBL\u9884\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u7528\u4e86\u6211\u76ee\u524d\u505a\u7684\u8fd9\u79cd\u65b9\u5f0f\u53bb\u62c6\u5206split-sum\uff08\u8fd9\u548cGAMES 202\u4ee5\u53ca Unreal\u63d0\u51fa\u7684\u539f\u7248split-sum\u516c\u5f0f\u4e0d\u540c\uff0c\u4f46\u9a8c\u7b97\u540e\u662f\u7b49\u4ef7\u7684\uff09\uff0c\u4ece\u800c\u53ef\u4ee5\u901a\u8fc7IBL\u7684BRDF LUT\u987a\u5e26\u8ba1\u7b97\u51faenergy compensation\u9879\u7684\u7cfb\u6570Ec\uff0c \u4fdd\u5b58\u5728pixel.Ec\u4e2d\u3002\u4e4b\u540e\uff0c\u4e3a\u4e86\u8865\u507f\u80fd\u91cf\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728Fr\u4e0a\u9762\u4e58\u4ee5Ec\u5373\u53ef\uff0c\u6ce8\u610f\u53ea\u5728Fr\u4e0a\u9762\u4e58\uff0c\u56e0\u4e3a\u635f\u5931\u7684\u80fd\u91cf\u6765\u6e90\u4e8especular\u90e8\u5206\u3002\u53e6\u5916 \u6ce8\u610f\uff0c\u867d\u7136Ec\u662f\u4eceIBL\u4e2d\u5f97\u6765\u7684\uff0c\u4f46\u5b83\u53ea\u662f\u5229\u7528\u4e86IBL\u7684\u8ba1\u7b97\u8fc7\u7a0b\u642d\u4e86\u4e2a\u4fbf\u8f66\uff0c\u4f7f\u5f97\u53ef\u4ee5\u4eceBRDF LUT\u4e2d\u5f97\u5230\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u53ea\u548c\u6750\u8d28\u672c\u8eab\u7684BRDF\u6709 \u5173\uff0c\u548cIBL\u65e0\u5173\uff0c\u56e0\u6b64\uff0cFr*Ec\u4e0d\u662f\u53ea\u5728Evaluate IBL\u7684\u65f6\u5019\u5e94\u7528\uff0c\u5728\u7b97\u70b9\u5149\u6e90\u8fd9\u4e9banalytical\u5149\u6e90\u7684\u65f6\u5019\u4e5f\u8981\u5e94\u7528\uff0c\u90fd\u662f\u8981\u4e58\u4ee5Ec\u7684\u3002</p> <p>Diffuse\u90e8\u5206\uff0c\u6211\u4eec\u901a\u5e38\u76f4\u63a5\u7528Lambertian\u6216\u8005Burley\u8ba1\u7b97Fd\uff0c\u4e0d\u7528\u5957\u7528Cook-Torrance BRDF\uff0c\u6bd4\u8f83\u7b80\u5355\u3002\u5bf9\u4e8eFd\uff0c\u4e5f\u4e0d\u7528\u8003\u8651\u4ec0\u4e48\u80fd\u91cf \u635f\u5931\u3002\u7136\u800c\u5b9e\u9645\u4e0a\u8981\u77e5\u9053\u4e00\u4e0b\uff0c\u5176\u5b9e\u6f2b\u53cd\u5c04\u662f\u6709\u4e00\u5c0f\u90e8\u5206\u662f\u88abreflect\u6389\u7684\uff0c\u800cLambertian\u8fd9\u79cd\u5e76\u4e0d\u4f1a\u8003\u8651\uff0c\u6240\u4ee5\u5176\u5b9eFd\u662f\u6709\u80fd\u91cf\u8fc7\u5269\u7684\uff0c\u5373 energy gain\uff0c\u6b63\u786e\u7684\u505a\u6cd5\u5e94\u8be5\u53bb\u51cf\u6389\uff08attenuate\uff09\u4e00\u90e8\u5206\u7684diffuse\uff0c\u4e5f\u5c31\u662f\u5728Fd\u4e0a\u9762\u4e58\u4ee5\u53e6\u4e00\u4e2aEa\u7cfb\u6570\u3002\u53ea\u4e0d\u8fc7\uff0c\u8fd9\u90e8\u5206\u6bd4\u8f83\u5fae\u5c0f\uff0c\u4e5f \u6ca1\u4eba\u63d0\u5230\uff0c\u901a\u5e38\u76f4\u63a5\u5ffd\u7565\u5373\u53ef\u3002</p> <p>\u5173\u4e8eAmbient Occlusion\uff0c\u7b80\u79f0AO\uff0c\u8981\u660e\u786e\u4e00\u4e0b\u3002\u5b83\u4ee3\u8868\u7684\u662f\u73af\u5883\u5149\u906e\u853d\uff0c0\u7684\u8bdd\u8bf4\u660eIBL\u5bf9\u672c\u6750\u8d28\u7684\u8d21\u732e\u4e3a0\uff0c\u672c\u6750\u8d28\u4e0d\u53d7IBL\u5f71\u54cd\uff0c1\u7684\u8bdd \u8bf4\u660e\u5b8c\u5168\u5438\u6536IBL\u7684\u8d21\u732e\u3002\u90a3\u4e48\u4ec0\u4e48\u624d\u662fIBL\u7684\u8d21\u732e\u5462\uff1f\u8d8a\u662f\u5149\u6ed1\u7684\u7269\u4f53\uff0c\u7b49\u4e8e\u8bf4\u8d8a\u662fspecular\uff0c\u90a3\u4e48\u8d8a\u662f\u4f1a\u5927\u91cf\u53cd\u5c04IBL\u7684\u73af\u5883\u5149\uff0c\u53d7IBL\u5f71\u54cd \u8d8a\u5927\u3002\u53cd\u8fc7\u6765\u8d8a\u662fdiffuse\u7684\u7269\u4f53\uff0c\u8d8a\u7c97\u7cd9\uff0c\u73af\u5883\u5149\u5927\u90e8\u5206\u90fd\u88ab\u6750\u8d28\u5438\u6536\u6389\u4e86\u6216\u8005\u5728multiscattering\u4e2d\u88ab\u906e\u6321\u6389\u4e86\uff0c\u56e0\u6b64\u53d7IBL\u5f71\u54cd\u8d8a\u5c0f\u3002 \u6240\u4ee5\u8981\u7406\u89e3\uff0c\u6240\u8c13\u7684AO\uff0c\u5b9e\u9645\u4e0a\u662fdiffuse AO\uff0c\u5373AO\u662f\u53ea\u9488\u5bf9diffuse\u7684\u90e8\u5206\u5e94\u7528\u7684\uff0c\u6240\u4ee5\u662f\u4e58\u5728Fd\u4e0a\uff0c\u548cFr\u65e0\u5173\u3002\u73af\u5883\u5149\u906e\u853d\uff0c\u6211\u4eec\u4e0d\u4f1a\u53bb \u906e\u853dspecular\u7684\u90e8\u5206\uff0cspecular\u6709\u7684\u53ea\u662f\u7269\u4f53\u672c\u8eab\u51e0\u4f55\u906e\u6321\u7684\u4e00\u4e9b\u9634\u5f71\uff0c\u90a3\u662fshadow\u800c\u4e0d\u662fAO\u3002\u7531\u4e8eAO\u662f\u53ea\u9488\u5bf9\u5fae\u8868\u9762\u6a21\u578b\u7684\uff0c\u65e0\u6cd5\u8003\u8651\u5b8f\u89c2 \u4e0a\u7269\u4f53\u7684\u51e0\u4f55\u906e\u6321\u5173\u7cfb\uff0c\u56e0\u6b64\u5927\u7684\u906e\u6321\u6211\u4eec\u7528shadow\u505a\uff0c\u5f88\u591a\u5c0f\u7684\u5462\uff0c\u5c31\u7528SSAO\u548cGTAO\u8fd9\u79cd\u53bb\u89e3\u51b3\uff0c\u4f46\u8fd9\u4e9b\u90fd\u53ea\u662fhack\uff0c\u7269\u7406\u4e0a\u6b63\u786e\u7684\u505a\u6cd5\u5728 \u5b66\u4e60\u5149\u8ffd\u7684\u65f6\u5019\u5c31\u77e5\u9053\u4e86\u3002\u4e5f\u6709\u4eba\u63d0\u5230\u8fc7specular AO\u7684\u6982\u5ff5\uff0c\u4e0d\u8fc7\u8fd9\u90e8\u5206\u7684\u8d44\u6599\u5f88\u5c11\uff0c\u76ee\u524d\u8fd8\u4e0d\u592a\u7406\u89e3\uff0c\u4e00\u822c\u90fd\u4e0d\u4f1a\u8003\u8651\u3002</p> <p>}</p> <p>void CRTMemoryLeakCheck() {     \u4e3a\u4e86\u68c0\u6d4b\u5185\u5b58\u6cc4\u6f0f\u5e76\u80fd\u8ba9\u62a5\u544a\u663e\u793a\u6cc4\u9732\u7684\u5177\u4f53\u811a\u672c\u548c\u884c\u6570\uff0c\u6309\u7167CRT\u7684\u6587\u6863\uff0c\u9700\u8981\u52a0\u4e0a\u4ee5\u4e0b\u4ee3\u7801     #ifdef _DEBUG         #define new new ( _NORMAL_BLOCK , FILE , LINE )     #else         #define new new     #endif     \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5b9a\u4e49\u4e86_CRTDBG_MAP_ALLOC\u5b8f\u4e4b\u540e\uff0c\u4ee5\u4e0a\u7684\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5e76\u4e0d\u662f\u653e\u5728main\u91cc\u9762\u5c31\u53ef\u4ee5\u4e86\u3002\u6bcf\u4e00\u4e2a\u4f60\u60f3\u8981\u62a5\u544a\u663e\u793a\u884c\u6570\u7684\u811a\u672c\u91cc\uff0c     \u90fd\u8981\u5728\u5f00\u5934\u52a0\u4e0a\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5426\u5219\u4e0d\u4f1a\u663e\u793a\u884c\u6570\uff0c\u53ea\u4f1a\u663e\u793a\u4e00\u4e2a\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e2a\u811a\u672c\u91cc\u90fd\u52a0\u4e0a\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5\u52a0\u5728pch.h\u91cc\u3002     \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u53ea\u6709\u5f53\u6211\u4eec\u77e5\u9053\u5b58\u5728\u5185\u5b58\u6cc4\u9732\u7684\u65f6\u5019\uff0c\u518d\u53bb\u7528\u8fd9\u6bb5\u4ee3\u7801debug\u5b9a\u4f4d\u6cc4\u9732\u7684\u4f4d\u7f6e\uff0c\u53ea\u52a0\u5728\u53ef\u7591\u7684\u811a\u672c\u91cc\uff0c\u89e3\u51b3\u4e86\u95ee\u9898\u4e4b\u540e\u5c31\u5220\u9664\u3002     release build\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u5f00\u542fCRT\u62a5\u544a\uff0c\u4f46\u8fd9\u4e0d\u662f\u91cd\u70b9\u3002\u91cd\u70b9\u662f\uff0c\u901a\u8fc7\u5b9a\u4e49\u5b8f\u7684\u65b9\u5f0f\u53bb\u8986\u76d6new\u64cd\u4f5c\u7b26\uff0c\u662f\u4e00\u4e2a\u975e\u5e38\u5371\u9669\u548cugly\u7684\u505a\u6cd5\uff0c\u8981     \u6781\u529b\u907f\u514d\uff0c\u4e0d\u8ba9\u5b83\u51fa\u73b0\u5728\u6211\u4eec\u7684\u4ee3\u7801\u91cc\uff0c\u9664\u975e\u662f\u5177\u4f53debug\u5185\u5b58\u6cc4\u9732\u7684\u65f6\u5019\u518d\u7528\u3002 <p>static\u53d8\u91cf\u5728C++\u4e2d\uff0c\u662f\u7531C++ runtime\u6765\u7ba1\u7406\u7684\uff0c\u5b83\u5728\u8fdb\u5165main\u4e4b\u524d\u88abconstruct\uff0c\u5728main\u8fd4\u56de\u4e5f\u5c31\u662f\u7a0b\u5e8f\u7ed3\u675f\u4e4b\u540e\u88abdestruct\uff0c\u6211\u4eec \u4ee3\u7801\u65e0\u6cd5\u63a7\u5236\uff0c\u6240\u4ee5\u5f88\u5371\u9669\u3002\u5c3d\u91cf\u907f\u514d\u4f7f\u7528static\u53d8\u91cf\uff0c\u5c24\u5176\u662f\u5168\u5c40\u7684\uff0c\u4ee5\u53ca\u4f1a\u5206\u914d\u5185\u5b58\u548c\u4f9d\u8d56\u4e8e\u5176\u4ed6\u7ec4\u4ef6\u7684\u53d8\u91cf\uff0c\u5426\u5219\u7b49\u5230\u5b83\u88ab\u9500\u6bc1\u7684\u65f6\u5019\uff0c \u90fd\u5df2\u7ecf\u662f\u7a0b\u5e8f\u7ed3\u675f\u7684\u65f6\u5019\u4e86\uff0c\u8bb8\u591a\u4e0a\u4e0b\u6587\u90fd\u6ca1\u6709\u4e86\u3002\u5982\u679c\u4f60\u542f\u7528\u4e86CRT\u7684memory leak\u68c0\u6d4b\u7684\u8bdd\uff0cmemory leak\u62a5\u544a\u662f\u5728\u7a0b\u5e8f\u7ed3\u675f\u524d\u7684\u6700\u540e\u88ab\u8c03\u7528\u7684\u3002</p> <p>}</p> <p>void WhyNotDeferredShading() {     deferred shading\u505a\u4e0d\u4e86\u4ec0\u4e48\uff1f\u2014\u2014MSAA\u548c\u5176\u4ed6\u6297\u952f\u9f7f\uff0c\u800c\u4e14\u6709\u4e24\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\u3002\u4e00\u4e2a\u662f\u5982\u679cscene\u4e2d\u7684\u6bcf\u4e2a\u7269\u4f53\u7528\u7684\u662f\u4e0d\u540c\u7684lighting     shader\uff0c\u4f60\u5728\u6700\u540e\u7684lighting pass\u5c31\u5fc5\u987b\u8981\u5bf9\u7269\u4f53\u5206\u7c7b\u8ba1\u7b97\u5149\u7167\uff0c\u56e0\u4e3a\u4e00\u4e2aquad\u53ea\u80fd\u5957\u7528\u4e00\u4e2ashader\uff0c\u6240\u4ee5\u8fd9\u4e2ashader\u4e2d\u5c31\u8981\u5904\u7406\u6240\u6709     \u4e0d\u540c\u7684lighting model\uff0c\u8fd9\u5c31\u8981\u6c42\u4f60\u5728G-buffer\u7684\u65f6\u5019\uff0c\u5fc5\u987b\u8fd8\u8981\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2afragment\u5bf9\u5e94\u7684\u662f\u90a3\u4e2a\u7269\u4f53\uff0c\u975e\u5e38\u9ebb\u70e6\u3002\u8fd8\u6709\u4e00\u4e2a\u6700\u4e25\u91cd     \u7684\u95ee\u9898\u662f\uff0c\u6211\u4eec\u53ea\u6709screen space\u7684\u4fe1\u606f\uff0c\u6839\u672c\u6ca1\u6709\u529e\u6cd5\u8ba1\u7b97\u900f\u660e\u7269\u4f53\u7684\u5149\u7167 }</p> <p>void GLSL() {     GLSL\u4e2d\u6709\u4e00\u5806\u5173\u4e8eshadow\u7684sampler\u7c7b\u578b\uff0c\u6bd4\u5982sampler2DShadow\uff0csamplerCubeShadow\uff0c\u8fd9\u4e9b\u662f\u4e13\u95e8\u7528\u6765\u505ashadow mapping\u7684\uff0c\u548c     \u4e00\u822c\u7684sampler\u4e0d\u4e00\u6837\uff0c\u5f53\u8bbf\u95ee\u8fd9\u7c7bsampler\u65f6\uff0c\u7528\u7684\u67e5\u8be2\u5411\u91cf\u662f\u4e0d\u540c\u7684\uff0c\u540c\u65f6\u5b83\u4eec\u8fd8\u591a\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u7528\u4e8e\u548ctexture\u5f53\u4e2d\u7684\u6df1\u5ea6\u503c\u505a\u6bd4\u8f83\uff0c     \u5e76\u4e14\u8fd4\u56de\u7684\u7ed3\u679c\u5e76\u4e0d\u662ftexel\u7684\u503c\uff0c\u800c\u662f0\u62161\uff0c\u4ee3\u8868\u662f\u5426\u88ab\u906e\u6321\uff0c\u4f7f\u7528\u8fd9\u7c7bsampler\u65f6\u8fd8\u9700\u8981\u5148\u6fc0\u6d3btexture comparison mode\uff0c\u5426\u5219\u7684\u8bdd     \u6ca1\u7528\u3002\u542c\u4e0a\u53bb\u633a\u590d\u6742\u7684\uff0c\u5176\u5b9e\u8fd9\u4e9b\u7279\u6b8a\u7c7b\u578b\u662f\u7528\u4e8e\u505ahardware\u81ea\u5e26\u7684shadow mapping\u7684\uff0c\u7b49\u4e8e\u8bf4\u662f\u8c03\u7528\u4e86\u786c\u4ef6\u5185\u90e8\u81ea\u5e26\u7684shadow mapping     \u7b97\u6cd5\u7684\u5b9e\u73b0\uff0c\u53ef\u80fd\u4f1a\u7a0d\u5fae\u5feb\u4e00\u70b9\uff0c\u4f46\u6211\u4eec\u6ca1\u5fc5\u8981\u53bb\u4e86\u89e3\uff0c\u6211\u4eec\u53ea\u9700\u8981\u666e\u901a\u7684sampler2D\u548csamplerCube\uff0c\u81ea\u5df1\u505ashadow mapping\u5c31\u597d\u4e86\u3002     \u9700\u8981\u7684\u8bdd\u53c2\u8003https://github.com/PacktPublishing/OpenGL-4-Shading-Language-Cookbook-Third-Edition/blob/master/     chapter08/sceneshadowmap.cpp\u4e2d\u7684\u4ee3\u7801\uff0c\u4ee5\u53cashader\u4e2d\u7684textureProj\u7684\u7528\u6cd5\u3002</p> <p>\u6ce8\u610f\uff0cimage load store\u53ea\u9002\u7528\u4e8ecolor image format\uff0c\u6bd4\u5982\u4e00\u822c\u7684texture\u548cframebuffer\u7684color attachments\uff0c\u4f46\u662fILS\u65e0\u6cd5 \u9002\u7528\u4e8edepth\u6216\u8005stencil texture\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u53ef\u4ee5\u628a\u4e00\u4e2aFBO\u7684depth buffer\u7ed1\u5b9a\u5230ILS\u4e0a\uff0c\u56e0\u4e3aILS\u6ca1\u6709\u4e0eGL_DEPTH_COMPONENT24 \u7b49\u683c\u5f0f\u5bf9\u5e94\u7684image format\u3002</p> <p>\u91cd\u65b0\u597d\u597d\u7406\u89e3\u4e00\u4e0b\u77e9\u9635\u7684transform\u8f6c\u6362\uff01\uff01\uff01\u6bd4\u5982\u8bf4\uff0c\u5047\u5982\u6211\u4eec\u6709\u4e00\u4e2a\u65b0\u5efa\u7684sphere entity\uff0c\u5b83\u6709\u4e00\u4e2aTransform component\uff0c\u8868\u793a\u4e3aT\u3002 \u90a3\u4e48T\u662f\u5e72\u561b\u7684\uff1f\u662f\u7528\u6765\u79fb\u52a8\u8fd9\u4e2a\u7403\u7684\u3002\u539f\u6765\u7403\u5728\u4e16\u754c\u539f\u70b9\uff0c\u4e5f\u5c31\u662f\u5728\u81ea\u5df1\u7684local model space\uff0c\u73b0\u5728\u6211\u4eec\u628a\u7403\u7684\u6bcf\u4e2avertex\u5de6\u4e58\u4e0aT\u7684\u77e9\u9635\uff0c \u5c31\u5f97\u5230\u4e86\u7403\u79fb\u52a8\u540e\u7684\u65b0\u7684\u4e16\u754c\u5750\u6807\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4e0d\u5c31\u662fmodel matrix\u561b\uff0c\u6ca1\u9519\u3002\u53ef\u4ee5\u60f3\u4e00\u4e0b\uff0c\u5982\u679cT\u53ea\u662f\u5411x\u8f74\u79fb\u52a8+5\uff0cT\u77e9\u9635\u7684\u6700\u540e\u4e00\u5217\u5c31\u662f [5, 0, 0, 1]\uff0c\u4e8e\u662f\u5de6\u4e58T\u4f1a\u4f7f\u6bcf\u4e2avertex\u90fd\u5411x\u8f74\u79fb\u52a8+5\uff0c\u6ca1\u95ee\u9898\uff0c\u53cd\u8fc7\u6765\uff0c\u53ef\u4ee5\u7528\u7f51\u4e0a\u8ba1\u7b97\u5668\u8bd5\u9a8c\u4e00\u4e0b\uff0cT\u7684\u9006\u77e9\u9635\u7684\u6700\u540e\u4e00\u5217\uff0c\u5c31\u662f [-5, 0, 0, 1]\uff0c\u4e8e\u662f\u5de6\u4e58inverse T\u4f1a\u4f7f\u6bcf\u4e2avertex\u90fd\u5411x\u8f74\u79fb\u52a8-5\uff0c\u53c8\u56de\u5230\u4e86\u539f\u70b9\u3002\u6362\u53e5\u8bdd\u8bf4\uff0cmodel matrix\u7684\u9006\u77e9\u9635\uff0c\u662f\u628a\u4e00\u4e2aworld space\u7684\u7269\u4f53\u8f6c\u6362\u56de\u5176model space\uff08\u5373\u4ee5\u539f\u70b9\u4e3a\u4e2d\u5fc3\uff09\u7684\u3002\u5982\u679c\u662f\u5176\u4ed6\u7269\u4f53\u7684model matrix\u7684\u9006\u77e9\u9635\uff0c\u90a3\u4e48\u5c31\u662f\u4eceworld space\u8f6c\u6362\u5230\u90a3\u4e2a \u7269\u4f53\u6240\u5728\u7684local model space\u3002 \u901a\u5e38\uff0c\u5728\u63cf\u8ff0\u4e2d\uff0cT\u7684\u77e9\u9635\u88ab\u79f0\u4e3a\u662f\u4e00\u4e2a\u7269\u4f53\u7684world transform\uff0c\u56e0\u4e3a\u5b83\u76f4\u63a5\u8868\u793a\u4e86\u7269\u4f53\u5728world space\u7684\u4e16\u754c\u5750\u6807\u3002\u5bf9\u4e8erotation\uff0c scaling\u7b49\u7b49\uff0c\u90fd\u662f\u8fd9\u6837\u3002\u5728\u516c\u5f0f\u8ba1\u7b97\u4e2d\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3amodel matrix\u3002\u8fd9\u4e24\u4e2a\u6982\u5ff5\u662f\u4e00\u56de\u4e8b\u3002</p> <p>\u4ee5\u4e0a\u7684\u5206\u6790\u540c\u6837\u9002\u7528\u4e8e\u5176\u4ed6\u7684entity\uff0c\u5982\u679c\u6211\u4eec\u628asphere\u7403\u6362\u6210camera\u76f8\u673a\uff0c\u6b64\u65f6T\u4ee3\u8868\u7684\u662f\u76f8\u673a\u7684world transform\u3002 \u6309\u7167\u524d\u9762\u7684\u903b\u8f91\u7c7b\u6bd4\uff0c\u76f8\u673a\u7684\u6bcf\u4e2alocal vertex\u5de6\u4e58T\u7684\u77e9\u9635\u4ee5\u540e\uff0c\u5c31\u5f97\u5230\u4e86\u76f8\u673a\u8be5vertex\u7684\u4e16\u754c\u5750\u6807\uff0c\u6ca1\u9519\uff0c\u76f8\u673a\u4e5f\u53ea\u662f\u4e00\u4e2a\u666e\u901a\u7684entity \u7269\u4f53\u800c\u5df2\u3002\u53cd\u8fc7\u6765\u5462\uff0c\u4e16\u754c\u5750\u6807\u4e2d\u4efb\u4f55\u4e00\u4e2avertex\u5de6\u4e58T\u7684\u9006\u77e9\u9635\u4ee5\u540e\uff0c\u4e5f\u5c31\u662f\u76f8\u673a\u7684model matrix\u7684inverse\u77e9\u9635\uff0c\u76f8\u5f53\u4e8e\u662f\u628a\u8be5world space\u7684\u7269\u4f53\u8f6c\u6362\u56de\u5230\u4e86\u76f8\u673a\u7684model space\u91cc\uff0c\u800c\u76f8\u673a\u7684model space\u5c31\u662fview space\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u76f8\u673a\u7684model matrix\u7684\u9006\u77e9\u9635\uff0c\u5c31\u662f \u6211\u4eec\u5e38\u8bf4\u7684view matrix\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u901a\u5e38\u6240\u7406\u89e3\u7684\u4eceworld space\u8f6c\u6362\u6210camera space\u3002\u603b\u4e4b\u8bb0\u4f4f\uff0c\u4e00\u4e2a\u7269\u4f53A\u7684model matrix\u7684\u9006\u77e9\u9635\uff0c \u5c31\u662f\u7528\u6765\u628a\u5176\u4ed6\u7684\u4e16\u754c\u5750\u6807\u8f6c\u6362\u5230A\u81ea\u5df1\u7684local space\u7684\u3002</p> <p>\u4e0d\u4ec5\u76f8\u673a\u5982\u6b64\uff0c\u5bf9\u4e8e\u9aa8\u9abc\u52a8\u753b\u4e5f\u662f\u5982\u6b64\u3002\u5728\u4e00\u4e2ahumanoid\u7684\u6a21\u578b\u4e2d\uff0c\u6709\u4e00\u4e2ahierarchy\u7684node graph\uff0c\u6bcf\u4e2anode\u6709\u4e00\u4e2alocal\u7684 transform\u77e9\u9635\uff0c\u5b83\u662f\u76f8\u5bf9\u4e8e\u81ea\u5df1\u7684parent node\u7684\uff08root\u7684\u8be5\u77e9\u9635\u5c31\u662fidentity\uff09\u3002\u5355\u72ec\u53ea\u8003\u8651\u4e00\u5bf9node\uff0cparent\u662fp\uff0cchild\u662fc\uff0c\u6b64\u65f6 \u76f8\u5f53\u4e8e\u662f\uff0c\u628ac\u770b\u6210\u4e00\u4e2a\u7269\u4f53\uff0c\u628ap\u770b\u6210\u662fworld\u4e16\u754c\uff0c\u800cc\u7684local\u77e9\u9635\u5c31\u662fc\u4e2d\u7684vertex\u76f8\u5bf9\u4e8e\u4e16\u754cp\u7684transform\uff0c\u662fc\u8fd9\u4e2a\u7269\u4f53\u7684 \"world transform\"\uff0c\u6240\u4ee5c\u7684\u8fd9\u4e2alocal\u77e9\u9635\uff0c\u662f\u628ac\u6240\u5728\u7684local space\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2avertex\uff0c\u4ecespace c\u8f6c\u6362\u5230\u5b83\u7684parent p\u7684 space\u91cc\u9762\u53bb\u7684\u3002\u5bf9\u4e8e\u4e00\u4e2anode c\uff0c\u53ea\u8981\u6211\u4eec\u6cbf\u7740parent\u4e00\u8def\u5f80\u4e0a\u641c\uff0c\u4e00\u8def\u5de6\u4e58\u6bcf\u4e2aparent\u7684transform\u77e9\u9635\uff0c\u4e00\u76f4\u5230root\uff0c\u6700\u7ec8\u5c31\u4f1a\u628a \u4e00\u4e2avertex\u4ecespace c\u8f6c\u6362\u5230\u8be5humanoid\u6a21\u578b\u7684model space\uff08\u4e5f\u5c31\u662fbind pose\uff0c\u6216\u53eb\u505aT pose\uff09\u91cc\u53bb\u3002 \u800c\u6211\u4eec\u53c8\u77e5\u9053\uff0cload\u6a21\u578b\u7684\u65f6\u5019\uff0c\u6240\u6709\u7684vertices\u90fd\u662f\u5b9a\u4e49\u5728bind pose\u7684\uff0c\u5728model space\u91cc\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2anode c\u6765\u8bf4\uff0c\u5047\u5982\u5b83\u7684 parent\u5206\u522b\u662fb\uff0ca\u4ee5\u53caroot\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u6a21\u578b\u4e2d\u7684vertex\uff08\u6b64\u65f6\u5b83\u5b9a\u4e49\u5728bind pose\uff09\uff0c\u7136\u540e\u5de6\u4e58root\u7684transform\u77e9\u9635\u8f6c\u6362\u5230root \u6240\u5728\u7684local space\uff08\u7b49\u540c\u4e8emodel space\uff0c\u56e0\u4e3aroot\u7684\u8be5\u77e9\u9635\u4e3a\u5355\u4f4d\u9635\u6240\u4ee5\u4e58\u5b8c\u8fd8\u662f\u5728bind pose\uff09\uff0c\u7136\u540e\u5de6\u4e58a\u7684transform\u77e9\u9635\u8f6c\u6362 \u5230a\u6240\u5728\u7684local space\uff0c\u7136\u540e\u5de6\u4e58b\u7684transform\u77e9\u9635\u8f6c\u6362\u5230b\u7684space\uff0c\u6700\u540e\u518d\u5de6\u4e58c\u7684transform\u77e9\u9635\uff0c\u4e8e\u662f\u5c31\u8f6c\u6362\u5230\u4e86c\u8fd9\u4e2anode\u7684 local space\u4e86\uff0c\u5047\u5982c\u662fanimation\u4e2d\u6240\u5305\u542b\u7684\u4e00\u4e2a\u9aa8\u9abc\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u628a\u539f\u6765bind pose\u7684\u4e00\u4e2avertex\u8f6c\u6362\u5230\u4e86\u9aa8\u9abcc\u7684bone space\u4e86\uff0c \u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u505akeyframe\u7684interpolation\u3002</p> <p>stencil buffer\u4e3b\u8981\u662f\u7528\u6765\u753b\u7269\u4f53\u7684\u8fb9\u754c\u7684\uff0c\u6bd4\u5982\u9009\u4e2d\u7269\u4f53\u3002\u8fd8\u53ef\u4ee5\u7528\u6765\u5236\u4f5c\u573a\u666f\u8fc7\u6e21\u6548\u679c\uff0c\u6bd4\u5982fading\uff0c\u5706\u5708\u5f0f\u7f29\u653e\uff0c\u4e0d\u8fc7\u4e3b\u8981\u8fd8\u662f\u7528 \u6765\u753b\u8fb9\u754c\uff0c\u8fd8\u6709\u4e00\u4e2a\u662f\u753bshadow\u3002\u66f4\u6709\u7528\u7684\u662f\uff0cstencil test\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5224\u65ad\u4efb\u4f55\u5f62\u72b6\u7684\u7269\u4f53\u7684\u8fb9\u754c\uff0c\u6bd4\u5982\uff0cdrawing textures inside a rear-view mirror so it neatly fits into the mirror shape\u3002stencil testing\u901a\u5e38\u662f\u914d\u5408\u591a\u4e2apass\u548c\u591a\u4e2a framebuffer\u4e00\u8d77\u4f7f\u7528\u3002 \u4e00\u4e2a\u52a8\u6001\u7684\u9b54\u6cd5\u4f20\u9001\u95e8\uff0c\u95e8\u7684\u5185\u90e8\u53ef\u4ee5\u7528stencil test\u53bb\u8d34\u56fe</p> <p>GLSL\u7684uniform\uff0c\u53ef\u4ee5\u5728\u58f0\u660e\u7684\u65f6\u5019\u540c\u65f6\u7ed9\u4e2a\u9ed8\u8ba4\u503c\uff0c\u4f5c\u4e3a\u521d\u59cb\u5316\u7684\u503c\uff0c\u76f4\u5230C++\u7aef\u901a\u8fc7SetUniform\u4fee\u6539\u4e3a\u6b62\uff0c\u8be5\u503c\u90fd\u4e0d\u4f1a\u53d8\u3002 \u8fd9\u662fOpenGL\u6587\u6863\u91cc\u6709\u660e\u786e\u5199\u7684\uff0c\u7136\u800c\u73b0\u5b9e\u662f\uff0c\u5f88\u591a\u9a71\u52a8\u5e76\u6ca1\u6709\u505a\u8fd9\u4e2a\u529f\u80fd\uff0c\u6211\u7684\u663e\u5361\u4e0a\uff0c\u53ea\u6709compute shader\u7684uniform\u53ef\u4ee5\u6709\u9ed8\u8ba4\u503c\uff0c \u5176\u4ed6\u7684shader\u65e0\u8bba\u662f\u5426\u8bbe\u7f6e\u4e86\u521d\u59cb\u503c\uff0c\u5b9e\u9645\u4e0a\u5b58\u50a8\u7684\u503c\u5168\u90e8\u662f0.0\uff0c\u6240\u4ee5\u8981\u7279\u522b\u6ce8\u610f\uff0c\u4fdd\u9669\u8d77\u89c1\u6bcf\u4e2auniform\u90fd\u81f3\u5c11\u8bbe\u4e00\u6b21\u503c\uff0c\u4e0d\u8981\u4f9d\u8d56\u4e8e\u9a71\u52a8\u7684\u521d\u59cb\u503c\u3002</p> <p>compute shader\u5982\u4f55\u5206\u914d\u8d44\u6e90\uff1f\u5728\u4e00\u4e2awork group\u4e2d\uff0c\u603b\u5171\u6709local_size_x * local_size_y * local_size_z\u6b21shader invocations\uff0c\u8fd9\u662f\u5355\u72ec\u4e00\u4e2awork group\u7684\u5de5\u4f5c\u91cf\uff0c\u800c\u8fd9\u4e9binvocations\u4e00\u5b9a\u662frun in parallel\u7684\uff0c\u53ea\u4e0d\u8fc7local_size\u6709\u4e00\u4e2a\u4e0a\u9650\uff0c \u6bd4\u5982\u5f53local_size_x = 40\u65f6\uff0c\u6211\u7684AMD\u663e\u5361\u5c31\u4f1a\u62a5\u9519out of limit\uff0c\u597d\u70b9\u7684\u663e\u5361\u53ef\u80fd\u4f1a\u9ad8\u4e00\u4e9b\u3002\u540c\u4e00\u4e2awork group\u4e2d\u7684invocations \u76f8\u5f53\u4e8e\u65f6threads\uff0c\u6bcf\u4e2ainvocation\u5bf9\u5e94\u4e00\u6839\u7ebf\u7a0b\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5171\u540c\u8bfb\u5199\u4e00\u5757shared\u5185\u5b58\u533a\u57df\u3002 \u5f53\u6211\u4eecdispatch\u7684\u65f6\u5019\uff0cDispatch\u51fd\u6570\u7684\u53c2\u6570\u662fwork group count\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u603b\u8ba1\u7b97\u91cf\u53bb\u9664\u4ee5\u4e00\u4e2awork group\u7684local size\u6765\u5f97 \u5230\u7684\u3002\u5047\u5982\u53ea\u8003\u8651\u67d0\u4e00\u7ef4\u5ea6\uff0c\u8be5\u7ef4\u5ea6\u4e0a\u67095000\u4e2a\u6570\u9700\u8981\u8ba1\u7b97\uff0c\u800c\u4e00\u4e2awork group\u5728\u8be5\u7ef4\u5ea6\u4e0a\u7684local size\u662f100\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981dispatch 50\u4e2awork groups\u3002Work groups\u4e4b\u95f4\u7684\u8fd0\u884c\u987a\u5e8f\u4e5f\u662f\u968f\u673a\u7684\uff0c\u53ea\u4e0d\u8fc7\u4ed6\u4eec\u4e0d\u4e00\u5b9a\u662f\u5e76\u884c\u8dd1\u7684\uff0c\u53ea\u80fd\u8bf4driver\u4f1a\u5c3d\u91cf\u8ba9\u4ed6\u4eec\u5e76\u884c\uff0c\u4f46\u4e0d\u4fdd\u8bc1\u3002 \u4e8e\u662f\u95ee\u9898\u6765\u4e86\uff0c\u600e\u4e48\u5206\u914d\u8ba1\u7b97\u91cf\uff0c\u624d\u80fd\u5f97\u5230\u6700\u9ad8\u7684\u6548\u7387\u5462\uff1f\u5982\u4f55\u8bbe\u7f6e\u6700\u4f18\u7684work group\u7684local size\uff1f\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u6bd4\u8f83\u590d\u6742\uff0c\u4e00\u822c\u53ea\u80fd\u8bd5\u4e86 \u624d\u77e5\u9053\uff0c\u4f46\u6709\u51e0\u4e2a\u539f\u5219\u53ef\u4ee5\u501f\u9274\u3002</p> <ol> <li> <p>\u5982\u679c\u628alocal size\u8bbe\u7f6e\u62101\uff0clayout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in; \u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e2awork group\u53ea\u6709\u4e00\u6b21invocation\uff0c\u4e00\u6839\u7ebf\u7a0b\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5f88\u591a\u5f88\u591a\u7684work groups\uff0c\u5f97\u5230\u7684\u901f\u5ea6\u4e00\u5b9a\u662f\u6700\u6162\u7684\u3002compute shader\u7684\u6027\u80fd\u63d0\u5347\u6765\u6e90\u4e8e\u5e76\u884c\u7684power\uff0c\u662f\u505abatch update\uff0c\u4f46\u4e0a\u8ff0\u8fd9\u79cd\u60c5\u51b5\uff0c\u6bcf\u4e2awork group\u662f\u4e00\u4e2abatch\uff0c\u4f46\u6bcf\u4e2abatch\u53ea\u6709\u4e00\u6b21\u8ba1\u7b97\uff0c \u7b49\u4e8e\u662f\u6ca1\u6709\u505abatch\uff0c\u81ea\u7136\u6700\u6162\u3002\u4e0d\u4ec5\u5982\u6b64\uff0c\u9a71\u52a8\u7a0b\u5e8f\u4e2ddispatch\u6bcf\u4e00\u4e2awork group\u662f\u9700\u8981\u4e00\u5b9a\u7684overhead\u548c\u5f00\u9500\u7684\uff0c\u5982\u6b64\u4e00\u6765\u6211\u4eec\u6700\u5927\u5316\u4e86 \u5f00\u9500\uff0c\u90a3\u4e48\u5f53\u7136\u662f\u6700\u6162\u7684\u3002</p> </li> <li> <p>\u4e8e\u662f\uff0cstackoverflow\u4e0a\u6709\u4eba\u8bf4\uff0c\u6700\u4f18\u7684\u5206\u914d\u65b9\u6848\uff0c\u662f\u6700\u5927\u5316\u6bcf\u4e2awork group\u7684local size\uff0c\u6700\u5927\u5316\u5e76\u884c\uff0c\u51cf\u5c11dispatch work group\u7684overhead\u548c\u5f00\u9500\u3002\u7406\u8bba\u4e0a\uff0c\u8fd9\u6837\u7406\u89e3\u5e94\u8be5\u662f\u5bf9\u7684\uff0c\u8d77\u7801\u4e0d\u4f1a\u6bd4\u6700\u4f18\u6162\u5f88\u591a\u3002\u6211\u5b9e\u9645\u8bd5\u4e86\u4e00\u4e0b\uff0c\u5047\u5982\u786c\u4ef6\u5bf9\u4e8elocal size\u7684limit\u662f32\uff0c \u90a3\u4e48\u8bbe\u621032\u786e\u5b9e\u5f88\u5feb\uff0c\u4f46\u8bbe\u621010\u4e5f\u5e76\u6ca1\u6709\u6162\u591a\u5c11\uff0c\u901f\u5ea6\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u91cc\u7684\u539f\u56e0\u5c31\u6bd4\u8f83\u590d\u6742\u4e86\uff0c\u6709\u6bd4\u5982driver\u7684\u4f18\u5316\uff0cGPU\u7684\u5177\u4f53\u8fd0\u4f5c\u65b9\u5f0f\u7b49\u7b49\u3002 \u6211\u89c9\u5f97\uff0c\u53ea\u8981local size\u8bbe\u7f6e\u7684\u504f\u5927\uff0c\u6bd4\u8f83\u9760\u8fd1limit\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002</p> </li> <li> <p>\u6309\u7167CS\u7684\u4ee5\u5f80\u60ef\u4f8b\uff0c\u5f53\u53c2\u6570\u662f2\u7684\u6307\u6570\u500d\u7684\u65f6\u5019\uff0c\u901a\u5e38\u662f\u6700\u5feb\u7684\u3002\u6240\u4ee5local size\u5c3d\u91cf\u8bbe\u7f6e\u62102\u7684\u500d\u6570\uff0c\u6bd4\u598216\uff0c32\uff0c64\u8fd9\u79cd\uff0c\u800c\u4e0d\u662f10\uff0c20\u3002 \u53e6\u5916\u4e00\u4e2a\u65b9\u9762\u662f\uff0c\u6574\u6570\u80af\u5b9a\u662f\u6bd4\u6d6e\u70b9\u6570\u8981\u5feb\u7684\uff0c\u6240\u4ee5\u5206\u914d\u4efb\u52a1\u65f6\u5c3d\u91cf\u8981\u51d1\u6574\uff0c\u4fdd\u8bc1\u6bcf\u4e2awork group\u7684\u89c4\u6a21\u5b8c\u5168\u4e00\u81f4\u3002\u6bd4\u5982\u6211\u4eec\u603b\u5171\u67091000\u4e2a\u8ba1\u7b97 \u91cf\uff0c\u662f\u56fa\u5b9a\u6b7b\u7684\uff0c\u90a3\u4e48\u5047\u5982local size\u8bbe\u7f6e\u621032\uff0c1000\u9664\u4ee532\u7b49\u4e8e31.25\u662f\u9664\u4e0d\u5c3d\u7684\uff0c\u4f1a\u4f59\u4e0b8\uff0c\u6b64\u65f6\u6211\u4eec\u9700\u898132\u4e2awork group\uff0c\u524d31\u4e2a group\u90fd\u5206\u522b\u670932\u4e2a\u8ba1\u7b97\u91cf\uff0c\u800c\u6700\u540e\u4e00\u4e2agroup\u53ea\u67098\u4e2a\u8ba1\u7b97\u91cf\uff0c\u5bfc\u81f4work group\u4e4b\u95f4\u4e0d\u662f\u5b8c\u5168\u5747\u5300\u7684\uff0c\u8fd9\u79cd\u60c5\u51b5\u5f80\u5f80\u4f1a\u6162\u4e00\u4e9b\uff0c\u6700\u4e3b\u8981\u7684\u662f\uff0c \u5b83\u4f1a\u5f15\u5165\u4e00\u4e2acorner case\uff0c\u4f7f\u5f97\u6211\u4eec\u7684\u7a0b\u5e8f\u4ee3\u7801\u66f4\u5bb9\u6613\u51fa\u9519\uff0c\u8981\u5c3d\u53ef\u80fd\u907f\u514d\u3002\u5047\u59821000\u4e2a\u8ba1\u7b97\u91cf\u662f\u7ed9\u5b9a\u7684\uff0c\u90a3\u8fd9\u65f6\u6211\u4eec\u5b81\u53ef\u628alocal size \u8bbe\u7f6e\u621010\uff0c\u4ee5\u4fdd\u8bc1correctness\uff0c\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u5e94\u8be5\u628a\u603b\u8ba1\u7b97\u91cf\u4e5f\u6539\u4e3a2\u7684\u500d\u6570\uff0c\u6bd4\u59821024\uff0c2048\uff0c\u800c\u4e0d\u662f1000\u3002</p> </li> </ol> <p>LOD\u4ee3\u8868\u7684\u662fLevel of Detail\u7684\u610f\u601d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cLOD\u8d8a\u5927\uff0cdetails\u8d8a\u591a\uff0c\u901a\u5e38\u8868\u793a\u7269\u4f53\u79bb\u76f8\u673a\u8d8a\u8fd1\uff0c\u53cd\u4e4b\uff0cLOD\u8d8a\u5c0f\uff0c\u7ec6\u8282\u8d8a\u5c11\uff0c \u901a\u5e38\u8868\u793a\u7269\u4f53\u79bbviewer\u8d8a\u8fdc\u3002\u4ece\u8fd1\u5230\u8fdc\uff0clevel of details\u662f\u5728\u9010\u6e10\u4e0b\u964d\u7684\uff0c\u8d8a\u8fdc\u7684\u7269\u4f53\u8d8a\u6a21\u7cca\uff0c\u8d8a\u7f3a\u5c11\u7ec6\u8282\u3002 \u901a\u5e38\u5f53\u6211\u4eec\u63d0\u5230LOD\u65f6\uff0c\u6211\u4eec\u8bf4\u7684\u662fgemometry mesh\u7684\u7ec6\u8282\u6216\u8005\u662ftexture\u7684\u7ec6\u8282\u3002 \u6ce8\u610f\uff0c\u4e0d\u8981\u628aLOD\u7684\u6982\u5ff5\u548cGLSL\u4e2d\u7684lod\u53c2\u6570\u7ed9\u6df7\u6dc6\u4e86\uff0c\u5728GLSL\u4e2d\uff0c\u6bd4\u5982textureLOD()\u7684lod\u53c2\u6570\u8fd9\u79cd\uff0c\u5b9e\u9645\u4e0a\u4ee3\u8868\u7684\u662fmipmap level\uff0c \u56e0\u4e3aOpenGL(Vulkan\u4e5f\u662f\u5982\u6b64\u5417\uff1f)\u5bf9lod\u7684\u5b9a\u4e49\u6307\u7684\u5c31\u662fmipmap level\uff0clod=0\u4ee3\u8868\u7684\u662ftexture\u7684base level\uff0c\u7ec6\u8282\u6700\u591a\uff0c\u800clod=1,2,3... \u5e76\u4e0d\u662f\u8bf4level of details\u5728\u589e\u52a0\uff0c\u800c\u662f\u6307\u7528\u66f4\u9ad8level\u7684mipmap\uff0c\u6240\u4ee5\u5bf9\u5e94\u7684level of details\u662f\u53d8\u5f97\u8d8a\u6765\u8d8a\u5c0f\u7684\u3002 \u5982\u679c\u53ea\u662f\u63d0\u5230\u56fe\u5f62\u5b66\u610f\u4e49\u4e0a\u7684lod\u7684\u6982\u5ff5\uff0c\u5982\u679c\u7528lod=0\u4ee3\u8868\u6700\u9ad8\u7684level of details\uff0c\u90a3\u4e48\u5176\u4f59\u7684lod\u5e94\u8be5\u662f-1,-2,-3,...,-1000\u8fd9\u79cd\u8d1f\u7684\u3002</p> <p>\u5728C\u548cC++\u4e2d\uff0c\u6d6e\u70b9\u6570\u7684\u9ed8\u8ba4\u7c7b\u578b\u662fdouble\uff0c\u6240\u4ee53.14159\u662fdouble\uff0c\u9664\u975e\u663e\u5f0f\u7684\u52a0\u4e0af\uff0c\u53d8\u62103.14159f\uff0c\u8fd9\u65f6\u7f16\u8bd1\u5668\u624d\u8ba4\u4e3a\u5b83\u662ffloat\u3002 \u540c\u6837\u7684\uff0c\u6574\u6570\u7684\u9ed8\u8ba4\u7c7b\u578b\u662fsigned int\uff0c\u5f53\u6211\u4eec\u51993\u7684\u65f6\u5019\u5c31\u662fint\u76843\uff0c\u800c3U\u624d\u662funsigned int\u76843\uff0c3L\u662flong\uff0c\u7b49\u7b49\u3002 \u5728GLSL\u4e2d\uff0c\u6574\u6570\u6211\u4eec\u4e0d\u9700\u8981\u53bb\u5173\u5fc3\u540e\u7f00\uff0c\u800c\u5bf9\u4e8e\u6d6e\u70b9\u6570\uff0cGLSL\u7684\u9ed8\u8ba4\u7c7b\u578b\u5c31\u662ffloat\uff0c\u6240\u4ee5\u5199\u6d6e\u70b9\u6570\u4e0d\u8981\u5728\u52a0\u4e0af\u7684\u540e\u7f00\uff0c3.14\u76f4\u63a5\u5c31\u662ffloat\u3002 \u5047\u5982\u6211\u4eec\u5728GLSL\u4e2d\u8981\u7528double\uff0c\u90a3\u4e48\u6b64\u65f6\u5c31\u5fc5\u987b\u8981\u663e\u5f0f\u7684\u52a0\u4e0alf\u7684\u540e\u7f00\uff0c\u4ee3\u8868long float\u5373double\uff0c\u6240\u4ee53.14lf\u624d\u662fdouble\u3002 \u5728C++\u4e2d\uff0c3f\u8fd9\u79cd\u5199\u6cd5\u662f\u5408\u6cd5\u7684\uff0c\u7f16\u8bd1\u5668\u4f1a\u5e2e\u4f60\u8865\u5168\u4e3a3.0f\uff0c\u662f\u4e2a\u6d6e\u70b9\u6570\uff0c\u5728GLSL\u4e2d\uff0c\u7f16\u8bd1\u5668\u4e0d\u4f1a\u5e2e\u4f60\uff0c3f\u662f\u6574\u6570\u52a0f\u540e\u7f00\uff0c\u662f\u975e\u6cd5\u7684\uff0c\u76f4\u63a5\u7f16\u8bd1\u9519\u8bef\u3002</p> <p>\u5728\u5199GLSL shader\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u5c24\u5176\u662ffragment shader\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u7279\u522b\u6ce8\u610f\u63a7\u5236\u4ee3\u7801\u7684\u5206\u652f\u5224\u65ad\uff0c\u51cf\u5c11if-else branching\u3002 \u5bf9\u4e8evertex shader\u6765\u8bf4\uff0c\u6bcf\u4e2avertex\u88abinvoke\u4e00\u6b21\uff0c\u5982\u679cvertices\u6bd4\u8f83\u5c11\uff0c\u90a3\u4e48\u5176\u5b9e\u65e0\u6240\u8c13\uff0c\u5bf9\u4e8efragment shader\uff0c\u5b83\u7684invocations\u7684 \u6570\u91cf\u901a\u5e38\u662fvertex shader\u7684\u51e0\u5343\u51e0\u4e07\u500d\uff0c\u6240\u4ee5\u5c3d\u53ef\u80fd\u907f\u514d\u4efb\u4f55\u7684if-else\u3002 \u6709\u4e24\u79cd\u529e\u6cd5\uff0c\u7b2c\u4e00\u4e2a\uff0c\u5f53\u4e0d\u540c\u7684fragment\u53ef\u80fd\u8981\u8c03\u7528\u4e0d\u540c\u7684\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u7528subroutine uniform\u6765\u66ff\u4ee3\u3002 \u7b2c\u4e8c\u4e2a\uff0c\u6709\u4e9b\u7b80\u5355\u7684\u6bd4\u5927\u5c0f\u7684\u5224\u65ad\uff0c\u6216\u662f\u5728\u4e0d\u5728\u67d0\u533a\u95f4\u5185\u7684\u5224\u65ad\uff0c\u53ef\u4ee5\u7528step()\u51fd\u6570\u6765\u66ff\u4ee3\u3002 \u73b0\u4ee3\u7684GPU\u5bf9\u4e8e\u5206\u652f\u7684\u4f18\u5316\u6bd4\u8f83\u597d\uff0c\u6240\u4ee5\u5dee\u522b\u5176\u5b9e\u4e0d\u4f1a\u592a\u5927\uff0c\u4f46\u8fd8\u662f\u8981\u517b\u6210\u597d\u4e60\u60ef\uff0c\u591a\u7528step()\u51fd\u6570\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u7528\u4e86\u81ea\u5df1\u7684material\u7cfb\u7edf\uff0cmaterial\u4f1a\u81ea\u52a8\u89e3\u6790shader\u4e2d\u7684uniform\u5e76\u521b\u5efa\u6bcf\u4e2alocation\u7684uniform\u5bf9\u8c61\u3002\u5728\u521b\u5efa\u65f6\uff0c\u6bcf\u4e2auniform \u7684\u521d\u59cb\u503c\u90fd\u4f1a\u88ab\u8bbe\u7f6e\u4e3a0\uff08value(0)\uff09\u6216\u75280\u6765\u6784\u5efaglm\u7684\u6570\u636e\u7c7b\u578b\uff0c\u6240\u4ee5\u8981\u8bb0\u4f4f\uff0c\u6211\u4eec\u662f\u65e0\u6cd5\u4f9d\u8d56\u4e8eGLSL\u4e2d\u7684uniform\u7684\u9ed8\u8ba4\u503c\u7684\uff0c\u8fd9\u4e2a\u9ed8\u8ba4\u503c\u4e5f \u65e0\u6cd5\u88abquery\u5230\u3002\u5bf9\u4e8e\u6bcf\u4e2auniform\uff0c\u6211\u4eec\u90fd\u8981\u786e\u5b9a\u81ea\u5df1\u624b\u5de5\u7684\u6709\u53bb\u8bbe\u7f6euniform\u7684\u503c\u3002</p> <p>struct self_t {     mat4 transform;      // 1000, model matrix of the current entity     uint material_id;    // 1001, current mesh's material id     uint ext_1002;       // for future extension     uint ext_1003;       // for future extension     uint ext_1004;       // for future extension };</p> <p>layout(location = 1000) uniform self_t self; \u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2astruct\uff0c\u5e76\u58f0\u660e\u4e86\u4e00\u4e2a\u8be5struct\u7c7b\u578b\u7684uniform\uff0c\u7531\u4e8e\u5b83\u662fcomplex type\uff0c\u6240\u4ee5\u4f1a\u5360\u636e\u591a\u4e2auniform\u7684location\u3002 \u6211\u4eec\u6307\u5b9a\u4e86location=1000\uff0c\u6240\u4ee5transform\u5bf9\u5e94\u7684\u662f1000\u7684\u4f4d\u7f6e\uff0c\u63a5\u4e0b\u6765\u6bcf\u4e2astruct member\u4f9d\u6b21\u53d6\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\uff0cmaterial_id \u5bf9\u5e941001\uff0c\u7b49\u7b49\u3002\u6ce8\u610f\uff0c\u5c3d\u7ba1\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2astruct\uff0c\u5b83\u5e76\u4e0d\u662f\u4e00\u4e2ablock\uff0c\u548cuniform block\u5b8c\u5168\u4e0d\u662f\u4e00\u4e2a\u6982\u5ff5\u3002\u800c\u4e14\uff0c\u5728shader\u53bbparse active uniforms\u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u628astruct\u770b\u4f5c\u662f\u5206\u5f00\u7684\u4e00\u5806uniform\u3002\u6bd4\u5982\u6211\u4eec\u4f7f\u7528\u4e86self.transform\uff0c\u90a3\u4e48shader\u4f1a\u8ba4\u4e3alocation=1000 \u662f\u4e00\u4e2aactive\u7684uniform\uff0c\u4f46\u5b83\u5e76\u4e0d\u4f1a\u8ba4\u4e3a\u6574\u4e2aself_t\u7684struct\u90fd\u662factive\u7684\uff01\u5047\u5982\u4f60\u6ca1\u6709\u7528ext_1002\uff0c\u90a3\u4e48location=1002\u5c31\u4e0d\u662factive\u7684\uff0c \u4f1a\u88abGLSL\u7f16\u8bd1\u5668optimize out\uff01 \u8bf4\u5230\u5e95\uff0c\u5728GLSL\u4e2d\u5b9a\u4e49struct\uff0c\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u4eba\u53bb\u770b\uff0c\u628a\u53d8\u91cf\u505a\u5f52\u7c7b\uff0c\u4f46\u5728GLSL\u7f16\u8bd1\u5668\u7684\u773c\u91cc\uff0c\u6bcf\u4e2a\u6210\u5458\u5c31\u548c\u5355\u72ec\u7684uniform\u6ca1\u6709\u533a\u522b\u3002</p> <p>shader.SetVec3(\"Material.diffuse\", world::unit);  // set a member of the struct in GLSL shader.SetMat4(\"MyArray[1]\", world::eye);  // set a member in the array in GLSL (MyArray is an array of mat4)</p> <p>\u5bf9\u4e8eGLSL shader\uff0cconst\u53d8\u91cf\u662f\u4e0d\u4f1a\u88ab\u4e0d\u540c\u7684shader stages\u4e4b\u95f4shared\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u5728vertex shader\u91cc\u5b9a\u4e49\u4e00\u4e2aconst\u53d8\u91cf\uff0c\u4e0d\u4f1a \u88abfragment shader\u770b\u5230\uff0c\u54ea\u6015\u4f60\u5728fragment shader\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4e00\u6a21\u4e00\u6837\u7684\u540c\u540d\u53d8\u91cf\uff0c\u90a3\u4e5f\u662f\u53e6\u4e00\u4e2a\u53d8\u91cf\u3002</p> <p>\u5f53\u4f60\u7684\u7a0b\u5e8f\u91cc\u6709\u591a\u4e2a\u4e0d\u540c\u7684shader program\uff0c\u8fd9\u4e9bprogram\u4e4b\u95f4\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff0c\u4ed6\u4eec\u91cc\u9762\u7684\u4efb\u4f55\u540c\u540d\u53d8\u91cf\u90fd\u4e0d\u4f1a\u88abshare\uff0c\u5305\u62ecuniform\uff0c \u6240\u4ee5\u4f60\u5728query location\u548c\u8d4b\u503c\u7684\u65f6\u5019\uff0c\u8981\u5bf9\u6bcf\u4e2aPO\u90fd\u5206\u522b\u64cd\u4f5c\u4e00\u6b21\uff0c\u9664\u975e\u4f7f\u7528uniform buffer object\u3002</p> <p>\u5047\u5982\u4f60\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6ca1\u6709\u88abshader\u7a0b\u5e8f\u7528\u5230\u7684\u53d8\u91cf\uff0c\u90a3\u4e48GLSL\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8remove\u8fd9\u4e2a\u53d8\u91cf\uff0c\u4e8e\u662f\u4f60\u7528glGetUniformLocation\u53bbquery\u5b83\u7684 \u65f6\u5019\uff0c\u7ed3\u679c\u4f1a\u8fd4\u56de-1\uff08\u4f46\u5e76\u4e0d\u662f\u62a5\u9519\uff09\uff0c\u7136\u540e\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\u5374\u53ef\u80fd\u4f1a\u663e\u793a\u9ed1\u5c4f\u3002</p> <p>transform\u77e9\u9635\u901a\u5e38\u662f\u7528GLM\u5728C++\u4ee3\u7801\u4e2d\u7b97\u597d, send it to GLSL, \u5728GLSL\u91cc\u53ea\u505amultiplication\u4e58\u6cd5\u3002 GPU\u5bf9\u77e9\u9635\u4e58\u6cd5\u662f\u4f18\u5316\u8fc7\u7684\uff0c\u77e9\u9635\u4e58\u6cd5\u90fd\u8981\u653e\u5728shader\u91cc\uff08\u4e3b\u8981\u662fvertex shader\uff0c\u5bf9\u6bcf\u4e2avertex apply\uff09\u3002 \u7ecf\u8fc7shader\u540e\uff0cGPU\u786c\u4ef6\u4e2d\u7684\u5382\u5546\u7684OpenGL\u4ee3\u7801\u4f1a\u81ea\u52a8\u8ba1\u7b97\"divide by W\"\u7684\u6b65\u9aa4</p> <p>Try to not overburden the fragment processors of your GPU. it is recommended to do computations in the vertex shader rather than in the fragment shader, because for every vertex shader invocation, the fragment shader could be invoked hundreds or thousands of times more. (this is because the number of fragments is far more &gt;&gt; than the number of vertices, think of fragments as pixels)</p> <p>\u5c3d\u53ef\u80fd\u7684\u591a\u4f7f\u7528Swizzle\u64cd\u4f5c\uff0cSwizzle masks are essentially free in hardware Swizzle\u6709\u4e09\u79cd\u8868\u793a\u65b9\u5f0f\uff0c\u968f\u610f\u4f7f\u7528\uff0cxyzw, rgba, stpq</p> <p>\u9664\u6cd5\u662f\u6bd4\u8f83\u6602\u8d35\u7684\uff0c\u901a\u5e38\u9700\u8981cost\u989d\u5916\u7684\u8ba1\u7b97cycle\uff0c\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5c3d\u91cf\u6539\u6210\u505a\u4e58\u6cd5 vec4 x = (value / 2.0f); vec4 x = (value * 0.5f);  // much faster</p> <p>\u540c\u6837\u7684\u64cd\u4f5c\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7528built-in\u7684\u51fd\u6570\uff0c\u4e0d\u8981\u81ea\u5df1\u8ba1\u7b97\uff0cbuilt-in\u7684\u51fd\u6570\u662f\u4f18\u5316\u8fc7\u7684\uff0c\u8981\u5feb\u5f88\u591a mix\u548csmoothstep\u90fd\u662f\u5728\u4e24\u4e2a\u6570\u4e4b\u95f4\u63d2\u503cinterpolate\uff0c\u4f46\u662fmix\u662f\u7ebf\u6027\u63d2\u503c\uff0c\u800csmoothstep\u7528\u7684\u662f\u66f4\u52a0\u5e73\u6ed1\u7684Hermite\u63d2\u503c\u7b97\u6cd5\uff0c\u63d2\u503c\u66f2\u7ebf \u7c7b\u4f3c\u4e8esigmoid\u51fd\u6570\u7684\u5f62\u72b6\u3002 x = a * t + b * (1 - t);  // slow x = mix(a, b, t);         // fast x = smoothstep(a, b, t);  // fast</p> <p>vec3 a; value = a.x + a.y + a.z;        // slow value = dot(a, vec4(1.0).xyz);  // fast</p> <p>}</p>"},{"location":"resources/bit-foundry/py-notes/","title":"Python","text":""},{"location":"resources/bit-foundry/swift-notes/","title":"Swift","text":""},{"location":"resources/pixel-palette/","title":"All About Pixels","text":""},{"location":"resources/pixel-palette/#renderers","title":"Renderers","text":"Open SourceProprietary <ul> <li>Autodesk Aurora</li> <li>DreamWorks MoonRay</li> <li>Mitsuba Renderer 3</li> <li>appleseed</li> <li>EDXRay</li> <li>GLSL Path Tracer</li> <li>Shadertoy Path Tracer</li> </ul> <ul> <li>Animal Logic Glimpse</li> <li>Autodesk Arnold</li> <li>Arnold USD</li> <li>Pixar RenderMan</li> <li>Chaos V-Ray</li> <li>Maxon Redshift</li> <li>Blender Cycles</li> </ul>"},{"location":"resources/pixel-palette/#references","title":"References","text":"Open CoursesOnline BooksPaper &amp; NotesReadings <ul> <li>VU 186.101 Rendering, TU Wien (videos)</li> <li>UCSD CSE 168 Computer Graphics II: Rendering</li> <li>CMU 15-868 Physics Based Rendering</li> <li>Stanford CS348B Computer Graphics</li> <li>Dartmouth COSC 187 Rendering Algorithms</li> </ul> <ul> <li>Physically Based Rendering v4 (pbrt source)</li> <li>Ray Tracing Gems II</li> <li>The Complete Guide to Photorealism for VFX</li> <li>Vulkan Tutorial</li> </ul> <ul> <li>Monte Carlo Methods for Light Transport Simulation</li> <li>Physically-Based Real-Time Lens Flare Rendering</li> <li>Simple Fur Model</li> <li>Lingqi Yan Homepage</li> </ul> <ul> <li>Physically Based Rendering in Filament</li> <li>Physically Based Shading, Self Shadow</li> <li>Advances in Real-Time Rendering</li> <li>Art and Tech, Max Liani</li> <li>Global Illumination Compendium</li> </ul>"},{"location":"resources/pixel-palette/sampling/","title":"Sampling","text":""},{"location":"resources/pixel-palette/sampling/#basic","title":"Basic","text":"<p>Higher sampling rates reduces the amount of noise in the images, but at the expense of increased rendering time.</p> <p>Camera samples are also called AA samples because these samples are used for anti-aliasing. AA samples = number of primary rays cast per pixel.</p> <p>Get to known some big renderer names: Arnold, V-Ray, Redshift, Blender's Cycles, RenderMan.</p> <p>V-Ray uses a method called adaptive sampling, where the renderer adjusts the number of samples dynamically based on the content of the scene.</p> <p>The noise threshold is a parameter used in many rendering engines to control when the renderer should stop refining (sampling) a particular image or pixel area. If the noise level in a specific area is below the set noise threshold, the renderer will stop adding more samples to that area.</p> <p>Most modern renderers include some form of adaptive sampling techniques. In renderers with adaptive sampling, the noise threshold helps in dynamically adjusting how many samples are needed for different parts of the image.</p> <p>In Arnold, diffuse, specular, transmission, sss, and volume sampling rates are expressed for each Camera (AA) sample or primary ray. This AA sampling rate can, therefore, be considered as a global multiplier for all the other ones. For example, if AA samples is 3 and diffuse samples is 2, the total amount of diffuse samples per-pixel is 33 * 22 = 36.</p> <p>Subsurface Scattering (SSS) is a mechanism of light transport in which light penetrates the surface of a translucent object, is scattered by interacting with the material, and then exits the surface at a different point. When light hits a surface with subsurface scattering properties, part of the light is reflected off the surface (specular reflection), part is absorbed (diffuse), and the rest penetrates into the material (SSS). Once inside the material, the light bounces around, scattering in random directions. After multiple internal scatterings, some of the light rays find their way back to the surface and exit the material at different points from where they entered. The path that light takes inside the material and the distance it travels before re-emerging affect the color and the soft appearance typical of SSS materials.</p> <p>Modern path tracers often use a technique called \"random walk subsurface scattering\" to simulate SSS. This process is computationally intensive because it requires simulating many potential paths to achieve a realistic effect.</p>"},{"location":"uiux/graph-editor/","title":"Graph Editor","text":"<p>Node-based graph editor</p>"},{"location":"workspace/","title":"Workspace","text":""},{"location":"workspace/#bash-scripts","title":"Bash Scripts","text":""},{"location":"workspace/#pycharm","title":"PyCharm","text":""},{"location":"workspace/#clion","title":"CLion","text":""},{"location":"workspace/toolchain/","title":"DevOps","text":""},{"location":"workspace/toolchain/#building-testing","title":"Building &amp; Testing","text":"<ul> <li>Professional CMake</li> <li>Google Test</li> </ul>"},{"location":"workspace/toolchain/#releasing","title":"Releasing","text":""},{"location":"workspace/toolchain/#cicd","title":"CI/CD","text":"<p>Some people are under the impression that GCC is the same as gcc which is the GNU C compiler, but it\u2019s not true. Initially, GCC was only the GNU C Compiler, but nowadays, GCC (GNU Compiler Collections) provides many compilers, including gcc and g++. GCC refers to a collection of compilers, while gcc is only the C compiler. gcc and g++ are both compiler-drivers of the GCC, g++ is used to compile C++ programs. When we talk about GCC compiler/linker flags, they apply to both gcc and g++.</p> <p>The g++ command is for both compiling and linking, depending on what the command line options are. Bonus: LLVM is a collection of compiler and toolchain technologies, while Clang is a compiler front-end for the C, C++, Objective-C, and Objective-C++ programming languages, built using LLVM as its back-end.</p> <p>On Linux, what is <code>rpath</code> and <code>LD_LIBRARY_PATH</code> ? What about LD?</p> <ul> <li><code>rpath</code> designates the run-time search path hard-coded in an executable file or library. Dynamic linking loaders use the <code>rpath</code> to find required libraries. When an executable is run, the dynamic linker/loader searches for its required shared libraries in a number of directories, including the standard system directories and any directories specified in the <code>LD_LIBRARY_PATH</code> environment variable. The <code>rpath</code> option allows developers to specify additional directories to search for shared libraries at runtime, without having to rely on environment variables. You can set it using the <code>-Wl,-rpath=&lt;dir&gt;</code> flag at link time.</li> <li>Note that on the command line, option <code>-rpath</code> is not the same as <code>-L</code>, <code>-L</code> tells ld where to look for libraries to link against when linking, whereas <code>-rpath</code> stores that path inside the executable or library so that the runtime dynamic linker can find the libraries. For example, <code>gcc -o app app.c -L/usr/local/lib -Wl,-rpath=/tmp/lib</code> adds <code>/tmp/lib</code> to the <code>app</code> executable as a run-time search path, this is mostly used when your libraries are outside the system library search path. Most of the time when you need <code>-Wl,-rpath=/some/weird/path</code>, you probably need <code>-L/some/weird/path</code> as well.</li> <li><code>LD_LIBRARY_PATH</code> is a predefined environment variable in Linux/Unix that specifies a colon-separated list of directories where the dynamic linker should look for shared libraries when running a program. What\u2019s special about it is that, the linker gives priority to paths in <code>LD_LIBRARY_PATH</code> over the standard library paths <code>/lib</code> and <code>/usr/lib</code>. The standard paths will still be searched, but only after the list of paths in <code>LD_LIBRARY_PATH</code> has been exhausted. <code>LD_LIBRARY_PATH</code> is Linux specific, on Windows you need to play with the <code>PATH</code> environment variable instead. To use <code>LD_LIBRARY_PATH</code>, set it on the command line or in the script before executing the program: <code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/your/custom/path/</code>. While you can add some weird paths to <code>LD_LIBRARY_PATH</code> in the script, the <code>rpath</code> option can be better and more convenient for this.</li> <li>Both <code>rpath</code> and <code>LD_LIBRARY_PATH</code> are Linux only, they do not exist on Windows. <code>LD_LIBRARY_PATH</code> is colon separated, but <code>rpath</code> is semicolon-delimited.</li> <li>Bonus - <code>LD_LIBRARY_PATH</code> stands for \u201cLOAD LIBRARY PATH\u201d or sometimes called \u201cLOADER LIBRARY PATH\u201d.</li> <li>A word of caution - You should probably stay away from altering your <code>LD_LIBRARY_PATH</code>, if you do, make sure to restore it when you're done, or you might screw the build processes of other software in the system. If you are using rez, this won\u2019t be a problem, because every rez-resolved environment is an independent folder in <code>/tmp</code>, if you are not using rez, pay attention before doing it.</li> <li>On Unix-like operating systems, LD is the linker, you can think of it as the loader if that\u2019s easier to remember. It combines many compiled object and archive files, relocates their data, and ties up symbol references. Usually, the last step in compiling a program is to run <code>ld</code> command.</li> <li>There\u2019s a very similar command called <code>ldd</code>, which is used to print the shared library dependencies of an executable or a shared library. <code>ldd</code> shows you the list of shared libraries that the executable requires to run, along with the full path of the shared library file. It's a useful tool for troubleshooting issues related to shared library dependencies, such as missing libraries or version mismatches. You can try <code>ldd /bin/ls</code> to see where the standard libraries are on your system (mostly in <code>/lib64</code>).</li> </ul> <p>You should also know what is a soname and how it differs from the real name of a library, but that\u2019s more complicated to discuss here.</p> <p>It\u2019s good to know the common compile/linker options (flags) for GCC because they mostly have the same names being used in CMake. For example, if you know what <code>-Wl,-rpath=&lt;dir&gt;</code> does, you must also know the Linux specific <code>rpath</code>, then it\u2019s very much trivial to understand the CMake variable <code>CMAKE_INSTALL_RPATH</code> and what this CMake command does:</p> <pre><code>set_target_properties(mytarget\n    PROPERTIES\n    INSTALL_RPATH \"@loader_path/../lib;@loader_path/../thirdparty/lib\"\n)\n</code></pre> <ul> <li><code>-std=c++11</code> - Specify the C++ version or ISO standard version.</li> <li><code>-l[mylib]</code> - Link to shared library or shared object. For example, <code>-lm</code> compiles against the shared library <code>libm</code> (basic math library, mostly C only). <code>-lpthread</code> compiles against the POSIX threads shared library. <code>-ld3d9</code> compiles against DirectX <code>d3d9.dll</code> and <code>-ld3d12</code> compiles against DirectX 12 <code>d3d12.dll</code>. Note that DirectX is for Windows exclusively so there\u2019s not a <code>libd3d9.so</code> on Linux. We also have <code>-lvulkan</code>, <code>-lGL</code>, <code>-lglfw</code> for linking to Vulkan, OpenGL and GLFW, and there\u2019s the very popular <code>-lboost_system</code> and <code>-lboost_filesystem</code>.</li> <li>Note that there\u2019s no white space after <code>-l</code>, the flag name must immediately follow, the same rule applies to <code>-L</code>, <code>-I</code> and <code>-D</code> as well. For example, <code>g++ -L/path/to/lib -I/path/to/include -lmylib foo.cpp -o myapp</code>.</li> <li><code>-L[/path/to/shared-libraries]</code> - Add search path to shared libraries, that is, a folder that contains <code>*.so</code>, <code>*.dll</code> or <code>*.dlyb</code> files, etc.</li> <li><code>-I[/path/to/header-files]</code> - Add search path to header files <code>.h</code> or <code>.hpp</code>. Usually we have many include paths, so you can pass as many <code>-I</code> as you need.</li> <li><code>-D[FLAG]</code> or <code>-D[FLAG]=VALUE</code> - Pass preprocessor flags to the header and source files so that <code>#ifdef FLAG</code> and <code>#if FLAG</code> evaluates to true. For example, <code>-DDEBUG</code> is equivalent to adding <code>#define DEBUG</code> to your code, <code>-DFOO=1</code> is equivalent to adding <code>#define FOO = 1</code>, and <code>-DVERSION=\"2.0.0\"</code> is equivalent to adding <code>#define VERSION \"2.0.0\"</code>.</li> <li><code>-c [foo.cpp]</code> - Compile source file into object code (input to linker). <code>-c</code> means compile only, don't run the linker.</li> <li><code>-g</code> - Enable this flag will tell the compiler to generate debugging info so that you can view stacktraces in your code with GDB and Valgrind.</li> <li><code>-g3</code> - Similar to <code>-g</code> but will generate even more debugging info for more detailed views, at the cost of making your code much larger.</li> <li><code>-shared</code> - Build a shared library (<code>.so</code> on Unix-like OS, <code>.dylib</code> on MacOSX, or <code>.dll</code> on Windows).</li> <li><code>-o [/path/to/output-file]</code> - Specify the name and path of the output file, of course.</li> <li><code>-Wall</code> - Turn on all standard compiler warning flags, specifically <code>-Waddress, -Wcomment, -Wformat, -Wbool-compare, -Wuninitialized, -Wunknown-pragmas, -Wunused-value, -Wunused-value</code>, etc.</li> <li><code>-Werror</code> - Turn any warning into a compilation error.</li> <li><code>-Wextra</code> - Enable extra warning flags not enabled by <code>-Wall</code>, such as <code>-Wsign-compare</code> (C only), <code>-Wtype-limits</code>, <code>-Wuninitialized</code>.</li> <li><code>-Wpendantic</code> - Issue all warning required by ISO C and ISO C++ standard, it issues warning whenever there are compiler extensions non-compliant to ISO C or C++ standard.</li> <li><code>-Wunnused</code>, <code>-Wshadow</code>, <code>-Wpointer-arith</code>, <code>-Wconversion</code>, \u2026, you can basically know what they are from their names. For example, <code>-Wshadow</code> warns you when a variable declaration hides a previous declaration in outer scope.</li> <li><code>-W[name]</code> - Enable a specific warning flag, as we can see above.</li> <li><code>-Wno-[name]</code> - Disable a specific warning flag, note that there\u2019s a hyphen <code>-</code> after <code>-Wno</code>. For example, the opposite of <code>-Wunused</code> is <code>-Wno-unused</code>, and we also have <code>-Wno-pragmas</code>, <code>-Wno-invalid-memory-model</code>, etc.</li> <li><code>-Wl,-verbose</code> - Enable verbose mode in the linking process. You may find this syntax weird at first, but it does make sense. Compared to <code>-W[name]</code> which sets the compiler warning flag, <code>-Wl,-[name]</code> sets the linker warning flag, the <code>l</code> in <code>-Wl</code> means the linker.</li> <li><code>-Wl,-rpath=&lt;dir&gt;</code> - Set the Unix rpath. Note that <code>rpath</code> is semicolon-delimited so for multiple paths you would use <code>-Wl,rpath=/path/to/dir1;/path/to/dir2</code>, do not separate the paths by colons.</li> <li><code>-Wl,-rpath=$ORIGIN</code> - Set the Unix <code>rpath</code> to the executable current directory.</li> <li><code>-Wl,-dynamic-linker,/path/to/linker/ld-linux.so.2.1</code> - Change the default dynamic linker.</li> <li><code>-static-libgcc</code>, <code>-static-libstdc++</code> - Statically link against the <code>libgcc</code> and <code>libstdc++</code> runtime library.</li> <li><code>-O0</code> - Disable all optimization, faster compilation time, better for debugging builds. This allows you to step through code in the debugger.</li> <li><code>-Og</code> - Only enable optimizations which do not affect debugging, but in practice it\u2019s not always guaranteed, so better use <code>-O0</code>.</li> <li><code>-O2</code>, <code>-O3</code> - Higher level of optimization. Slower compile-time, better for production builds. <code>-OFast</code> enables even more higher level of optimization than <code>-O3</code>.</li> <li><code>-Os</code> - Optimize for size at the cost of speed, barely used unless your target is really large or your target runs on embedded systems.</li> <li><code>-m32</code>, <code>-m64</code> - Generate code for a 32-bit or 64-bit environment. The 32-bit environment sets <code>int</code>, <code>long</code> and pointer to 32 bits and generates code that runs on any i386 system. The 64-bit environment sets <code>int</code> to 32 bits and <code>long</code> and pointer to 64 bits and generates code for AMD's x86-64 architecture.</li> <li><code>-fno-exceptions</code> - Disable C++ exceptions (it may be better for embedded systems or anything where exceptiions may not be acceptable).</li> <li><code>-fno-rtti</code> - Disable RTTI (Runtime Type Information). There are many texts around where game and embedded systems developers report that they disable RTTI due to performance concerns.</li> </ul> <p>Conventionally, people use names <code>CFLAGS/CXXFLAGS</code> and <code>LDFLAGS</code> for compiler and linker flags respectively that are used during the compilation and linking processes of a software project. <code>CFLAGS/CXXFLAGS</code> controls the behavior of the compiler during compilation, while <code>LDFLAGS</code> controls the behavior of the linker during linking. Note that <code>CXX</code> just stands for C++ but can be used as a valid variable name, <code>CPP</code> is not used in that sense as it mostly refers to the file extension.</p> <ul> <li><code>CFLAGS</code> or <code>CXXFLAGS</code> is a variable that contains options to be passed to the compiler (usually gcc or clang) when compiling the source code. These options may include optimization flags, warning flags, include paths, and macro definitions, among others. For example, <code>-O2</code> is an optimization flag that tells the compiler to optimize the code for speed, and <code>-I&lt;path&gt;</code> is an include path flag that tells the compiler where to look for header files.</li> <li><code>LDFLAGS</code>, on the other hand, is a variable that contains options to be passed to the linker (usually ld or gold) when linking the compiled object files into an executable or shared library. These options may include library paths, library names, and linker flags, among others. For example, <code>-L&lt;path&gt;</code> is a library path flag that tells the linker where to look for libraries, and <code>-l&lt;name&gt;</code> is a library name flag that tells the linker which libraries to link against.</li> </ul> <p>Object files are <code>*.obj</code> on Windows but <code>*.o</code> on Linux, Unix and MacOSX. An object file does not 1:1 map to a <code>.cpp</code> file or a translation unit, that\u2019s a common misunderstanding! In fact, you can create an <code>.o</code> file for a single or for many source files. It is true that we usually compile every single source file into a single object file, but that\u2019s just for the sake of speed so that we can take advantage of incremental builds.</p> <p>Static libraries are <code>*.a</code> on Linux and <code>*.lib</code> on Windows, a static library is created by putting together several <code>.o</code> files, that\u2019s exactly what the linker does.</p> <p>Shared libraries and dynamic libraries are synonyms, they are the same thing. They are shared by many executables and they are dynamically loaded at runtime. Shared libraries are <code>*.so</code> (shared object) on Linux, <code>*.dylib</code> (dynamic library) on MacOSX, and <code>*.dll</code> (dynamically linked libraries) on Windows.</p> <p>The diff between static and dynamic libraries? That\u2019s too basic and you already know that, but does loading a shared library slow down your program at runtime with extra cost? NO. Shared libraries are only loaded once in physical memory by the OS, but its symbols' offset are virtually mapped to the memory table for each process, so each process will see the same library symbols in different addresses. When you run your program, the shared library you need is probably already loaded by the OS.</p> <p>Object libraries are less known to most people, this is an advanced concept. Object libraries are code compiled into .o object files but not combined into a single library, they are almost like static libraries, except that they are only used in certain special cases. Most commonly, people want to improve performance by only building certain code files once that are needed for multiple targets, and that\u2019s when object libraries can be useful. The core idea of creating object libraries is exactly the same as using precompiled headers pch.h for faster iteration, with the exception that it is targeting the program performance at runtime rather than the efficiency of build time.</p> <p>Some people (like me) have been under the impression that CMake is a piece of shit software. That\u2019s probably true for older versions of CMake (&lt;=2.8) before C+11 even exists, but as it evolves over time, modern CMake (3.4+, or better 3.26+) has become super clean, powerful and elegant, and it\u2019s been established as the industry standard for building C++ projects, that\u2019s why Rez also uses CMake for building Python projects. CMake 3.11+ are said to be significantly faster than previous versions. CMake is more than just a build system, making good use of it can help you enforce a good modular design of your project.</p> <p>In addition to a build system, over the years CMake has evolved into a family of development tools: CMake, CTest, CPack, and CDash. CMake is the build tool responsible for building software. CTest is a test driver tool, used to run regression tests. CPack is a packaging tool used to create platform-specific installers for software built with CMake. CDash is a web application for displaying testing results and performing continuous integration testing.</p> <p>CMake is not a build system, it is a build system generator. On Linux, running CMake consists of 2 steps internally, a \u201cConfigure\u201d step that processes your CMakeLists.txt file in memory, and a \"Generate\" step that actually creates the build files. The name \u201cCMake\u201d stems from the idea of creating a better cross-platform \u201cmake\u201d system, where the letter \u201cC\u201d stands for \u201ccross-platform\u201d. On Linux, you can imagine that CMake is a layer/tool on top of make, and make is a layer/tool on top of the g++ command (assume we are using the GCC compiler instead of Clang/LLVM or MSVC).</p> <p>A minimum \u201cHello, world!\u201d example of CMake:</p> <pre><code>cmake_minimum_required(VERSION 3.14)\nproject(MyApp)\nset(CMAKE_CXX_STANDARD 14)\nadd_executable(myapp main.cpp)\ninstall(TARGETS myapp DESTINATION /foo/bar/bin)\n</code></pre> <p>and this is how we can run <code>cmake</code> (when using <code>rez build ...</code> rez does everything for us behind the scenes).</p> <pre><code>cd /root/to/your/project          # where the top-level CMakeLists.txt file is located\nmkdir build &amp;&amp; cd build\ncmake ..                          # parse the top-level CMakeLists.txt and generate the build files\ncmake --build .                   # invoke the build files to build your targets (compiling + linking)\ncmake --build . --target install  # install your project (files, built targets, etc)\n</code></pre> <p>Note that if using relative paths in <code>install(...)</code>, the paths are relative to <code>${CMAKE_INSTALL_PREFIX}</code> which typically defaults to <code>/usr/local</code>, it won\u2019t be installed to your project directory (otherwise other users cannot find it).</p> <p>In CMake, every variable is a string. When a variable is undefined, it defaults to an empty string. To read a variable, use <code>${}</code>, this is called a variable reference. You can nest variable references: <code>${outer_${inner_var}_var}</code>. They will be evaluated from the inside out.</p> <p>To define a variable on the command line, use <code>DFOO=Bar</code>. For example, suppose you are in the build folder and you run <code>cmake -DNAME=cat ..</code> to execute the <code>CMakeLists.txt</code> file in the parent folder, this will create a variable called <code>NAME</code> in <code>CMakeLists.txt</code> and its value <code>${NAME}</code> is equal to <code>\"cat\"</code>.</p> <ul> <li>To define a variable inside a CMake script, use the <code>set</code> command. For example, <code>set(THING \"funk\")</code> creates a variable called <code>THING</code> and sets its value <code>${THING}</code> to <code>\"funk\"</code>. Note that quotes around arguments are optional, as long as there are no spaces or variable references in the argument.</li> </ul> <p>By convention, variable names are all CAPS, some people like to use lowercase for local variables though.</p> <p>CMake does not have classes, but you can simulate a data structure by defining a group of variables with names that begin with the same prefix. When you see a list of variables starting with the same prefix, you can assume that they belong to the same group. That\u2019s just a convention.</p> <pre><code>set(PACKAGE OCIO)\nset(${PACKAGE}_NAME \"OpenColorIO\")\nset(${PACKAGE}_VERSION \"2.0.1\")\nmessage(\"The version of ${PACKAGE}_NAME is ${PACKAGE}_VERSION\")\n</code></pre> <p>In CMake, every statement is a command that takes a list of string arguments and has no return value. Arguments are separated by (unquoted) spaces. For example, CMake has a math command that performs arithmetic. The first argument must be <code>EXPR</code>, the second argument is the name of the variable to assign, and the third argument is the expression to evaluate \u2013 all strings.</p> <pre><code>math(EXPR MY_SUM \"1 + 1\")\nmath(EXPR DOUBLE_SUM \"${MY_SUM} * 2\")  # ${DOUBLE_SUM} will be 4\n</code></pre> <p>https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html - A full list of all CMake native commands. For example, the <code>string</code> command lets you perform advanced string manipulation, including regular expression replacement. The <code>file</code> command can read or write files, or manipulate filesystem paths.</p> <p>Even flow control statements are commands: the <code>if/endif</code> commands, <code>while/endwhile</code> commands, <code>foreach/endforeach</code> commands, etc.</p> <p>White space doesn\u2019t matter so there\u2019s no indentation in CMake, but it\u2019s common to indent the enclosed commands for readablity:</p> <pre><code>if(WIN32)  # checks whether CMake's built-in variable WIN32 is set\n    message(\"You're running CMake on Windows.\")\nelseif(APPLE)\n    message(\"You're running CMake on MacOS.\")\nelse()\n    message(\"You're running CMake on other platforms.\")\nendif()\n</code></pre> <pre><code>set(x \"1\")\nwhile(x LESS \"100\")\n    message(\"${x}\")\n    math(EXPR x \"${x} + 1\")\nendwhile()\n</code></pre> <p>https://cmake.org/cmake/help/latest/command/if.html and https://cmake.org/cmake/help/latest/command/foreach.html - See documentation for how to write a condition.</p> <p>Since every variable is a string in CMake, there\u2019s a rule for checking whether a condition <code>if(&lt;constant&gt;)</code> is true or false.</p> <ul> <li>True if the constant is <code>1</code>, <code>ON</code>, <code>YES</code>, <code>TRUE</code>, <code>Y</code>, or a non-zero number (including floating point numbers).</li> <li>False if the constant is <code>0</code>, <code>OFF</code>, <code>NO</code>, <code>FALSE</code>, <code>N</code>, <code>IGNORE</code>, <code>NOTFOUND</code>, the empty string, or ends in the suffix <code>-NOTFOUND</code>.</li> <li>Note that these named boolean constants are case-insensitive, so <code>YES/yes/Yes</code> all evaluate to true.</li> <li>Note that environment variables cannot be tested this way: <code>if(ENV{some_var})</code> will always evaluate to false.</li> </ul> <p><code>if</code> and <code>while</code> are different from other CMake commands in that if the name of a variable is specified without quotes, the command will use the variable\u2019s value. So <code>while(x LESS \"100\")</code> is equivalent to <code>while(\"${x}\" LESS \"100\")</code>, <code>if(x)</code> is equivalent to <code>if(${x})</code>, but for other commands we need to be explicit by using <code>${x}</code>.</p> <p>In CMake, lists are just semicolon-delimited strings. When you pass a list variable to a macro or command, CMake will split the value at the semicolons and pass multiple arguments to the enclosing command. For example:</p> <pre><code>set(ARGS \"EXPR;T;1 + 1\")\nmath(${ARGS})  # equivalent to calling math(EXPR T \"1 + 1\")\n</code></pre> <p>If more than two arguments are passed to the set command, they are joined by semicolons, then assigned to the specified variable.</p> <pre><code>set(MY_LIST These are separate arguments)      # this is how we create a list variable\nset(MY_STRING \"These are separate arguments\")  # will be treated as a single string if quoted\nmessage(\"${MY_LIST}\")                          # These;are;separate;arguments\n</code></pre> <p>You can manipulate a list using the <code>list</code> command:</p> <pre><code>list(REMOVE_ITEM MY_LIST \"separate\")\nmessage(\"${MY_LIST}\")  # These;are;arguments\n</code></pre> <p>The <code>foreach/endforeach</code> command accepts multiple arguments. It iterates over all arguments except the first, assigning each one to the named variable:</p> <pre><code>foreach(ARG These are separate arguments)\n    message(\"${ARG}\")  # prints each word on a separate line\nendforeach()\n</code></pre> <p>This is how we iterate over a list (CMake will split the variable\u2019s value and pass multiple arguments to the command):</p> <pre><code>foreach(ARG ${MY_LIST})  # CMake will split the variable's value and pass multiple arguments to the command\n    message(\"${ARG}\")    # again, prints each item on a separate line\nendforeach()\n</code></pre> <p>There is also a more modern CMake foreach syntax.</p> <pre><code>foreach(var IN ITEMS foo bar baz)\n    message(${var})\nendforeach()\n\nforeach(var IN LISTS my_list)\n    message(${var})\nendforeach()\n\nforeach(var IN LISTS my_list ITEMS foo bar baz)\n    message(${var})\nendforeach()\n</code></pre> <p>CMake script files with the extension <code>.cmake</code> are called CMake modules, they are CMake\u2019s vehicle for enabling code reuse. Inside CMake modules, there are collections of functions and macros that are either CMake-defined or user-defined. In CMake macros and functions are universally referred to as commands, and they are the primary method of defining code that can be called multiple times.</p> <pre><code>macro(macro_name arg1 arg2 ...)\n    # body of the macro\nendmacro()\n</code></pre> <p>This is how you can define a macro in CMake. Note that CMake allows different ways of ending a macro, depending on the preference of the developer.</p> <ul> <li><code>endmacro()</code>: This is the simplest and most commonly used way to end a macro. It does not require any arguments.</li> <li><code>endmacro(macro_name)</code>: This specifies the name of the macro that is being ended. It is useful when you have multiple macros in your CMake file and you want to make it clear which macro is being closed.</li> <li><code>endmacro(macro_name arg1 arg2 ...)</code>: This is similar to the previous example, but it includes the arguments of the macro. This can be useful when you have macros with many arguments and you want to make sure you are closing the correct one.</li> </ul> <p>Macros can also have optional arguments, variable arguments, and use the <code>return()</code> command to return a value.</p> <p>Optional arguments can be specified by providing default values for the macro arguments, for example:</p> <pre><code>macro(macro_name arg1 arg2 arg3=\"default_value\")\n  # body of the macro\nendmacro()\n</code></pre> <p>Variable arguments can be specified using the ... syntax, for example:</p> <pre><code>macro(macro_name arg1 arg2 ...)\n  # body of the macro\nendmacro()\n</code></pre> <p>... indicates that the macro can accept an arbitrary number of additional arguments. The variable arguments can be accessed using the <code>ARGN</code> CMake variable, which contains a list of all the additional arguments passed to the macro. Note that <code>${ARGN}</code> contains all of the arguments passed to a macro after the named arguments, but <code>${ARGV}</code> is the full list of arguments passed to the function, including both named and unnamed (variable) arguments.</p> <p>Macros run in the same scope as their caller. Therefore, all variables defined inside a macro are set in the caller's scope. This can sometimes lead to naming conflicts with variables defined outside of the macro. When defining macros, the best practice is to make sure the variable names do not conflict with any other variables in the caller\u2019s scope, otherwise it can lead to subtle bugs or unexpected results like this:</p> <pre><code>macro(print_list my_list)\n    foreach(var IN LISTS my_list)\n        message(\"${var}\")\n    endforeach()\nendmacro()\n\nset(my_list a b c d)\nset(my_list_of_numbers 1 2 3 4)\nprint_list(my_list_of_numbers)\n</code></pre> <p>This code block will print <code>a b c d</code> (each on a separate line) instead of <code>1 2 3 4</code>, because the macro always takes in the variable <code>my_list</code> in the parent scope.</p> <p>In CMake, you can use a pair of <code>function/endfunction</code> commands to define a function.</p> <pre><code>function(doubleIt VALUE)\n    math(EXPR RESULT \"${VALUE} * 2\")\n    message(\"${RESULT}\")\nendfunction()\n\ndoubleIt(\"4\")  # prints: 8\n</code></pre> <p>Unlike macros, functions run in their own scope. None of the variables defined in a function pollute the caller\u2019s scope. If you want to return a value, you can pass the name of a variable to your function, then call the set command with the special argument <code>PARENT_SCOPE</code>:</p> <pre><code>function(doubleIt VARNAME VALUE)              # VARNAME is a variable in the global scope\n    math(EXPR RESULT \"${VALUE} * 2\")\n    set(${VARNAME} \"${RESULT}\" PARENT_SCOPE)  # set the named variable in caller's scope\nendfunction()\n</code></pre> <p>Functions also accept an arbitrary number of arguments in the same way that macros do.</p> <p>Both macros and functions can use the <code>return()</code> statement to exit early, but they do not return a value, instead, they typically modify one or more variables that are passed in as arguments. For example, <code>macro(foo outvar invar)</code>.</p> <p>CMake variables are defined at file scope. The <code>include</code> command executes another CMake script in the same scope as the calling script. It\u2019s a lot like the <code>#include</code> directive in C/C++. It\u2019s typically used to define a common set of functions or macros in the calling script. It uses the variable <code>CMAKE_MODULE_PATH</code> as a search path.</p> <p>The <code>find_package</code> command looks for scripts of the form <code>Find*.cmake</code> and also runs them in the same scope. Such scripts are often used to help find external libraries. For example, if there is a file named <code>FindSDL2.cmake</code> in the search path, <code>find_package(SDL2)</code> is equivalent to <code>include(FindSDL2.cmake)</code>. (Note that there are several ways to use the <code>find_package</code> command \u2013 this is just one of them.)</p> <p>CMake\u2019s <code>add_subdirectory</code> command, on the other hand, creates a new scope, then executes the script named <code>CMakeLists.txt</code> from the specified directory in that new scope. You typically use it to add another CMake-based subproject, such as a library or executable, to the calling project. The targets defined by the subproject are added to the build pipeline unless otherwise specified. None of the variables defined in the subproject\u2019s script will pollute the parent\u2019s scope unless the <code>set</code> command\u2019s <code>PARENT_SCOPE</code> option is used.</p> <p>So that means a child <code>CMakeLists.txt</code> has its own scope and it cannot see variables defined in the parent <code>CMakeLists.txt</code>? NO. To make it clear, when <code>add_subdirectory</code> is executed, it creates a separate scope to process the child <code>CMakeLists.txt</code> and creates a copy of all parent variables to the newly created scope, so the child <code>CMakeLists.txt</code> still sees the variable values defined in the parent level, but they are no longer the same variables, just copies. If you need to update a parent variable from the child CMakeLists.txt, you must use the <code>PARENT_SCOPE</code> option like this:</p> <pre><code>set(A \"Child\" PARENT_SCOPE)  # tells CMake to update the original A variable in the parent scope\n</code></pre> <p>In other words, unless the <code>PARENT_SCOPE</code> option has been specified, when setting a parent-level variable in a subdirectory it overrides the value in that scope and any deeper subdirectories. Don\u2019t forget that functions also create a new scope.</p> <p>Well, now we know <code>PARENT_SCOPE</code> sets a variable into the parent scope, but there\u2019s another scope-related option called <code>CACHE</code> which sets the variable in the <code>CMakeCache.txt</code>, this effectively sets the variable in all scopes.</p> <p>Warning</p> <p>Unlike C-based languages, CMake\u2019s loop and control flow blocks do not have their own scopes. Variables set inside conditional blocks or loops persist after the <code>endif()/endwhile()/endforeach()</code>.</p> <p>A CMake script defines targets using the <code>add_executable</code>, <code>add_library</code> or <code>add_custom_target</code> commands. Once a target is created, it has properties that you can manipulate using the <code>get_property</code> and <code>set_property</code> commands. Unlike variables, targets are visible in every scope, even if they were defined in a subdirectory. All target properties are strings.</p> <pre><code>add_executable(MyApp \"main.cpp\")                           # create a target named MyApp\nget_property(MYAPP_SOURCES TARGET MyApp PROPERTY SOURCES)  # get the target's SOURCES property and assign it to MYAPP_SOURCES\nmessage(\"${MYAPP_SOURCES}\")                                # prints: main.cpp\n</code></pre> <p>Other target properties include <code>LINK_LIBRARIES</code>, <code>INCLUDE_DIRECTORIES</code> and <code>COMPILE_DEFINITIONS</code>. Those properties are modified, indirectly, by the <code>target_link_libraries</code>, <code>target_include_directories</code> and <code>target_compile_definitions</code> commands. At the end of the script, CMake uses those target properties to generate the build pipeline. There are properties for other CMake entities, too. There is a set of directory properties at every file scope. There is a set of global properties that is accessible from all scripts. And there is a set of source file properties for every C/C++ source file.</p> <p>Arguments in CMake can be difficult at first. Previously we talked about named arguments, which are also called the positional arguments or required arguments, but there\u2019s also the so-called keyword arguments. Keyword arguments use specific predefined ALL-CAPS keywords to separate arguments, each keyword can take no arguments, one argument, or a list. You already see the <code>PARSE_ARGUMENTS</code> macro in rez, and you know the examples I\u2019ve written there. But keyword arguments are ubiquitous in CMake built-in commands as well, the only way to master them is to look at the documentation.</p> <p>CMake offers boolean operator for string comparisons, such as <code>STREQUAL</code> for string equality, and for version comparisons, such as <code>VERSION_EQUAL</code>.</p> <p>To create a list of lists, you make a list of variable names that refer to other lists.</p> <pre><code>set(list_of_lists a b c)\nset(a 1 2 3)\nset(b 4 5 6)\nset(c 7 8 9)\n</code></pre> <p>and this is how you can iterate through the list of lists</p> <pre><code>foreach(list_name IN LISTS list_of_lists)\n    foreach(value IN LISTS ${list_name})\n        message(${value})\n    endforeach()\nendforeach()\n</code></pre> <p>CMake has a list of predefined directory variables, must remember. Best practice - as a rule of thumb, you should always create a <code>build</code> folder under project root first, then run <code>cmake</code> command in the build folder, never run <code>cmake</code> in the project root.</p> Variable Description Example Path <code>CMAKE_INSTALL_PREFIX</code> Where the build products will be installed to <code>/usr/local/bin</code> <code>CMAKE_SOURCE_DIR</code> Top level project root folder, your top level CMakeLists.txt is here <code>\u2026/myapp</code> <code>CMAKE_BINARY_DIR</code> Top level project binary folder <code>\u2026/myapp/build</code> <code>CMAKE_CURRENT_SOURCE_DIR</code> Source folder of the current CMakeLists.txt <code>\u2026/myapp/mylib</code> <code>CMAKE_CURRENT_BINARY_DIR</code> Binary folder for the current CMakeLists.txt <code>\u2026/myapp/build/mylib</code> <p>Modern CMake are structured around targets and dependencies, not build flags, so you are not supposed to use a lot of custom defined variables. The whole family of CMake commands <code>target_*</code> can be used to express chains of dependencies and is much more effective than keeping track of state with variables. To create a target from source code, use <code>add_executable()</code> and <code>add_library()</code>. Then to configure the target, we use properties. Properties further determine the specific details of how CMake builds a target, such as compile flags and link libraries. The most common ones are:</p> CMake Property Scope Description <code>COMPILE_DEFINITIONS</code> Directory, Target, Source List of preprocessor macros to define when compiling the code <code>COMPILE_OPTIONS</code> Directory, Target, Source List of compiler flags to use when compiling the code <code>INCLUDE_DIRECTORIES</code> Directory, Target, Source List of directories to add to the include path <code>INSTALL_RPATH</code> Target rpath <code>LINK_LIBRARIES</code> Target List of other libraries (targets or file paths) that the target should be linked to <code>OUTPUT_NAME</code> Target Use this if you want the built executable or library to have a different name than its CMake target <code>POSITION_INDEPENDENT_CODE</code> Target Controls whether the code will be built as position independent, which is required when compiling shared libraries <code>SOURCES</code> Target The source files configured for a target <p>this is the full list of properties in CMake (but 90% of them are barely used). As you see, properties have scope, they can be set on a number of different levels:</p> <ul> <li>Global - affects the entire project</li> <li>Directory - affects the current directory and all sub-directories</li> <li>Target - only affects a specific target</li> <li>Source - affects a specific source file in all targets it\u2019s present in</li> </ul> <p>Use <code>target_link_libraries()</code> to link targets (dependencies), this allows the target to reference code stored in the given libraries.</p> <p>Many target properties come in 2 types/versions: private and interface.</p> <ul> <li>A private property only affects the target it is set on, e.g. <code>COMPILE_DEFINITIONS</code>. They are only used to compile the current target into binary, so that\u2019s an implementation detail, consumers of this target don\u2019t care these private properties.</li> <li>An interface property affects every other target that links to this target, e.g. <code>INTERFACE_COMPILE_DEFINITIONS</code>. Interface properties are used to carry dependencies between targets, these are called Usage Requirements that consumers of this target must follow in order to work properly.</li> <li>So does that mean if A links to B, then A also needs to check all the interface properties in B and copy paste them to A\u2019s own properties list? No. Link dependencies are transitive, meaning that linking will also pull in the interface options of the libraries being linked, and this is recursive. So if A links to B and B links to C, then CMake will automatically link A to C as well, pulling in all the interface properties from C to A, so we don\u2019t need to do it manually.</li> <li>If A links to B (so A is a customer of B), the author of B must make sure that B is properly configured in the sense that A (and any other customer) doesn\u2019t need to look at how target B is configured, because that\u2019s an implementation detail of B that other customers should not care about. If the author of B failed to do so, target B would be an ill-formed dependency, the project would be unmaintainable and there\u2019s no way to enforce a modular design. For example, you are a library writer and you created a library called Y, where the public API in header files requires an include path <code>/foo/include</code>, if you\u2019ve only added <code>/foo/include</code> to target Y\u2019s <code>INCLUDE_DIRECTORIES</code> property, then another library X which depends on Y will not be able to compile without manually adding <code>/foo/include</code> to its own <code>INCLUDE_DIRECTORIES</code> property, and this breaks the modular rule. To avoid this, target Y must add <code>/foo/include</code> to its <code>INTERFACE_INCLUDE_DIRECTORIES</code> property instead, target X should not need to know how Y works.</li> <li>In summary, modern CMake requires that each library defines its own usage requirements properly so they are passed transitively to other targets as necessary.</li> </ul> <p>So how do we set the properties then? Use commands that leverage usage requirements as listed below, do not use commands at the directory or global scope.</p> <pre><code>target_compile_definitions()\ntarget_compile_options()\ntarget_include_directories()\ntarget_link_directories()\ntarget_link_options()\ntarget_precompile_headers()\ntarget_sources()\n</code></pre> <p>There are 3 keywords for setting target properties in a command:</p> <ul> <li><code>PRIVATE</code> - only sets the private version of the property, e.g. <code>COMPILE_DEFINITIONS</code></li> <li><code>INTERFACE</code> - only sets the interface version of the property, e.g. <code>INTERFACE_COMPILE_DEFINITIONS</code></li> <li><code>PUBLIC</code> - sets both the private and interface version of the property, e.g. <code>COMPILE_DEFINITIONS</code> + <code>INTERFACE_COMPILE_DEFINITIONS</code></li> </ul> <p>Cache variables are special variables that keep their values between invocations of CMake. These variables are persistent across calls to <code>cmake</code> and available to all scopes in the project. Modifying a cache variable requires using a special form of the set function: <code>set(&lt;variable&gt; &lt;value&gt;... CACHE &lt;type&gt; &lt;docstring&gt; [FORCE])</code>.</p> <p><code>CMAKE_BUILD_TYPE</code> has 4 standard build types: <code>Debug</code>, <code>Release</code>, <code>RelWithDebInfo</code> and <code>MinSizeRel</code>. To set this variable, use <code>-DCMAKE_BUILD_TYPE=Release</code> command option for example. The main purpose of this variable is to control which compile flags are used.</p> <p>Generator expression are introduced in CMake 3.15, don\u2019t use them if you are running an older version.</p> <p><code>BUILD_INTERFACE</code> is a generator expression used in target properties that allows specifying include directories or compile definitions only when building a target. It is commonly used to specify header-only dependencies that are not needed at runtime.</p> <p>For example, the following code adds the include directory <code>./include</code> to the target <code>mylib</code> only when building the target, once it\u2019s already built into a binary, running it at runtime does not need that include path anymore.</p> <pre><code>target_include_directories(mylib\n  PUBLIC\n    $&lt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include&gt;\n)\n</code></pre> <p>Another example, the following code sets compile options for the target <code>mylib</code> only when the target is being built, not when it is installed. Once it\u2019s already built into a binary, consumers of <code>mylib</code> should not inherit these warning flags.</p> <pre><code>target_compile_options(mylib\n  INTERFACE\n    \"$&lt;BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused&gt;\"  # must be quoted since we have semicolons in the argument\n)\n</code></pre> <p>In general, <code>BUILD_INTERFACE</code> is used to specify include path or compiler flags that are only needed during the build process, while <code>INSTALL_INTERFACE</code> is used to specify things that are needed both during the build process and during installation.</p> <p>In CMake, an interface library is a special type of library that defines a set of requirements for linking against it. Unlike traditional libraries that contain actual object code, an interface library only specifies a list of headers and required linker flags. Interface libraries are useful when you have a set of requirements that multiple other libraries or executables share. Instead of duplicating the same requirements across all targets, you can define them once in an interface library and let the dependent targets link against it. Header-only libraries is a common example of an interface library, but an interface library doesn\u2019t even need to have header files or any code, it could just be a code-less target with only usage requirements.</p> <p>To create an interface library in CMake, you can use the <code>add_library()</code> command with the <code>INTERFACE</code> keyword. Here is an example:</p> <pre><code>add_library(A INTERFACE)\ntarget_include_directories(A INTERFACE include)\ntarget_link_libraries(A INTERFACE pthread)\ntarget_compile_features(A INTERFACE cxx_std_11)\n</code></pre> <p>Then, any target that links against A will inherit these requirements.</p> <p>Build vs Install - \"build\" refers to the process of compiling the source code and linking the object files to create the target binary, whereas \"install\" refers to the process of copying the binary files to a specified location on the system, typically in order to make them available to other programs or users. Compared with \u201cbuild\u201d, specifying install rules is much easier using the <code>install()</code> command.</p> <pre><code>install(TARGETS XXX DESTINATION bin)\ninstall(FILES XXX.h DESTINATION include)\n</code></pre> <p>In graphics and rendering, we often use the term \u201cartifacts\u201d to describe anomalies apparent during visual representation as in digital graphics and other forms of imagery, those are the visual artifacts or rendering artifacts that should not appear if everything works correctly, they signal that something is wrong. However, the official definition of \u201cartifacts\u201d merely refers to things made by human/artists, things that are not natural. In software engineering, a software artifact is an item that is produced during the development process, it could be any intermediate or final output produced during the software build process. In CMake or other build tools, \u201cbuild artifacts\u201d are the files generated by a build process, including the executable files, libraries, object files, configuration files, documentation, and any other files needed to run or distribute the software.</p> <p>For every target in the project, CMake will create a subfolder <code>&lt;target&gt;.dir</code> under <code>CMakeFiles</code>. The intermediate object files are stored in these folders, together with compiler flags and link line.</p> <p>When debugging CMake, how to print out the value of a variable? - You can use the <code>message()</code> command, but it\u2019s not user-friendly nor pretty, instead you should use:</p> <pre><code>include(CMakePrintHelpers)\ncmake_print_variables(var1 var2 ... varN)\n</code></pre> <p>In CMake, you can run custom commands at configure-time (when CMake is parsing your <code>CMakeLists.txt</code> file) prior to build system generation. This is achieved with the <code>execute_process</code> command which explicitly runs one (or more) child process(es) when invoking the cmake command. https://cmake.org/cmake/help/latest/command/execute_process.html How can this be useful? - Well, it\u2019s super useful, for example, we can use <code>execute_process</code> to check whether a module or library is installed on our computer before building occurs, we can use <code>execute_process</code> to resolve a rez environment first so that building process can find all the packages, etc. You can also use <code>execute_process</code> to run checks on our compilers and linkers, or check whether a certain library can be used correctly before attempting to build our own artifacts, but CMake already provides modules and commands for these purposes so you should directly use these: <code>check_cxx_compiler_flag</code>, <code>check_cxx_source_compiles</code>, etc.</p> <p>What if we want to perform some specific actions depending on targets (not configure-time anymore)? - In this case, we can use <code>add_custom_command</code> to add custom commands to a target, these commands can be executed before linking (with <code>PRE_BUILD</code> and <code>PRE_LINK</code>) or after (with <code>POST_BUILD</code>). That\u2019s also how rez implements its <code>pre_*</code> and <code>post_*</code> commands in package.py.</p> <p>Tip</p> <p>For large projects with many targets, we can visualize the dependencies between the targets with Graphviz:</p> <pre><code>$ cd build\n$ cmake --graphviz=myapp.dot ..\n$ dot -T svg myapp.dot -o myapp.svg\n</code></pre> <p>The visualization can help you quickly reason about the dependencies within your project.</p> <p>With the advent of CMake 3.0, also known as Modern CMake, there has been a significant shift in the way the CMake domain-specific language (DSL) is structured. Rather than relying on variables to convey information in a project, we should shift to using targets and properties. A target is declared by either <code>add_executable</code> or <code>add_library</code>. Each target has properties, which can be read with <code>get_target_property</code> and modified with <code>set_target_properties</code>. Compile options, compile definitions, include directories, source files, link libraries, and link options are common properties of targets. It is much more robust to use targets and properties than using variables. Using targets, you can achieve granular control over how artifacts are built and how their dependencies are handled. Get away from the legacy old-school CMake! (before v2.8)</p> <pre><code>target_link_libraries(A\n  PRIVATE B\n  INTERFACE C\n  PUBLIC D\n)\n</code></pre> <ul> <li><code>PRIVATE</code> - B will only be used to build A but not be propagated as a dependency to other targets consuming A.</li> <li><code>INTERFACE</code> - C will only be propagated as a dependency to other targets consuming A.</li> <li><code>PUBLIC</code> - D will be used to build A and will also be propagated as a dependency to any other targets consuming A.</li> </ul> <p>You can get the current value of any property with <code>get_property</code> and set the value of any property with <code>set_property</code>, these are mainly used for properties not in the target scope.</p> <p>OK, targets and properties are great, but how do I set up a target that is a header-only library? - Use only the <code>INTERFACE</code> visibility keyword!</p> <pre><code>add_library(mylib INTERFACE)\ntarget_include_directories(mylib INTERFACE include)\ntarget_link_libraries(mylib INTERFACE Boost::Boost)\n</code></pre> <p>CMake offers a family of commands to find artifacts installed on your system - <code>find_file</code>, <code>find_library</code>, <code>find_package</code>, <code>find_path</code>, <code>find_program</code>. The workhorse of dependency discovery is <code>find_package</code>, which will cover your needs in almost all use cases.</p> <p><code>find_package</code> will attempt finding the package with name <code>&lt;PackageName&gt;</code> by searching in a number of predefined folders. It is possible to ask for a minimum or exact version. If <code>REQUIRED</code> is given, a failed search will trigger a fatal error. The rules for the search are obtained from modules named <code>Find&lt;PackageName&gt;.cmake</code>. You should only use the other commands in the <code>find_*</code> family in very special, very narrow circumstances.</p> <p>Why we should only use <code>find_package</code> in modern CMake? Because it will set up imported targets: targets defined outside your project that you can use with your own targets. The properties on imported targets defines usage requirements for the dependencies. This means that when you <code>target_link_libraries</code> to link an external target discovered by <code>find_package</code>, the compiler flags, definitions, include directories, and link libraries from that external target will propagate to your own target as well.</p> <p>When attempting dependency detection with <code>find_package</code>, you should make sure that:</p> <ul> <li>A <code>Find&lt;PackageName&gt;.cmake</code> module exists,</li> <li>Which components, if any, it provides, and</li> <li>What imported targets it will set up.</li> </ul> <p>Where to acquire this information? - https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html#find-modules for example, from https://cmake.org/cmake/help/latest/module/FindBoost.html you can see that <code>find_package(Boost)</code> will set up a <code>Boost::boost</code> imported target for header-only dependencies (Boost include directory), use that as the argument to <code>target_link_libraries</code>. Here\u2019s another example that will pull in all the usage requirements from OpenMP to your own target.</p> <pre><code>find_package(OpenMP 4.5 REQUIRED COMPONENTS CXX).\ntarget_link_libraries(task-loop PRIVATE OpenMP::OpenMP_CXX)\n</code></pre> <p>What to do when there is no built-in <code>Find&lt;PackageName&gt;.cmake</code> module for a package you depend on? e.g. Pixar USD? - That\u2019s a hard question, I still need time to figure out.</p> <p>What if you want to compile Python wrappers to C++ in your project? - Use pybind11, it is a header-only library and has excellent integration with CMake.</p> <p>In CMake, an \"imported target\" is a target that is not built by the current CMake project, but is provided by an external source, such as a system library or a library built by another CMake project. An imported target can be used as a dependency of other targets, and CMake provides several commands to configure the usage of imported libraries, such as <code>find_package()</code> and <code>target_link_libraries()</code>.</p> <p>An \"interface library\" is a special type of CMake library target that only defines an interface and does not build any code. It can be used to specify dependencies and other properties that are required by other targets, without actually building any code.</p> <p>An \u201calias target\u201d is a way to create a new target name that refers to an existing target. This can be useful for creating shorter or more convenient target names or for creating different configurations for the same library. To create an alias target, you can use the <code>add_library()</code> command with the <code>ALIAS</code> option, followed by the name of the alias and the name of the target it should refer to. For example:</p> <pre><code>add_library(mylib mylib.cpp)\nadd_library(mylib_alias ALIAS mylib)\n</code></pre> <p>An alias target is effectively just a synonym, so it is read-only and non-modifiable. You can not use <code>set_target_properties</code> on an alias target.</p> <p>CMake tips and tricks?</p> <ul> <li>Do not glob patterns (e.g. all files that end with <code>*.cpp</code>) when defining targets, instead, list them explicitly, otherwise CMake can have trouble tracking dependency changes when you add files after you have configured.</li> <li>Do not collect all sources in one file, every subfolder deserves its own <code>CMakeLists.txt</code> for maintainability.</li> <li>Avoid variables with parent or global scope. Prefer functions over macros. Encapsulate and prefer separation of concerns.</li> <li>Always run <code>cmake</code> or <code>ccmake</code> in the build folder.</li> <li>Treat CMake code like production code and version control them. Do not version control the build files or make files.</li> <li>Define project-level properties globally. For example, a project might use a common set of compiler warnings. Defining such properties globally in the top-level <code>CMakeLists.txt</code> file prevents scenarios where public headers of a dependent target causing a depending target not to compile because the depending target uses stricter compiler options. e.g. <code>add_compile_options(-W -Wall -Werror)</code>.</li> <li>In modern CMake, forget the commands <code>add_compile_options</code>, <code>add_definitions</code>, <code>include_directories</code>, <code>link_directories</code>, <code>link_libraries</code>, etc. Those commands operate on the directory level rather than on the target scope, so all targets defined on that level inherit those properties which increases the chance of hidden dependencies.</li> <li>Instead of setting <code>CMAKE_CXX_FLAGS</code>, it\u2019s much better to tell CMake the compile features and let it figure out the appropriate compiler option to use.</li> <li>Don\u2019t understand targets and properties and the visibility levels and propagation rules? Think in terms of OOP! A target is just an object, and the properties are its member variables. Similarly, <code>add_executable</code> and <code>add_library</code> are the class constructors, <code>set_target_property</code>, <code>get_target_property</code> and the <code>target_*</code> family of commands are member functions.</li> <li>Always use visibility keywords <code>PUBLIC</code>, <code>PRIVATE</code> and <code>INTERFACE</code> in the <code>target_*</code> family of commands.</li> <li>Do not abuse <code>target_compile_options</code> to declare compile options that affect the ABI. Those options should be declared globally using the old-school <code>add_compile_options</code> as they have nothing to do with the target.</li> <li>Don\u2019t use <code>target_include_directories</code> with a path outside your module. That breaks the rule. Instead, properly specify the dependencies via <code>target_link_directories</code> to propagate include directories as usage requirements.</li> <li>Use <code>cmake_parse_arguments</code> as the recommended way to handle complex argument-based behaviors or optional arguments in any function.</li> <li>Finally this is a C++ tip - For each header file, there must be an associated source file that <code>#includes</code> the header file at the top, even if that source file would otherwise be empty. This helps keep the source tree clean and complete, otherwise most analysis tools cannot analyze the header file alone and report diagnostics.</li> </ul> <p>Deep industry talks:</p> <ul> <li>https://www.youtube.com/watch?v=bsXLMQ6WgIk, https://github.com/boostcon/cppnow_presentations_2017/blob/master/05-19-2017_friday/effective_cmake__daniel_pfeifer__cppnow_05-19-2017.pdf</li> <li>https://www.youtube.com/watch?v=m0DwB4OvDXk, https://github.com/CppCon/CppCon2019/blob/master/Presentations/deep_cmake_for_library_authors/deep_cmake_for_library_authors__craig_scott__cppcon_2019.pdf</li> </ul> <p>Now you should be much more comfortable reading the official documentation for a deeper exploration</p> <p>When CMake is mixed with Rez\u2026</p> <pre><code>if(COVERAGE)\n    ADD_DEFINITIONS(-pg -fprofile-arcs -ftest-coverage)\n    SET_GLOBAL_LINKER_CXX_FLAGS(-fprofile-arcs)\nendif(COVERAGE)\n</code></pre> <ul> <li><code>ADD_DEFINITIONS</code> is a CMake native command that adds definitions to the compilation command line for source files. In this case, <code>-pg</code>, <code>-fprofile-arcs</code>, and <code>-ftest-coverage</code> are added as definitions (compiler flags).</li> <li><code>-pg</code> is a compiler flag used for profiling the code. When this flag is used, the compiler generates profiling information that can be used to determine the execution time of different functions in the program. For example, the <code>gprof</code> profiling tool can use this profiling information to determine which functions in a program take the most time to execute.</li> <li><code>-fprofile-arcs</code> and <code>-ftest-coverage</code> are compiler flags used for code coverage analysis. These flags instrument the code with probes that record how many times each line of code is executed during the program's execution. The information is then used to generate a report that shows which lines of code were executed and which were not.</li> <li><code>-fprofile-arcs</code> is also a linker flag. <code>SET_GLOBAL_LINKER_CXX_FLAGS(-fprofile-arcs)</code> tells the linker to generate code coverage information as well.</li> </ul> <p>These flags are often used together to generate profiling and coverage information for the program when it is compiled and executed. That\u2019s what this code block does. To enable it, add a line <code>set(COVERAGE TRUE)</code> to your <code>CMakeLists.txt</code> file before it imports <code>include(RezBuild)</code>, alternatively, add an extra command line option, i.e. <code>cmake -DCOVERAGE=TRUE ...</code></p>"},{"location":"workspace/watchdog/","title":"Watchdog","text":"<p>Based on Google Crashpad.</p>"}]}